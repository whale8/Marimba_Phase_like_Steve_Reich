<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.slot" module="bach">

	<digest>
		Display and edit a single slot window
	</digest>

	<description>
		Provides the display and interface for the content of a slot window.
		You can perfectly imagine its content as the whole slot content of an hidden dummy note.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
		<metadata name="tag">bach interface</metadata>
		<metadata name="tag">U/I</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll containing slotinfo and/or slot content
			</digest>
			<description>
				See the <m>llll</m> method for more information
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The whole object dump
			</digest>
			<description>
				The information about the slotinfo and/or slot content is sent through this outlet, when a "dump" is requested.
				See the <m>dump</m> message to know more about the output syntax.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Notifications and answers to queries
			</digest>
			<description>
				This outlet sends the notifications and the answer to incoming queries, such as <m>sample</m> or <m>interp</m>.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				bang when changed
			</digest>
			<description>
				This outlet sends a bang whenever any element is changed via the interface.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Edit slot content
			</digest>
			<description>
				• <m>1</m>, <m>2</m>, <m>3</m>, <m>4</m>, <m>5</m>, <m>6</m>, <m>7</m>, <m>8</m>, <m>9</m>, <m>0</m>: Open
				corresponding slot window (1 meaning: first slot, 2 meaning: second slot, and so on, with 0 meaning: tenth slot) <br />
				• Press a slot hot key to open the corresponding slot window. All slots can be assigned a given slot key via
				the <m>key</m> specification in the slotinfo (see <m>llll</m> message to know more). <br />
				• <m>Shift+Tab</m>: Open next slot window (if a slot window is open). <br />
				• <m>Shift+Alt+Tab</m>: Open previous slot window (if a slot window is open). <br />
				• <m>Enter</m>: For "text" and "llll" slots: enter the introduced text or llll. <br />
				• <m>Backspace</m>: For "function" slots: deletes the selected slot points. <br />
				<br />
				Slot copy/paste: <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are copied; otherwise all the content of the active slot is copied. <br />
				• <m>Cmd+X</m> (mac) or <m>Ctrl+X</m> (win): Cut the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are cut; otherwise all the content of the active slot is cut. <br />
				• <m>Cmd+Shift+C</m> (mac) or <m>Ctrl+Shift+C</m> (win): Copy the content of all slots (not only the possibly open one). <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): Paste the copied content to every selected note. <br />
				   ↪ If the copied content are some selected points of a slot of type function, only those points are pasted at the current mouse position in the open slot. <br />
				     ↪ Add the <m>Ctrl</m> key (mac) or <m>Shift</m> key (win) to avoid deletion of existing intermediate points. <br />
				<br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Edit slot content
			</digest>
			<description>
				Common commands for all slots: <br />
				• <m>doubleclick</m> on the slot window header (e.g. on the slot name): Edit the slot content in external editor. <br />
				• <m>Cmd+doubleclick</m> on the slot window header (e.g. on the slot name): Erase all the slot content. <br />
				<br />
				For slots of type "function" and "3dfunction": <br />
				• <m>click</m> inside the active part of the slot window: Add a point. <br />
				• <m>Shift+click+drag</m>: Draw a rectangle to add/remove points to the current selection. <br />
				• <m>click</m> on the slot window header (upper strip): Clear current selection. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a point: Delete clicked point (or all selected points, if point was selected). <br />
				• <m>click+drag</m> on a point: Change the position of the point (or all selected points, if point was selected). <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Alt</m> keys and drag vertically to snap the Y coordinate of the point to one of the previously defined <m>ysnap</m> values (in the <m>slotinfo</m>). <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours points while dragging. <br />
				• <m>click+drag</m> on a segment: Change the vertical position of the segment ("function" slot only). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a segment ("function" slot only) or
				on the ending point of a segment (also "3dfunction" slot): Change the slope of the segment. <br />
				• <m>doubleclick</m> on a point: snap it to the average position between the previous and the next point. <br />
				   ↪ Add the <m>Shift</m> key to snap the point to the Y value of the previous one. <br />
				   ↪ Add the <m>Alt</m> key to snap the point to the Y value of the next one. <br />
				• <m>Ctrl+Alt+click+drag</m> (mac) or <m>Shift+Ctrl+Alt+click+drag</m> (win) on a point: drag up/down to change its Z coordinate ("3dfunction" slot only). <br />
				   ↪ Add the <m>Shift</m> key to snap the Z coordinate of the point to one of the previously defined <m>zsnap</m> values ("3dfunction" only). <br />
				<br />
				For slots of type "int", "float", "intlist" and "floatlist": <br />
				• <m>click</m> on a strip: Add or modify existing number. <br />
				• <m>click+drag</m> on the handle: modify existing number. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a strip: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				• <m>Cmd+click</m> on a strip: Delete the number <br />
				• <m>click</m> on the "add number..." label: Append a number to the list (slot "intlist" and "floatlist" only). <br />
				<br />
				For slots of type "text" and "llll": <br />
				• <m>doubleclick</m> on the slot window: Edit text or llll directly. <br />
				<br />
				For slots of type "filelist": <br />
				• <m>click</m> on the "add file..." label: Append a file to the list (choosen via a dialog box). <br />
				• <m>Shift+click</m> on a file name: Replace the file witha  new one (choosen via a dialog box). <br />
				• <m>click</m> on a file name: Make it active. <br />
				• <m>Cmd+click</m> on a file name: Delete the file. <br />
				<br />
				For slots of type "color": <br />
				• <m>doubleclick</m>: Start defining a color (if slot is empty). <br />
				• <m>click</m> or <m>click+drag</m>: Change the color or the hue (if clicking on the side bar). <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on the main rectangle: Change alpha value (transparency) by dragging up or down. <br />
				<br />
				For slots of type "spat": <br />
				• <m>click</m>: Add a spat point. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a spat point: Delete clicked spat point. <br />
				• <m>click+drag</m> on a point: Change the position of the point. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the spat point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours spat points while dragging. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a spat point: Drag up or down to change the angle. <br />
				• <m>Alt+click</m> on a spat point: Switch interpolation type (from linear to circular or vice versa). <br />
				<br />
				For slots of type "togglematrix": <br />
				• <m>click</m> on a cell: Toggle the cell value <br />
				<br />
				For slots of type "intmatrix", "floatmatrix": <br />
				• <m>click</m> or <m>click+drag</m> on a cell: Change the cell value <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a cell: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				<br />
				For slots of type "filter": <br />
				• <m>rightclick</m> or <m>twofingerstap</m>: Choose or change the filter type. <br />
				• <m>click+drag</m> left or right: Change cutoff frequency. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) or <m>Shift+Ctrl</m> (win) keys to enter the fine editing mode. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) up or down: Change Q (or slope). <br />
				• <m>Shift+click+drag</m> up or down: Change gain. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win): Revert gain to 0dB. <br />
				<br />
				For slots of type "dynfilter": <br />
				• <m>doubleclick</m>: Add a filter at the click position <br />
				• <m>rightclick</m> or <m>twofingerstap</m> on a filter column: Choose or change the filter type. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> on a filter column: Delete filter. <br />
				• <m>click+drag</m> on a filter column: Change filter cutoff frequency by dragging up or down. <br />
				• <m>click+drag</m> on a red square: Change filter cutoff frequency by dragging up or down, change temporal position by dragging left or right. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a filter column: Change Q (or slope) by dragging up or down. <br />
				• <m>Shift+Ctrl+click+drag</m> (mac) on a filter column: Change gain by dragging up or down. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a filter column: Revert gain to 0dB. <br />
				<br />
			</description>
		</method>
		<method name="addslot">
			<arg name="slot_number_or_name" optional="0" type="llll" />
			<digest>
				Modify all the conent of one or more slots
			</digest>
			<description>
				An <m>addslot</m> message will modify all the content of one or more slots.
				The syntax is <b>addslot (<m>slot_number</m> <m>SLOT_CONTENT</m>) (<m>slot_number</m> <m>SLOT_CONTENT</m>)...</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
			</description>
		</method>
		<method name="changeslotvalue">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<arg name="element_index" optional="0" type="int" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Change a specific value inside a slot
			</digest>
			<description>
				A <m>changeslotvalue</m> message will change a specific value inside a slot (possibly containing more than one element, such as
				a <m>function</m> slot, or an <m>intlist</m> slot...).
				The syntax is <b>changeslotvalue <m>slot_number</m> <m>element_index</m> <m>SLOT_ELEMENT_CONTENT</m></b>. <br />
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
				The <m>element_index</m> is the number identifying the position of the element to be changed (e.g., for a <m>function</m> slot: 1 for the first point, 2 for the second, and so on).
				The element content is a single element in the lists of the slot content syntax: a single point for a slot <m>function</m>, a single number for an <m>intlist</m> or <m>floatlist</m> slot,
				and so on. Such element must be unwrapped from its outer level of parentheses (if any). For instance, for a function,
				a good syntax is <b>changeslotvalue 2 3 0.5 20 0</b> which will change the 3rd point of the function contained in the second slot
				to the point <b>(0.5 20 0)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
		<method name="clear">
			<arg name="slot_number_or_name" optional="0" type="llll" />
			<digest>
				Clear all the content
			</digest>
			<description>
				A <m>clear</m> message deletes all the content in all the slots.
				A clear followed by a number clears the content of the given slot.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
			</description>
		</method>
		<method name="domain">
			<arg name="start_or_duration" optional="0" type="float" />
			<arg name="end" optional="1" type="float" />
			<digest>
				Set the displayed domain
			</digest>
			<description>
				If the <m>domain</m> message is followed by a single number, this is considered as the size
				of the domain (i.e. the displayed portion of <o>bach.slot</o>) for the currently displayed slot,
				and such message will change the local horizontal zoom of the slot so that the displayed
				portion matches the inserted number. <br />
				If the <m>domain</m> message is followed by a two numbers, these are considered as the starting and ending domain points for the currently displayed slot,
				and such message will change both the zoom and the scrollbar position so that the displayed
				portion of slot starts from the input starting point and ends at the input ending point. <br />
				This makes sense only for types of slots whose content domain
				is zoomable and mapped on the X axis; namely slots of type function, 3dfunction, spat and dynfilter.
			</description>
		</method>
		<method name="droplastundo">
			<arglist />
			<digest>
				Prune last undo step
			</digest>
			<description>
				A <m>droplastundo</m> message will prune the last undo step, by merging
				its information into the previous one.
			</description>
		</method>
		<method name="dump">
			<arg name="selective_dump_option" optional="1" type="symbol" />
			<digest>
				Dump information
			</digest>
			<description>
				A <m>dump</m> message will simply output the content of <o>bach.slot</o> in gathered syntax from the first outlet. <br />
				The output syntax is: <b>slot <m>SLOTINFO</m> <m>SLOTS_CONTENT</m></b>.
				The <m>SLOTINFO</m> is the only part of header which <o>bach.slot</o> can have.
				The <m>SLOTS_CONTENT</m> is the body of the object, with all the content
				of all the slots. <br />
				If the symbol "body" is given as argument, the <m>SLOTINFO</m> will not be dumped.
				If the symbol "header" or "slotinfo" is given as argument, the <m>SLOTS_CONTENT</m> will not be dumped.
				If a list of integers is given as output, they are considered slot indices, and only the content of the related slots will be dumped.
				<br /> <br />
				The general syntax for a slotinfo llll in a notation object header is: <b>(slotinfo (<m>slot_num1</m> <m>SPECIFICATIONS1</m>) (<m>slot_num2</m> <m>SPECIFICATIONS2</m>)...)</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction", "none".  <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). You can also put "temporal"
				if you want the window to correspond exactly to the note length, which is handy when dealing e.g. with envelopes or spatializations. <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: if followed by an llll sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: if followed by an llll sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>()</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "notecolor", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
		<method name="eraseslot">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<digest>
				Clear a specific slot
			</digest>
			<description>
				An <m>eraseslot</m> message will clear the content of a specific slot. The slot number of the slot to clear is given as argument.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
			</description>
		</method>
		<method name="getdomain">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the current domain
			</digest>
			<description>
				The <m>getdomain</m> message forces <o>bach.slot</o> to output from the Queries and Notifications outlet the current domain,
				i.e. the portion of <o>bach.slot</o> currently displayed inside the screen. This makes sense only for types of slots whose content domain
				is zoomable and mapped on the X axis; namely slots of type function, 3dfunction, spat and dynfilter.
				The syntax of the output answer is: <b>domain <m>slot_number</m> <m>start</m> <m>end</m></b>, where the
				<m>slot_number</m> can be replaced by the slot name, depending on the <m>outputslotnames</m> attribute,
				and the two following elements are the starting and ending point of the domain. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getdomainpixels">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the pixel position of the domain
			</digest>
			<description>
				The <m>getdomainpixels</m> message forces <o>bach.slot</o> to output from the playout the current position
				(in pixels) of the domain, i.e. the starting (left) and ending (right) pixels of the currently displayed portion of slot.
				These pixels are referred to the notation object box.
				The syntax of the output answer is: <b>domainpixels <m>start_pixel</m> <m>end_pixel</m></b>, where the
				two elements following the "domainpixels" symbol are the leftmost and rightmost horizontal points (in pixels) of the domain. <br />
				This makes sense only for types of slots whose content domain
				is zoomable and mapped on the X axis; namely slots of type function, 3dfunction, spat and dynfilter. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="inhibitundo">
			<arglist />
			<digest>
				Temporarily disable/enable undo step creation
			</digest>
			<description>
				An <m>inhibitundo</m> message followed by any non-zero number will
				temporarily disable any undo step creation. Use the same message followed by a zero
				to re-enable undo steps.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Display slot window
			</digest>
			<description>
				An <m>int</m> <m>N</m> has <o>bach.slot</o> display the <m>N</m>-th slot window.
			</description>
		</method>
		<method name="interp">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<arg name="interpolation_x" optional="0" type="int" />
			<digest>
				Return interpolated value of a function slot
			</digest>
			<description>
				An <m>interp</m> message will return the interpolated value in the range of a function slot,
				corresponding to the input domain value.
				Two arguments are expected: the slot number and the input domain value.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set slot content and/or slotinfo
			</digest>
			<description>
				An incoming llll sets the content of the slots.
				The expected syntax is: <b>slot <m>SLOTINFO</m> <m>SLOTS_CONTENT</m></b>
				where both <m>SLOTINFO</m> and <m>SLOTS_CONTENT</m> are optional. <br />
				The <m>SLOTINFO</m> is the only part of header which <o>bach.slot</o> can have.
				The <m>SLOTS_CONTENT</m> is the body of the object, with all the content
				of all the slots. <br /> <br />
				The general syntax for a slotinfo llll in a notation object header is: <b>(slotinfo (<m>slot_num1</m> <m>SPECIFICATIONS1</m>) (<m>slot_num2</m> <m>SPECIFICATIONS2</m>)...)</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction", "none".  <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). You can also put "temporal"
				if you want the window to correspond exactly to the note length, which is handy when dealing e.g. with envelopes or spatializations. <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: if followed by an llll sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: if followed by an llll sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>()</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "notecolor", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
		<method name="next">
			<arglist />
			<digest>
				Switch to next slot window
			</digest>
			<description>
				A <m>next</m> message opens the next slot's window.
				If last slot is reached, the first slot window will be opened.
			</description>
		</method>
		<method name="prev">
			<arglist />
			<digest>
				Switch to previous slot window
			</digest>
			<description>
				A <m>prev</m> message opens the previous slot window.
				If first slot is reached, the last slot window will be opened.
			</description>
		</method>
		<method name="read">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Open file
			</digest>
			<description>
				A <m>read</m> message will load the content of <o>bach.slot</o> starting from the information saved in a file.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
			</description>
		</method>
		<method name="redo">
			<arglist />
			<digest>
				Perform a redo step
			</digest>
			<description>
				A <m>redo</m> message will perform a redo step.
			</description>
		</method>
		<method name="refresh">
			<arglist />
			<digest>
				Force recomputation and redraw
			</digest>
			<description>
				The <m>refresh</m> message forces the recomputation of all the features and forces the object box to be redrawn.
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the slotinfo to the default one
			</digest>
			<description>
				A <m>resetslotinfo</m> message will reset the all the <m>slotinfo</m> to the original one.
				Beware that this may entail slot type conversions, which might result in loss of data if slot types are not compatible.
				The slotinfo is the information about the types, ranges and many further characteristics of each one of the slots.
				For bach.roll and bach.score, it is a global information: changing the slotinfo for a given slot will
				affect such slot for all the notes inside the notation object. See the <m>llll</m> method to know more about its syntax.
			</description>
		</method>
		<method name="sample">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<arg name="number_of_points" optional="0" type="int" />
			<arg name="delta" optional="1" type="symbol" />
			<digest>
				Sample a function slot
			</digest>
			<description>
				A <m>sample</m> message will sample a given function slot in a certain number of points.
				Two arguments are expected: the slot number and the number of sampling points.
				The sampling is regular: sampling points are equally spaced.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot. <br />
				If the <b>delta</b> symbol is given as third argument, the first numeric argument (which can also be non-integer, in
				this case) is considered to be the distance between samples (in the slot's domain function unit), and not the number of samples.
			</description>
		</method>
		<method name="undo">
			<arglist />
			<digest>
				Perform an undo step
			</digest>
			<description>
				An <m>undo</m> message will perform an undo step.
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="0" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Cut
			</digest>
			<description>
				Cuts, and puts global roll clipboard, slot data.
				The behavior and arguments of <m>cut</m> are exaclty as <m>copy</m>, with the addition that the copied
				content is subsequently deleted (see <m>copy</m> to know more).
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Paste
			</digest>
			<description>
				Pastes the content contained in the global clipboard, if the clipboard contains slot content. <br />
				A "slot" symbol is always expected as argument.
				The second integer argument sets the slot into which content has to be pasted.
				This number can be replaced with the "active" symbol, and the
				slot content will be applied to the open slot window.
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="0" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Copy
			</digest>
			<description>
				Copies into the global clipboard slot data.
				A "slot" symbol is always expected as argument.
				With no further arguments, the content of the open slot window is copied; if in addition to the "slot" symbol an integer
				is given, such integer is the number of the slot whose content is copied; finally, this integer can
				be substituted by the "all" symbol to copy the content of all slots.
			</description>
		</method>
		<method name="write">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save file in native format
			</digest>
			<description>
				A <m>write</m> message will save the content of <o>bach.slot</o> in a file, in native format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
			</description>
		</method>
		<method name="writetxt">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save file in text format
			</digest>
			<description>
				A <m>writetxt</m> message will save the content of <o>bach.slot</o> in a file, in readable text format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="activeslot" get="1" set="1" type="int" size="1">
			<digest>
				Active Slot
			</digest>
			<description>
				The currently open slot.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Active Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="allowcopypaste" get="1" set="1" type="int" size="1">
			<digest>
				Allow Copy/Paste
			</digest>
			<description>
				Toggles the ability to copy and paste data via the interface copy/paste commands.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Copy/Paste" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowslothzoom" get="1" set="1" type="int" size="1">
			<digest>
				Allow Slot Horizontal Zooming
			</digest>
			<description>
				Toggles the ability to allow the horizontal slot zooming and navigation (via mousewheel and <m>Cmd</m>+mousewheel, as standard zoom)
				for slots of type function, 3dfunction, spat and dynfilter. However, for <o>bach.roll</o> and <o>bach.score</o>,
				if the slot is defined to be "temporal", no slot zooming will be allowed,
				as the zoom will be passed to the underlying notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Slot Horizontal Zooming" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="automessage" get="1" set="1" type="atom_array" size="10">
			<digest>
				Automatically Send Message When Changed
			</digest>
			<description>
				Sets a message which is sent automatically to the notation object
				each time any change happens in the interface (right after the bang is sent through the last outlet).
				Use this with caution, since it creates a sort of hidden feedback connection!
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Send Message When Changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Background Color
			</digest>
			<description>
				Sets the color of the background in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bgslots" get="1" set="1" type="int_array" size="0">
			<digest>
				Slots In Background
			</digest>
			<description>
				Sets the slots to be displayed on the background even when slots windows are not open.
				The attribute expects a list of integers, each representing a slot number.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slots In Background" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="continuousbang" get="1" set="1" type="int" size="1">
			<digest>
				Continuously Output Bang If Changed
			</digest>
			<description>
				Toggles the ability to output continuously the bang through the last outlet
				while the mouse is down and dragging something. Also the <m>automessage</m>, if any, is sent continuously.
				This defaults to 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Continuously Output Bang If Changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				Toggles the ability to save the notation object content within the patch.
				By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxundosteps" get="1" set="1" type="atom" size="1">
			<digest>
				Maximum Number Of Undo Steps
			</digest>
			<description>
				Sets the maximum number of undo steps. 0 means that undo/redo system will be made inactive.
				The "inf" symbol means unlimited undo steps.
				Defaults to 50. You should change it to 0 if you perform heavy operations in real-time.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="atom" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number Of Undo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mousehover" get="1" set="1" type="int" size="1">
			<digest>
				Allow Mouse Hovering
			</digest>
			<description>
				Toggles mouse hovering capabilities.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Mouse Hovering" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notenamesstyle" get="1" set="1" type="int" size="1">
			<digest>
				Note Names Style
			</digest>
			<description>
				Sets the style of the note names display: "Latin" corresponds to note names such as
				"Do Re Mi Fa...", while "Anglo-Saxon" corresponds to note name such as "C D E F...".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Note Names Style" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="notificationsformessages" get="1" set="1" type="int" size="1">
			<digest>
				Notifications When Changed Via Messages
			</digest>
			<description>
				Toggles the ability to send notifications caused by actions coming from messages, and not only from the interface.
				For instance, a <m>inscreenpos</m> message will toggle a <m>domain</m> notification, and so on.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notifications When Changed Via Messages" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notifyopenslot" get="1" set="1" type="int" size="1">
			<digest>
				Notify About Open Slot
			</digest>
			<description>
				Toggles the ability to send a notification each time the open slot window
				is changed (and at the object instantiation, to state the originally open slot window).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notify About Open Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				llllobj_class_add_check_attr(c, LLLL_OBJ_UI);
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="samplingrate" get="1" set="1" type="float" size="1">
			<digest>
				Sampling Rate (For Filter Slots)
			</digest>
			<description>
				Sets the currentl sampling rate. "Manually" setting the sampling rate
				is necessary for a proper handling of the filter slots. No object in the bach library is a
				DSP objects, so this information should be set "by hand" (it could easily come from <o>dspstatus~</o>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="44100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Sampling Rate (For Filter Slots)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="selectioncolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selection Color
			</digest>
			<description>
				Sets the color of each selected notehead, accidental, duration line and note tail in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.8 0. 0.8 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selection Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="senddoneafterpaint" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' Only After Paint
			</digest>
			<description>
				If this is 1, the <m>done</m> notification is not sent when the content has been loaded or built,
				but after the content has been painted (which, in general, is later: paint is done at low priority). This is handy
				if you need to retrieve appearance data (such as pixel position) which is computed inside the paint method, and not
				when the object is loaded. If this is 0, on the other hand, the notification is sent right after the content has been loaded
				or built, and you have no guarantee that the display data will be correct when the notification is sent.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' Only After Paint" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="senddoneatstartup" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' At Startup (If Data Was Saved)
			</digest>
			<description>
				Toggles the ability to send a <m>done</m> notification through the playout (or the notification outlet
				for <o>bach.slot</o>) at the object instantiation, if content saved with the object is loaded.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' At Startup (If Data Was Saved)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showaccidentalspreferences" get="1" set="1" type="int" size="1">
			<digest>
				Display Accidentals
			</digest>
			<description>
				Handles the display of accidentals: <br />
				- Classically (default): for <o>bach.score</o>: accidentals are displayed classically, i.e. on the first (altered) note requiring them,
				and them never for any other note inside the same measure (but cautionary accidentals are possible: see the attribute <m>cautionaryaccidentals</m>);
				for <o>bach.roll</o>: this coincides with Altered Note (No Naturals) (see below). <br />
				- Always: accidentals are always displayed for all altered and naturals notes. <br />
				- Altered Notes: accidentals are always displayed for any altered note. Natural signs are preserved for notes which have to cancel such accidental. <br />
				- Altered Notes (No Repetition): accidentals are always displayed for any altered note, but dropped for immediate repetitions of the same note. <br />
				- Altered Note (No Naturals): accidentals are always displayed for any altered note, and natural signs are dropped for notes having to cancel such accidentals.
				In this case all non-natural notes have their accidental, and all natural notes have no accidental. <br />
				- Never: accidentals are never shown (always hidden). <br />
				IMPORTANT: be aware of the fact that, due to the cross dependencies between accidentals, in <o>bach.roll</o> the "Altered Notes"
				"Altered Notes (No Repetition)" configurations can be sensibly slower than any other any other configuration
				(<o>bach.score</o>, on the other hand, does not suffer from this issue).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notation" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Display Accidentals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showborder" get="1" set="1" type="int" size="1">
			<digest>
				Show Border
			</digest>
			<description>
				Toggles the ability to display the object border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Border" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showfocus" get="1" set="1" type="int" size="1">
			<digest>
				Show Object Focus
			</digest>
			<description>
				Toggles the display of a thicker border when the notation object has the focus.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Object Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlabels" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Labels
			</digest>
			<description>
				Toggles the display of automatic labels for points in the function slots and for bars in the intlist or floatlist slots.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Labels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlegend" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Legend
			</digest>
			<description>
				Toggles the ability to display the slot legend at the top right angle.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotnumbers" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Numbers In Slot Window
			</digest>
			<description>
				Toggles the display of slot numbers in the slot windows.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Numbers In Slot Window" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="slotfunctionptradius" get="1" set="1" type="float" size="1">
			<digest>
				Function Slot Point Radius
			</digest>
			<description>
				Sets the size of the radius of breakpoints inside slots of type function
				(rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1.3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Function Slot Point Radius" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotwinalpha" get="1" set="1" type="float" size="1">
			<digest>
				Slot Window Opacity %
			</digest>
			<description>
				Sets the percentage of transparency of the slot windows (0 being completely transparent, 100
				being completely opaque.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slot Window Opacity %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="undobang" get="1" set="1" type="int" size="1">
			<digest>
				Send bang Upon Undo
			</digest>
			<description>
				Toggles the ability of send the bang through the rightmost outlet when an undo/redo action is performed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send bang Upon Undo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="verboseundo" get="1" set="1" type="int" size="1">
			<digest>
				Post Undo/Redo Steps
			</digest>
			<description>
				Toggles the ability of undo system to post the performed undo or redo steps in the Max window.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Post Undo/Redo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="zoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom %
			</digest>
			<description>
				The zoom factor
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="150" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		bach.slot represents essentially an always-open slot window associated to an imaginary note.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.roll" />
		<seealso name="bach.score" />
		<seealso name="bach.slot2line" />
		<seealso name="bach.slot2curve" />
		<seealso name="bach.slot2filtercoeff" />
		<seealso name="05-Slot Machines" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll containing slotinfo and/or slot content.
				See the <m>llll</m> method for more information
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The whole object dump.
				The information about the slotinfo and/or slot content is sent through this outlet, when a "dump" is requested.
				See the <m>dump</m> message to know more about the output syntax.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Notifications and answers to queries.
				This outlet sends the notifications and the answer to incoming queries, such as <m>sample</m> or <m>interp</m>.
			</description>
		</entry>
		<entry name ="Outlet 3 (bang)">
			<description>
				bang when changed.
				This outlet sends a bang whenever any element is changed via the interface.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		bach.slot represents essentially an always-open slot window associated to an imaginary note.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
slot, display, edit, breakpoint function, filter, spat, number, list, matrix, color, select.
			</description>
		</entry>
	</misc>

</c74object>