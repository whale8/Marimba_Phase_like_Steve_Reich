<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.convertbase" module="bach" kind="patcher" category="Math">

	<digest>
		Perform base conversion for numbers
	</digest>

	<description>
		Converts numbers from any base to any other base.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The original number in the starting base
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The original digits in the starting base
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The digits of the converted number
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="startbase" optional="1" type="int">
			<digest>
				Start base
			</digest>
			<description>
				The base of the original number or digits.
			</description>
		</objarg>
		<objarg name="endbase" optional="1" type="int">
			<digest>
				End base
			</digest>
			<description>
				The base in which the number should be converted.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="int">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				Any integer in the left inlet is consider as the number to be converted,
				written in the starting base (e.g. <b>21</b> meaning 7 if starting base is base 3).
				The conversion is performed, and the converted digits
				are output from the right outlet, while the converted number (obtained by simply
				juxtaposition of the same digits) is output from the left outlet.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				If the <m>floatmode</m> attribute is on, any float in the left inlet
				is consider as the number to be converted, written in the starting base
				(e.g. <b>21.2</b> meaning 7.66666... if starting base is base 3).
				The conversion is performed, and the converted digits
				are output from the right outlet, with a level of parentheses around the
				digits corresponding to the integer part, and a level of parentheses around the digits
				corresponding to the fractional part. The converted number is output from the left outlet.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set digits, output result
			</digest>
			<description>
				Any <m>llll</m> in the second inlet is considered as a plain list
				of digits to be converted.
				The conversion is performed, and the converted digits
				are output from the right outlet, while the converted number (obtained by simply
				juxtaposition of the same digits) is output from the left outlet. <br />
				If the <m>floatmode</m> attribute is on, this list is expected as an <m>llll</m> of depth 2,
				having as first sublist the digits corresponding to the integer part of the number
				and as second sublist the digits corresponding to the fractional part.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="endbase" get="1" set="1" type="int" size="1">
			<digest>
				End Base
			</digest>
			<description>
				The base in which the number should be converted.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="End Base" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="floatmode" get="1" set="1" type="int" size="1">
			<digest>
				Floating Point Mode
			</digest>
			<description>
				Toggles the ability to receive and convert floating point numbers.
				By default this is off.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Floating Point Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdecimals" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Decimal Digits
			</digest>
			<description>
				The maximum number of decimal digits for the conversion. Default is 6.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Decimal Digits" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="startbase" get="1" set="1" type="int" size="1">
			<digest>
				Start Base
			</digest>
			<description>
				The base of the original number or digits.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Start Base" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.factorize" />
		<seealso name="bach./" />
		<seealso name="bach.%" />
		<seealso name="bach.gcd" />
		<seealso name="bach.lcm" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (int)">
			<description>
				The original number in the starting base.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				The original digits in the starting base.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The digits of the converted number.
			</description>
		</entry>
	</misc>

</c74object>