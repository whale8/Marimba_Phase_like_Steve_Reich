<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.poset" module="bach">

	<digest>
		Partially ordered sets
	</digest>

	<description>
		Represents a lattice as a partially ordered set, both as edge list and as adjacency list.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to order
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the two elements
				output via the lambda outlet are in correct order (according to your custom ordering),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Edges of the lattices
			</digest>
			<description>
				Each edge is an element in the form <b>(<m>A</m> <m>B</m>)</b>
				where <m>A</m> and <m>B</m> are the elements respectively at the beginning
				and at the end of the edge
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Adjacency list
			</digest>
			<description>
				Each element has the form <b>(<m>A</m> <m>B1</m> <m>B2</m>...)</b>
				where all the <m>Bi</m> are the elements to which <m>A</m> is connected.
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lattice minima
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Lattice maxima
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				First lambda outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from each one of the two lambda outlets have to be tested for "order":
				you should tell whether they are in the correct order (according to your custom ordering) or not.
				In the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Second lambda outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from each one of the two lambda outlets have to be tested for "order":
				you should tell whether they are in the correct order (according to your custom ordering) or not.
				In the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Returns the poset of the most recently received lllls.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Lambda inlet
			</digest>
			<description>
				Second inlet is a lambda inlet. <br />
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the two elements
				output via the lambda outlet are in correct order (according to your custom ordering),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Store data and compute poset
			</digest>
			<description>
				In first inlet: the llll in the right inlet is intersected with the edge list and adjacency list are output
				respectively from first and second outlet.<br />
				In second inlet: the llll is converted into an int
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.&gt;" />
		<seealso name="bach.&lt;" />
		<seealso name="bach.&gt;=" />
		<seealso name="bach.&lt;=" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to order.
			</description>
		</entry>
		<entry name ="Inlet 2 (int/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is in a 0/1 form: if the two elements
				output via the lambda outlet are in correct order (according to your custom ordering),
				this inlet should receive a 1; otherwise it should receive a 0. <br />
				The lambda inlet also accepts the 0/1 result in a native llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Edges of the lattices.
				Each edge is an element in the form <b>(<m>A</m> <m>B</m>)</b>
				where <m>A</m> and <m>B</m> are the elements respectively at the beginning
				and at the end of the edge
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Adjacency list.
				Each element has the form <b>(<m>A</m> <m>B1</m> <m>B2</m>...)</b>
				where all the <m>Bi</m> are the elements to which <m>A</m> is connected.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lattice minima.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Lattice maxima.
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				First lambda outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from each one of the two lambda outlets have to be tested for "order":
				you should tell whether they are in the correct order (according to your custom ordering) or not.
				In the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Second lambda outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, the elements output from each one of the two lambda outlets have to be tested for "order":
				you should tell whether they are in the correct order (according to your custom ordering) or not.
				In the first case, you should return a 1 into the lambda inlet, in the second case you should return a 0. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

</c74object>