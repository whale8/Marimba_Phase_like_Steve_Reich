<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.pad" module="bach" kind="patcher">

	<digest>
		Pad or trim an llll
	</digest>

	<description>
		Pads an llll in order to match a given length.
		If such length is less than the original one, the llll can be trimmed.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be padded or trimmed
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The output length
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The padding element
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The padded or trimmed llll
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="output_length" optional="0" type="int">
			<digest>
				Output length
			</digest>
			<description>
				The first integer argument sets the output length, i.e. the target length that
				the output llll must have.
			</description>
		</objarg>
		<objarg name="padding_element" optional="0" type="llll">
			<digest>
				Padding element
			</digest>
			<description>
				The second argument sets the element used for padding. This can be a single
				symbol or integer, such as <b>0</b> or <b>foo</b>, or a complex llll of size 1, such as
				<b>(1 2 4)</b>. Setting <b>null</b> as padding element forces <o>bach.pad</o> to repeat the
				last element of the incoming list (default).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Pad or trim llll
			</digest>
			<description>
				Performs the padding (or trimming) on the most received input data.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set output length
			</digest>
			<description>
				An integer in the second inlet sets the output length, i.e. the target length that
				the output llll must have.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				An <m>llll</m> in the first inlet sets the llll to be padded, and output the padded
				llll from the outlet, depending on the current output length and padding element (see below).
				The padding element is repeated at the end of the incoming llll so that the output one
				matches the introduced output length. If such length is less than the length of the original llll,
				and the <m>trim</m> attribute is set to 1, this latter is trimmed. <br />
				An llll of length 1 in the third inlet sets the padding element. Such element can be a single
				number or symbol, such as <b>0</b> or <b>foo</b>, or a complex (wrapped) llll, such as
				<b>(1 2 4)</b>. A <b>null</b> llll sets the padding element to be the last element of any incoming llll (default).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="align" get="1" set="1" type="int" size="1">
			<digest>
				Alignment
			</digest>
			<description>
				Sets the alignment of the original llll within the padded llll. <br />
				- If alignment is <b>Left</b> (default), the padding will be done at right. <br />
				- If alignment is <b>Center</b> the padding will be equally done at left and at right
				(rounding to the right). <br />
				- If alignment is <b>Right</b>, the padding will be done at left.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="trim" get="1" set="1" type="int" size="1">
			<digest>
				Trim If Needed
			</digest>
			<description>
				If the <m>trim</m> attribute is set to 1 (default),
				when the output length is less than the length of the original llll, this latter
				is trimmed at output; otherwise it is output as it is.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Trim If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.length" />
		<seealso name="bach.repeat" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be padded or trimmed.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				The output length.
			</description>
		</entry>
		<entry name ="Inlet 3 (number/symbol/llll)">
			<description>
				The padding element.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The padded or trimmed llll.
			</description>
		</entry>
	</misc>

</c74object>