<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.trace" module="bach">

	<digest>
		Compute the trace of a matrix
	</digest>

	<description>
		Computes the trace of a matrix, i.e. the sum of the elements on the diagonal.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach matrix calculus</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The matrix
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The trace of the incoming matrix
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output trace
			</digest>
			<description>
				Output the trace of the most recently received input data.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Output trace of incoming matrix
			</digest>
			<description>
				The object outputs the trace of the incoming matrix. <br />
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				llllobj_class_add_check_attr(c, LLLL_OBJ_VANILLA);
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="shift" get="1" set="1" type="int" size="1">
			<digest>
				Shift
			</digest>
			<description>
				Use the shift parameter to compute the sum of the elements of a secondary diagonal.
				Positive integers are upper secondary diagonals, negative integers are lower secondary diagonals.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Shift" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.det" />
		<seealso name="bach.m2jitcellblock" />
		<seealso name="16-Into The Matrix" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The matrix.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The trace of the incoming matrix.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
		For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
		i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
		as the number of rows.
		<br /> <br />
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
matrix, trace, sum, diagonal, calculate, compute, element.
			</description>
		</entry>
	</misc>

</c74object>