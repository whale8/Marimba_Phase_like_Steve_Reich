<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.portal" module="bach">

	<digest>
		Let lllls through
	</digest>

	<description>
		Performs no operation upon the incoming llll, except optional format (text/native) conversions.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be output unchanged
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Output llll
			</digest>
			<description>
				The llll coming from the corresponding inlet is immediately output unchanged.
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Bang when ready
			</digest>
			<description>
				If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
				its outlets are not immediately initialized as soon as the patch is loaded.
				For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object
				might get lost, or be output in the wrong format.
				When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
				which can be used to trigger any message to output automatically when the patch is loaded.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="inlets" optional="1" type="int">
			<digest>
				Number of llll inlets/outlets
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Output the llll unchanged
			</digest>
			<description>
				An llll in any inlet is immediately output from the current outlet unchanged,
				except for the optional format conversion according to the <m>out</m> attribute.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="clone" get="1" set="1" type="int" size="1">
			<digest>
				Clone
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clone" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		As usual, the formats of the output lllls are controlled by the <m>out</m> attribute.
		In <o>bach.portal</o>, though, the latter can have an additional value, <m>p</m>,
		which allows controlling the output format for subpatchers and abstractions.
		If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
		its outlets are not immediately initialized as soon as the patch is loaded.
		For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object might get lost, or be output in the wrong format.
		When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
		which can be used to trigger any message to output automatically when the patch is loaded.
		<o>bach.portal</o> has a communication mechanism with <o>bach.args</o>,
		ensuring that for each subpatcher <o>bach.portal</o> is ready when <o>bach.args</o> outputs its arguments.
		In this way, it is safe for the arguments of the patch to trigger messages to the outside of the patch itself.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.reg" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlets 1, 2, 3... (llll)">
			<description>
				llll to be output unchanged.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlets 1, 2, 3... (llll)">
			<description>
				Output llll.
				The llll coming from the corresponding inlet is immediately output unchanged.
			</description>
		</entry>
		<entry name ="The last Outlet (llll)">
			<description>
				Bang when ready.
				If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
				its outlets are not immediately initialized as soon as the patch is loaded.
				For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object
				might get lost, or be output in the wrong format.
				When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
				which can be used to trigger any message to output automatically when the patch is loaded.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		As usual, the formats of the output lllls are controlled by the <m>out</m> attribute.
		In <o>bach.portal</o>, though, the latter can have an additional value, <m>p</m>,
		which allows controlling the output format for subpatchers and abstractions.
		If <o>bach.portal</o>'s <m>out</m> attribute is set to <m>p</m>,
		its outlets are not immediately initialized as soon as the patch is loaded.
		For this reason, a message coming from a <o>loadbang</o> or <o>loadmess</o> object might get lost, or be output in the wrong format.
		When <o>bach.portal</o> is ready, it outputs a <m>bang</m> from its rightmost outlet
		which can be used to trigger any message to output automatically when the patch is loaded.
		<o>bach.portal</o> has a communication mechanism with <o>bach.args</o>,
		ensuring that for each subpatcher <o>bach.portal</o> is ready when <o>bach.args</o> outputs its arguments.
		In this way, it is safe for the arguments of the patch to trigger messages to the outside of the patch itself.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
portal, text, native, disabled, outlet, convert.
			</description>
		</entry>
	</misc>

</c74object>