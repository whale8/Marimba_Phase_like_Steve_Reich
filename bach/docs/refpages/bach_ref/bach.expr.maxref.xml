<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.expr" module="bach" category="Math">

	<digest>
		Evaluate mathematical expressions
	</digest>

	<description>
		Evaluates mathematical expressions upon lllls.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll with values or new expression
			</digest>
			<description>
				The values contained in the llll will be assigned to the variables during evaluation;
				in alternative, it is possible to set a new expression with the <m>expr</m> message.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Result of the evaluation
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="expression" optional="1" type="anything">
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The expression can contain variables, in the form <m>$in</m>, <m>$rn</m>, <m>$fn</m>, <m>$xn</m>, where <m>n</m> stands for an inlet number.
				<m>$in</m> will refer to an integer value extracted from the llll received in the n-th inlet;
				likewise, <m>$rn</m> will refer to a rational or integer value and <m>$fn</m> to a floating-point value.
				<m>$xn</m> will refer to an untyped value, meaning that the type of the value extracted from the llll will be taken as-is, including symbols (see the description of the <m>llll</m> method).
				Unless specific needs, <m>$xn</m> should be considered the preferred way to express variables.
				For a complete list of the mathematical operators and functions supported by <o>bach.expr</o>, please refer to the help file.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Return the result of the evaluation of the most recently received lllls and expression.
			</description>
		</method>
		<method name="expr">
			<arglist />
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The <m>expr</m> message, followed by a mathematical expression, will set the new expression to be evaluated by <o>bach.expr</o>.
				For more details on the expression syntax, please refer to the <b>arguments</b> section.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Store values to the expression variables
			</digest>
			<description>
				The lllls are iterated against each other (as in <o>bach.iter</o> with <m>recursionmode 1</m>),
				the values they contain are assigned to the variables according to the inlet each llll is received in and the llll is evaluated.
				In general, lllls should only be composed of numbers and sublists, but comparison operators also work upon symbols.
				An llll received in the leftmost inlet will trigger the evaluation and cause the result to be output.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="clone" get="1" set="1" type="int" size="1">
			<digest>
				Clone
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clone" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="maxvars" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Variables
			</digest>
			<description>
				Explicitly set the number of inlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Variables" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="scalarmode" get="1" set="1" type="int" size="1">
			<digest>
				Scalar Mode
			</digest>
			<description>
				When set to 1 an llll with a single element is iterated against all the elements of the other lllls.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Scalar Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The behavior of <o>bach.expr</o> is not unlike <o>vexpr</o>'s, but rationals and sublists are treated correctly.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.+" />
		<seealso name="bach.-" />
		<seealso name="bach.*" />
		<seealso name="bach./" />
		<seealso name="bach.%" />
		<seealso name="expr" />
		<seealso name="vexpr" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlets 1, 2, 3... (llll/expr)">
			<description>
				llll with values or new expression.
				The values contained in the llll will be assigned to the variables during evaluation;
				in alternative, it is possible to set a new expression with the <m>expr</m> message.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Result of the evaluation.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The behavior of <o>bach.expr</o> is not unlike <o>vexpr</o>'s, but rationals and sublists are treated correctly.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
expression, evaluate, variable, number, calculate, compute.
			</description>
		</entry>
	</misc>

</c74object>