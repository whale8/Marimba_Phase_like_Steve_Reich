<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.repeat" module="bach" kind="patcher">

	<digest>
		Repeat lllls
	</digest>

	<description>
		Repeats an incoming llll a certain number of times.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The llll to be repeated
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Number of repetitions
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The repeated llll
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="number_of_repetitions" optional="1" type="int">
			<digest>
				Number of repetitions
			</digest>
			<description>
				The optional argument sets the initial number of repetitions (the default is 1).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Repeat llll
			</digest>
			<description>
				Repeats the most recently received input llll.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set number of repetitions
			</digest>
			<description>
				A non-negative integer in the second inlet sets the number of times the
				incoming llll must be repeated.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Repeat llll
			</digest>
			<description>
				An llll in the first inlet will be repeated a certain number of times
				(defined by the number in the right inlet or by the argument), and then output
				through the outlet. For instance, repeating <b>foo (fee faa)</b> three times will yield
				<b>foo (fee faa) foo (fee faa) foo (fee faa)</b>. Via the <m>inwrap</m> and <m>outwrap</m>
				attributes you can add level of parenthesis for each individual repetition or for the whole
				output llll, which allows you to obtain more complicate output lllls, such as
				<b>(((foo (fee faa))) ((foo (fee faa))) ((foo (fee faa))))</b>.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="inwrap" get="1" set="1" type="int" size="1">
			<digest>
				Wrap Input
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Wrap Input" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outwrap" get="1" set="1" type="int" size="1">
			<digest>
				Wrap Output
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Wrap Output" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="unwrap" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The repetitions could be individually wrapped or globally wrapped, thanks to the
		<m>inwrap</m> and <m>outwrap</m> attributes
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.collect" />
		<seealso name="bach.group" />
		<seealso name="uzi" />
		<seealso name="bach.period" />
		<seealso name="bach.pad" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				The llll to be repeated.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				Number of repetitions.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The repeated llll.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The repetitions could be individually wrapped or globally wrapped, thanks to the
		<m>inwrap</m> and <m>outwrap</m> attributes
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
repeat, loop, wrap.
			</description>
		</entry>
	</misc>

</c74object>