<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.factorize" module="bach" category="Math">

	<digest>
		Factorize a number
	</digest>

	<description>
		Returns the factorization of an integer.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Number to factorize
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Factorization
			</digest>
			<description>
				The factorization is returned as an llll whose sublists contain each a prime factor and its exponent.
				For instance, the factorization of 12 is expressed as <b>(2 2) (3 1)</b>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				Return the factorization of the last received number
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Compute the factorization
			</digest>
			<description>
				The factorization of the given integer is returned as an llll whose sublists contain each a prime factor and its exponent.
				If a negative integer is received, the factorization of its opposite is returned.
				Even in 64-bit mode, only numbers up to 2147483647 can be factorized
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.prime" />
		<seealso name="bach.primeser" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (int)">
			<description>
				Number to factorize.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Factorization.
				The factorization is returned as an llll whose sublists contain each a prime factor and its exponent.
				For instance, the factorization of 12 is expressed as <b>(2 2) (3 1)</b>
			</description>
		</entry>
	</misc>

</c74object>