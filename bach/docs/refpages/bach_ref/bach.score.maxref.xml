<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.score" module="bach">

	<digest>
		Display and edit a score in classical notation
	</digest>

	<description>
		Displays a score in classical notation, and provides the interface to interact with it.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach notation</metadata>
		<metadata name="tag">bach interface</metadata>
		<metadata name="tag">U/I</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				bang or llll containing gathered syntax of the entire object
			</digest>
			<description>
				See the <m>bang</m> and <m>llll</m> methods for more information.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Measureinfo in separate syntax.
			</digest>
			<description>
				See the <m>llll</m> method for more information.
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Pitches (in cents) in separate syntax.
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Durations (in symbolic units, fractions of the whole note) in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="4" type="INLET_TYPE">
			<digest>
				Velocities (1 to 127) in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="5" type="INLET_TYPE">
			<digest>
				Ties (1 for notes starting a tie, 0 for any other note) in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
		<inlet id="6" type="INLET_TYPE">
			<digest>
				Extras in separate syntax
			</digest>
			<description>
				See the <m>llll</m> method for more information.
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Whole object dump
			</digest>
			<description>
				The gathered syntax of the whole <o>bach.score</o> (or a part of it, depending on the <m>dump</m> message arguments)
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Measureinfo
			</digest>
			<description>
				The measureinfo in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Pitches (in cents)
			</digest>
			<description>
				The pitches (in cents) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Durations
			</digest>
			<description>
				The durations (in symbolic units, fractions of the whole note) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				Velocities
			</digest>
			<description>
				The velocities (1 to 127) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</outlet>
		<outlet id="5" type="INLET_TYPE">
			<digest>
				Ties
			</digest>
			<description>
				The ties (1 for notes starting a tie, 0 for any other note) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</outlet>
		<outlet id="6" type="INLET_TYPE">
			<digest>
				Extras
			</digest>
			<description>
				The extras in separate syntax.
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>(<m>extra_name</m> <m>GLOBAL_CONTENT</m>) (<m>extra_name</m> <m>GLOBAL_CONTENT</m>)...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots",
				and also "articulations", but only for <o>bach.score</o>)
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). For instance, the pitch breakpoints specification for a given note may have the form
				<b>((0. 0. 0.) (0.5 500 0.5) (1. 0. 0.))</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>()</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>(graphics 6200 -1/2)</b>, one should just have <b>(6200 -1/2)</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="7" type="INLET_TYPE">
			<digest>
				Playout
			</digest>
			<description>
				Outlet sending information about elements being played, as well as query answers and notifications.
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</outlet>
		<outlet id="8" type="INLET_TYPE">
			<digest>
				bang when changed
			</digest>
			<description>
				This outlet sends a bang whenever any element has been changed via the interface.
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="numvoices" optional="1" type="int">
			<digest>
				Number of voices
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				Basic commands: <br />
				• <m>Backspace</m>: Delete all selected items, except for selected note tails, for which the backspace key reverts their pitch to the
				original notehead pitch (no glissando). <br />
				   ↪ Add the <m>Shift</m> key to delete selected measures; otherwise simple <m>Backspace</m> will clear the measure content. <br />
				• <m>→</m>: Shift selection onsets to the right; for selected tails: increase corresponding note duration <br />
				• <m>←</m>: Shift selection onsets to the left; for selected tails: decrease corresponding note duration <br />
				• <m>↑</m>: Raise pitch of selection by one step. <br />
				   ↪ Add the <m>Shift</m> key to raise the pitch by one octave. <br />
				   ↪ Add the <m>Ctrl+Shift</m> key to prevent notes from being assigned to different voices. <br />
				• <m>↓</m>: Lower pitch of selection by one step. <br />
				   ↪ Add the <m>Shift</m> key to lower the pitch by one octave. <br />
				   ↪ Add the <m>Ctrl+Shift</m> key to prevent notes from being assigned to different voices. <br />
				• <m>Cmd+Z</m> (mac) or <m>Ctrl+Z</m> (win): Undo <br />
				• <m>Cmd+Shift+Z</m> (mac) or <m>Ctrl+Y</m> (win): Redo <br />
				• <m>Cmd+L</m> (mac) or <m>Ctrl+L</m> (win): Lock/unlock items <br />
				• <m>Ctrl+A</m>, <m>Ctrl+B</m>, <m>Ctrl+C</m>, <m>Ctrl+D</m>, <m>Ctrl+E</m>, <m>Ctrl+F</m>, <m>Ctrl+G</m> (mac) or
				<m>Shift+Ctrl+A</m>, <m>Shift+Ctrl+B</m>, <m>Shift+Ctrl+C</m>, <m>Shift+Ctrl+D</m>, <m>Shift+Ctrl+E</m>, <m>Shift+Ctrl+F</m>, <m>Shift+Ctrl+G</m> (win):
				Transform pitches of selected notes into the corresponding pitch (A = La, B = Si, C = Do, and so on).
				The octave is chosen to be the one so that the snapped note is as near as possible to the previous note. <br />
				<br />
				Splitting, merging and ties: <br />
				• <m>Cmd+2</m>, <m>Cmd+3</m>, <m>Cmd+4</m>, <m>Cmd+5</m>, <m>Cmd+6</m>, <m>Cmd+7</m>, <m>Cmd+8</m>, <m>Cmd+9</m> (mac) or
				<m>Ctrl+2</m>, <m>Ctrl+3</m>, <m>Ctrl+4</m>, <m>Ctrl+5</m>, <m>Ctrl+6</m>, <m>Ctrl+7</m>, <m>Ctrl+8</m>, <m>Ctrl+9</m> (win):
				Split selected chords into the given number of pieces (2, 3, 4...). <br />
				   ↪ By default tied sequencies are split in their entiredy; add the <m>Alt</m> key to always split each selected chord singularly. <br />
				• <m>Cmd+Shift+Y</m> (mac) or <m>Ctrl+Shift+Y</m> (win): Merge selected chords <br />
				• <m>Cmd+T</m> (mac) or <m>Ctrl+T</m> (win): Tie selected chords to the following ones <br />
				<br />
				Measure widths and spacing: <br />
				• <m>Cmd+Shift+L</m> (mac) or <m>Ctrl+Shift+L</m> (win) when measures are selected: Lock/unlock measure barlines
				(toggle preventing measure widths from floating) <br />
				• <m>Shift+Backspace</m> when a barline is selected: Revert measure width factor to 1 <br />
				<br />
				Tempi: <br />
				• <m>Cmd+Alt+Shift+I</m> (mac) or <m>Ctrl+Alt+Shift+I</m> (win) when a tempo is selected: Toggle interpolation towards next tempo (rallentando
				or accelerando, depending on next tempo value)<br />
				<br />
				Sequencing and dump: <br />
				• <m>Spacebar</m> while not playing: Play (the playing starts from current playhead cursor position) <br />
				• <m>Spacebar</m> during playback: Stop (the playhead cursor position goes back to the former starting play point) <br />
				• <m>Shift+Spacebar</m> during playback: Pause (keep the playhead cursor at the last
				reached position, so that a new <m>play</m> message or a new <m>Spacebar</m> command will
				start playing from there) <br />
				• <m>Shift+Spacebar</m> while not playing: Play selection (start playing from the leftmost selected item
				and only play the selected items) <br />
				• <m>V</m>: Off-line play, also known as "selection dump" (immediately send the playout syntax of selected elements
				out the playout, see <m>dumpselection</m> message) <br />
				• <m>Shift+V</m>: Chordwise off-line play (as the previous command, but if a single note is selected, all its chord content
				is output through the playout) <br />
				• <m>Shift+Alt+V</m>: Send whole gathered syntax content out the first outlet (this is equivalent to sending a <m>dump</m> message) <br />
				• <m>Cmd+P</m> (mac) or <m>Ctrl+P</m> (win): Show/hide playhead cursor (while not playing: indeed, during playback the cursor is always visible) <br />
				• <m>Cmd+J</m> (mac) or <m>Ctrl+J</m> (win): Solo/unsolo items <br />
				• <m>Cmd+U</m> (mac) or <m>Ctrl+U</m> (win): Mute/unmute items <br />
				• <m>Return</m>: set the playhead cursor and the scrollbar both at the beginning of the <o>bach.score</o>, or at the beginning of the loop region (in case it is displayed). <br />
				• <m>Cmd+L</m> (mac) or <m>Ctrl+L</m> (win) when nothing is selected: Show/hide loop region <br />
				• <m>Cmd+Shift+L</m> (mac) or <m>Ctrl+Shift+L</m> (win) when nothing is selected: Activate/deactivate loop region <br />
				<br />
				Inspector, selection and navigation: <br />
				• <m>Cmd+I</m> (mac) or <m>Ctrl+I</m> (win): Open inspector for selected item (if a single item is selected), or for slotinfo (if a slot window is open). <br />
				• <m>→</m>, <m>←</m>, <m>↑</m>, <m>↓</m>, <m>Enter</m>, <m>Esc</m>: Navigate inside the score while inspecting elements (i.e. while the bach inspector has the focus).
				See the indication at the bottom of each inspector screen in order to know how to use such keyboard commands. In general <m>←</m> and <m>→</m> move
				respectively to previous and next element, <m>↑</m> and <m>↓</m> to the elements above or below, <m>Enter</m> moves to the first "son" of the
				element and <m>Esc</m> to the element's "father" (in the score hierarchy).
				• <m>Cmd+→</m>, <m>Cmd+←</m>, <m>Cmd+↑</m>, <m>Cmd+↓</m> (mac) or
				<m>Ctrl+→</m>, <m>Ctrl+←</m>, <m>Ctrl+↑</m>, <m>Ctrl+↓</m> (win): Navigate inside the score, respectively selecting the element at right,
				left, above or below with respect to the currently selected item.<br />
				If no item is selected, the first two commands will move the horizontal scrollbar, if any (left or right).<br />
				• <m>Cmd+A</m> (mac) or <m>Ctrl+A</m> (win): Select all items <br />
				<br />
				Copy/paste actions (these work also from a <o>bach.score</o> to another one): <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy selected measures, or slot content if a slot window is open. <br />
				• <m>Cmd+Shift+C</m> (mac) or <m>Ctrl+Shift+C</m> (win): If a slot window is open, copy the content of
				all the slots of the note whose slot window is open; otherwise simply copy selected measures. <br />
				• <m>Cmd+X</m> (mac) or <m>Ctrl+X</m> (win): Cut selected measures, or slot content if a slot window is open. <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): If the content in the clipboard are measures, paste measures over the currectly selected ones.
				If the content is a slot content, assign such slot content to all selected notes. <br />
				<br />
				For pitch breakpoints: <br />
				• <m>Esc</m>: Revert slope to 1 for selected breakpoints (the slope refers to the duration line segment preceding the breakpoints). <br />
				<br />
				Linear editing (these commands are valid when only in linear editing mode): <br />
				• <m>↑</m>, <m>↓</m>: Move position of the pitch cursor of one step up or down (respectively) <br />
				   ↪ Add the <m>Shift</m> key to move the pitch cursor by one octave. <br />
				• <m>1</m>, <m>2</m>, <m>3</m>, <m>4</m>, <m>5</m>, <m>6</m>, <m>7</m>, <m>8</m>:
				Insert chord at cursor position with a given duration (if the cursor is not on any chord), or modify duration of chord at cursor.
				Durations are mapped on numbers in the following way: <m>5</m> is a 1/4 chord. Higher values are diadic larger multiples:
				<m>6</m> is a 1/2 chord, <m>7</m> is a 1/1 chord, <m>8</m> is a 2/1 chord. Smaller values are diadic subdivisions: <m>4</m> is a 1/8 chord,
				<m>3</m> is a 1/16 chord, <m>2</m> is a 1/32 chord, <m>1</m> is a 1/64 chord. <br />
				   ↪ Add the <m>Ctrl</m> key (mac) or <m>Shift+Ctrl</m> key (win) to add the chord before the cursor, if the cursor is on a given chord. <br />
				• <m>A</m>, <m>B</m>, <m>C</m>, <m>D</m>, <m>E</m>, <m>F</m>, <m>G</m>:
				Insert note at cursor position with a given pitch (if the cursor is not on any chord), or modify pitch of note at cursor.
				Pitches are trivially mapped as in the anglo-saxon syntax. If a new chord is inserted, this will have the duration of the last
				inserted one (by default 1/8). <br />
				• <m>N</m>: Add a new note at cursor position <br />
				• <m>X</m>: Turn the chord at cursor position into a grace chord and vice versa (or to the previous chord, if cursor position does not lie on any chord) <br />
				• <m>.</m>: Add a dot to the chord at cursor position (or to the previous one, if cursor position does not lie on any chord) <br />
				• <m>T</m>: Add/remove tie to the note at cursor position (cursor must be aligned also vertically with the note, if no chord lies on the
				cursor position horizontally, the previous chord is considered) <br />
				• <m>Backspace</m>: Delete chord at cursor position<br />
				• <m>Shift+Backspace</m>: Delete note at cursor position (cursor must be aligned also vertically with the note to delete)<br />
				• <m>Alt+3</m>, <m>Alt+5</m>, <m>Alt+6</m>, <m>Alt+7</m>, <m>Alt+9</m>: Start inserting a tuplet (respectively: a triplet, a 5-plets,
				a 6-plet, a 7-plet and a 9-plet). Then ordinary numeric keys are expected to assign the elements of the tuplet. For instance,
				Alt+3 and then 4, 4, 4, will insert a 8th notes triplet. <br />
				• <m>Cmd+→</m>, <m>Cmd+←</m>, <m>Cmd+↑</m>, <m>Cmd+↓</m> (mac) or
				<m>Ctrl+→</m>, <m>Ctrl+←</m>, <m>Ctrl+↑</m>, <m>Ctrl+↓</m> (win): Navigate inside the measures <br />
				• <m>Esc</m>: Exit linear editing mode <br />
				<br />
				Rhythm, beams and rhythmic tree levels: <br />
				• <m>Tab</m>: Rebeam selection automatically <br />
				   ↪ By default, the rebeaming keeps untouched the information about existing tuplet levels; add the <m>Shift</m> key to reparse all tuplets <br />
				• <m>Cmd+Shift+T</m> (mac) or <m>Ctrl+Shift+T</m> (win): Lock/unlock measure rhythmic tree <br />
				• <m>Cmd+Shift+D</m> (mac) or <m>Ctrl+Shift+D</m> (win): Destroy all rhythmic tree levels for selection <br />
				• <m>Cmd+Shift+H</m> (mac) or <m>Ctrl+Shift+H</m> (win): Destroy outermost selection tree level (just one) <br />
				• <m>Cmd+Shift+G</m> (mac) or <m>Ctrl+Shift+G</m> (win): Add a rhythmic tree level around the selected content <br />
				• <m>Cmd+Shift+F</m> (mac) or <m>Ctrl+Shift+F</m> (win): Fix levels of selection as "original" levels <br />
				<br />
				Lyrics: <br />
				• <m>Cmd+Shift+L</m> (mac) or <m>Ctrl+Shift+L</m> (win): Start editing lyrics for the leftmost selected chord <br />
				• <m>Tab</m> while editing lyrics for a chord: Move to next chord's lyrics <br />
				• <m>Shift+Tab</m> while editing lyrics for a chord: Move to previous chord's lyrics <br />
				• <m>-</m>: End a syllable with "-" in order to create a dashed line reaching the next piece of lyrics <br />
				• <m>Esc</m>: End editing lyrics <br />
				<br />
				Articulations: <br />
				• <m>Backspace</m>: Delete selected articulations <br />
				• <m>Alt+Backspace</m>: Delete articulations of all selected notes <br />
				• <m>Alt+S</m>: Add "staccato" articulation to selection <br />
				• <m>Alt+Shift+S</m>: Add "staccatissimo" articulation to selection <br />
				• <m>Alt+F</m>: Add "fermata" articulation to selection <br />
				• <m>Alt+P</m>: Add "portato" articulation to selection <br />
				• <m>Alt+A</m>: Add "accent" articulation to selection <br />
				• <m>Alt+Z</m>: Add "accent+staccato" articulation to selection <br />
				• <m>Alt+Shift+Z</m>: Add "accent+portato" articulation to selection <br />
				• <m>Alt+W</m>: Add "portato+staccato" articulation to selection <br />
				• <m>Alt+J</m>: Add "martellato" articulation to selection <br />
				• <m>Alt+Shift+J</m>: Add "martellato+staccato" articulation to selection <br />
				• <m>Alt++</m>: Add "left hand pizziacto" articulation to selection <br />
				• <m>Alt+T</m>: Add "trill" articulation to selection <br />
				• <m>Alt+G</m>: Add "gruppetto" articulation to selection <br />
				• <m>Alt+M</m>: Add "upward mordent" articulation to selection <br />
				• <m>Alt+Shift+M</m>: Add "downward mordent" articulation to selection <br />
				• <m>Alt+N</m>: Add "double mordent" articulation to selection <br />
				• <m>Alt+B</m>: Add "upward bowing" articulation to selection <br />
				• <m>Alt+Shift+N</m>: Add "downward bowing" articulation to selection <br />
				• <m>Alt+R</m>: Add "3-slash-tremolo" articulation to selection<br />
				• <m>Alt+Shift+R</m>: Add "2-slash-tremolo" articulation to selection<br />
				• <m>Alt+Ctrl+Shift+R</m>: Add "1-slash-tremolo" articulation to selection<br />
				N.B.: the default font support all glyphs, however not all the other supported fonts do.
				Especially, Boulez doesn't have a certain number of the
				previous articulations among its glyphs. If you don't see an articulation as you wish (e.g. tremoli with Boulez),
				it might be because the font doesn't have the proper character, so try to use another font, if you can. <br />
				<br />
				For slots: <br />
				• <m>1</m>, <m>2</m>, <m>3</m>, <m>4</m>, <m>5</m>, <m>6</m>, <m>7</m>, <m>8</m>, <m>9</m>, <m>0</m>: Open
				corresponding slot window (1 meaning: first slot, 2 meaning: second slot, and so on, with 0 meaning: tenth slot) <br />
				• Press a slot hot key to open the corresponding slot window. All slots can be assigned a given slot key via
				the <m>key</m> specification in the slotinfo (see <m>llll</m> message to know more). <br />
				• <m>Shift+Tab</m>: Open next slot window (if a slot window is open). <br />
				• <m>Shift+Alt+Tab</m>: Open previous slot window (if a slot window is open). <br />
				• <m>Enter</m>: For "text" and "llll" slots: enter the introduced text or llll. <br />
				• <m>Backspace</m>: For "function" slots: deletes the selected slot points. <br />
				<br />
				Slot copy/paste: <br />
				• <m>Cmd+C</m> (mac) or <m>Ctrl+C</m> (win): Copy the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are copied; otherwise all the content of the active slot is copied. <br />
				• <m>Cmd+X</m> (mac) or <m>Ctrl+X</m> (win): Cut the slot content. <br />
				   ↪ If some points in a slot of type function are selected, only those points are cut; otherwise all the content of the active slot is cut. <br />
				• <m>Cmd+Shift+C</m> (mac) or <m>Ctrl+Shift+C</m> (win): Copy the content of all slots (not only the possibly open one). <br />
				• <m>Cmd+V</m> (mac) or <m>Ctrl+V</m> (win): Paste the copied content to every selected note. <br />
				   ↪ If the copied content are some selected points of a slot of type function, only those points are pasted at the current mouse position in the open slot. <br />
				     ↪ Add the <m>Ctrl</m> key (mac) or <m>Shift</m> key (win) to avoid deletion of existing intermediate points. <br />
				<br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				Basic commands: <br />
				• <m>Cmd+Click</m> (mac) or <m>Ctrl+click</m> (win) on a rest: Turn rest into note <br />
				• <m>Cmd+Click</m> (mac) or <m>Ctrl+click</m> (win) on a note: Delete note (if no notes are left in the chord, the chord is turned into a rest) <br />
				• <m>Cmd+Click</m> (mac) or <m>Ctrl+click</m> (win) on a measure or an empty staff: Add a measure <br />
				   ↪ By default the measure is added after the clicked one. Add the <m>Shift</m> key to add the new measure befor the clicked one <br />
				• <m>Alt+click+drag</m> on a notehead: Duplicate the note (into the same chord) <br />
				• <m>click+drag</m> on a notehead or a duration line: Change the note pitch (dragging up/down) <br />
				   ↪ Add the <m>Shift+Ctrl</m> while dragging up/down to prevent notes from changing voices <br />
				• <m>click+drag</m> on a note tail: Change the pitch of the note tail (dragging up/down provided that the <m>allowglissandi</m> attribute is set to 1).
				Possible pitch breakpoint positions are rescaled <br />
				   ↪ Add the <m>Alt</m> key to keep the existing absolute pitch breakpoint positions <br />
				• <m>doubleclick</m> on voice names, marker names or lyrics: Edit names directly <br />
				• <m>doubleclick</m> on selected items: Selection off-line play (as the <m>V</m> key), but only if <m>dblclicksendsvalues</m> is set to 1 <br />
				• <m>Shift+click+drag</m> on a clef (at the beginning of the staff): Move voice vertically (along with all the next ones), i.e.: modify vertical space before clicked voice <br />
				• <m>Shift+Alt+click+drag</m> on a clef (at the beginning of the staff): Move all following voices vertically (but not the clicked one), i.e.: modify vertical space after clicked voice <br />
				• <m>right click</m> or <m>two-fingers-tap</m>: Open contextual popup menu. This can be opened by clicking on noteheads (note or selection popup menu), clefs
				(voice popup menu), measure (measure popup menu), measure barlines (barline popup menu) or on the background (backgroun popup menu). <br />
				<br />
				Selection, zooming, scrollbar and dilation rectangle: <br />
				• <m>click</m> on any item: Select item <br />
				   ↪ Add the <m>Shift</m> key to keep the selection to add/remove other elements to/from it. <br />
				• <m>click</m> outside any item and <m>drag</m>: Select chord and notes inside the rectangle region (selection rectangle). <br />
				   ↪ Add the <m>Shift</m> key to keep the selection to add/remove other elements to/from it. <br />
				   ↪ To select a marker with a selection rectangle, reach the uppermost point of the notation object corresponding to the marker line. <br />
				   ↪ If, after having clicked but before having released the mouse, you press the <m>Cmd</m> key (mac) or <m>Ctrl</m> key (win),
				a dilation rectangle appears: <br />
				       - <m>click+drag</m> on any on the corners to expand the pitches. <br />
				       - <m>click+drag</m> inside the dilation rectangle to globally shift the selected items's pitches. <br />
				• <m>Cmd+mousewheel</m> or <m>Cmd+two-fingers-scroll</m> (mac) or <m>Ctrl+mousewheel</m> or <m>Ctrl+two-fingers-scroll</m> (win): Change the <m>zoom</m> attribute (horizontal zoom). Zoom is increased
				when rolling the wheel up, decreased when rolling the wheel down. You can substitute the trackpad's <m>two-fingers-scroll</m> to the <m>mousewheel</m>.<br />
				• <m>Alt+Cmd+click+drag</m> (mac) or <m>Alt+Ctrl+click+drag</m> (win): Zoom into selected region. As you drag, a reddish zooming rectangle is
				drawn, corresponding (on the temporal axis) to the region into which the notation object will exactly zoom. <br />
				   ↪ Add the <m>Shift</m> key to zoom out instead. <br />
				• <m>click+drag</m> on a scrollbar: Change scrollbar position <br />
				• <m>mousewheel</m> (or trackpad's <m>two-fingers-scroll</m>): Change scrollbar positions <br />
				• <m>Ctrl+Alt+click+drag</m> (mac) or <m>Shift+Ctrl+Alt+click+drag</m> (win) anywhere: Change scrollbar positions,
				via a dragging hand (faster than directly clicking and dragging the scrollbar itself) <br />
				   ↪ Add the <m>Shift+Cmd</m> key (mac) or the <m>Shift</m> key (win) to change the scrollbar positions more finely <br />
				<br />
				Tempi: <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on the tempo value: Change tempo value (increase by dragging up, by while dragging down) <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) inside a staff avoiding all noteheads: Pop up tempo at clicked position <br />
				<br />
				Measure widths and spacing: <br />
				• <m>Shift+click+drag</m> on a barline: Change barline position (i.e. previous measure width).
				If the barline is locked, the measure width is changed; if the barline is unlocked, the measure width factor is changed
				(locally changing the spacing width).
				<br />
				Sequencing and loop region: <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win): Redefine loop region (if the click is performed
				on the background, outside any notation item) by default snapping extremes to existing chord onsets or measure barlines <br />
				   ↪ Add the <m>Shift</m> key to deactivate the automatic snapping to chord onsets or measure barlines<br />
				• <m>click+drag</m> on a loop region boundary: Change loop region boundary, by default snapping it to existing chord onsets or measure barlines <br />
				   ↪ Add the <m>Shift</m> key to deactivate the automatic snapping to chord onsets or measure barlines<br />
				• <m>click+drag</m> on a loop region bottom bar: Globally shift loop region, by default snapping extremes to existing chord onsets or measure barlines <br />
				   ↪ Add the <m>Shift</m> key to deactivate the automatic snapping to chord onsets or measure barlines<br />
				• <m>Alt+click</m> when the playhead cursor is visible: Set a new playhead cursor position (but only if the <m>playheaddragmode</m>
				is set to Absolute, otherwise you have to use <m>Alt+click+drag</m> to change the cursor position) <br />
				• <m>Alt+click+drag</m> when the playhead cursor is visible: Change cursor position (also depending on the <m>playheaddragmode</m>) <br />
				<br />
				For pitch breakpoints (if the <m>allowglissandi</m> attribute is set to 1): <br />
				• <m>Alt+click</m> on a duration line: Add a pitch breakpoint. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a pitch breakpoint: Delete pitch breakpoint. <br />
				• <m>click+drag</m> on a pitch breakpoint: Change pitch (if dragging up/down) or temporal position (if dragging left/right). <br />
				   ↪ Add the <m>Shift</m> key to change either the pitch or the temporal position. <br />
				   ↪ Add the <m>Shift+Cmd</m> keys (mac) or <m>Shift+Ctrl</m> keys (win) to fine edit either the pitch or the temporal position (depending on the dragging direction). <br />
				• <m>Ctrl+click</m> (mac) or <m>Shift+Ctrl+click</m> (win) on a pitch breakpoint and <m>drag</m> up and down: Change breakpoint velocity (if the <m>breakpointshavevelocity</m> attribute is set to 1). <br />
				• <m>Shift+Ctrl+click</m> (mac) on a pitch breakpoint and <m>drag</m> up and down: Change slope of duration line segment preceding breakpoint <br />
				<br />
				For markers: <br />
				• <m>Shift+Alt+click</m> outside staves: Add a new measure-attached marker <br />
				• <m>Shift+Ctrl+Alt+click</m> outside staves: Add a new millisecond position-attached marker <br />
				• <m>Ctrl+click</m> (mac) or <m>Shift+Ctrl+click</m> (win) on a marker, outside staves: Switch assignment type (from measure-attached to millisecond
				position-attached, and vice versa). In case the marker is turned into a measure-attached marker, the voice to which the marker will be attached
				is the one nearest to the click point. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a marker: Delete marker <br />
				• <m>click+drag</m> on a marker: Change the marker onset <br />
				   ↪ Measure-attached markers are by default snapped to existing chord onsets or measure barlines; add the <m>Shift</m> key to remove the snapping<br />
				   ↪ Add the <m>Shift</m> key milliseconds-attached markers snap to chord onsets <br />
				   ↪ For millisecond position-attached markers, add the <m>Shift+Cmd</m> keys (mac) or <m>Shift+Ctrl</m> keys (win) to fine editing their onset <br />
				• <m>Alt+click+drag</m>: Duplicate the marker into a new one with an unique name <br />
				• <m>doubleclick</m> on a marker name: Edit marker name <br />
				<br />
				Linear editing: <br />
				• <m>Ctrl+click</m> (mac) or <m>Shift+Ctrl+click</m> (win) on a measure avoiding all noteheads: Enter linear editing mode <br />
				• <m>click</m> outside the staves while in linear editing mode: Exit linear editing mode <br />
				<br />
				For slots: <br />
				Common commands for all slots: <br />
				• <m>doubleclick</m> on the slot window header (e.g. on the slot name): Edit the slot content in external editor. <br />
				• <m>Cmd+doubleclick</m> on the slot window header (e.g. on the slot name): Erase all the slot content. <br />
				<br />
				For slots of type "function" and "3dfunction": <br />
				• <m>click</m> inside the active part of the slot window: Add a point. <br />
				• <m>Shift+click+drag</m>: Draw a rectangle to add/remove points to the current selection. <br />
				• <m>click</m> on the slot window header (upper strip): Clear current selection. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a point: Delete clicked point (or all selected points, if point was selected). <br />
				• <m>click+drag</m> on a point: Change the position of the point (or all selected points, if point was selected). <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Alt</m> keys and drag vertically to snap the Y coordinate of the point to one of the previously defined <m>ysnap</m> values (in the <m>slotinfo</m>). <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours points while dragging. <br />
				• <m>click+drag</m> on a segment: Change the vertical position of the segment ("function" slot only). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a segment ("function" slot only) or
				on the ending point of a segment (also "3dfunction" slot): Change the slope of the segment. <br />
				• <m>doubleclick</m> on a point: snap it to the average position between the previous and the next point. <br />
				   ↪ Add the <m>Shift</m> key to snap the point to the Y value of the previous one. <br />
				   ↪ Add the <m>Alt</m> key to snap the point to the Y value of the next one. <br />
				• <m>Ctrl+Alt+click+drag</m> (mac) or <m>Shift+Ctrl+Alt+click+drag</m> (win) on a point: drag up/down to change its Z coordinate ("3dfunction" slot only). <br />
				   ↪ Add the <m>Shift</m> key to snap the Z coordinate of the point to one of the previously defined <m>zsnap</m> values ("3dfunction" only). <br />
				<br />
				For slots of type "int", "float", "intlist" and "floatlist": <br />
				• <m>click</m> on a strip: Add or modify existing number. <br />
				• <m>click+drag</m> on the handle: modify existing number. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a strip: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				• <m>Cmd+click</m> on a strip: Delete the number <br />
				• <m>click</m> on the "add number..." label: Append a number to the list (slot "intlist" and "floatlist" only). <br />
				<br />
				For slots of type "text" and "llll": <br />
				• <m>doubleclick</m> on the slot window: Edit text or llll directly. <br />
				<br />
				For slots of type "filelist": <br />
				• <m>click</m> on the "add file..." label: Append a file to the list (choosen via a dialog box). <br />
				• <m>Shift+click</m> on a file name: Replace the file witha  new one (choosen via a dialog box). <br />
				• <m>click</m> on a file name: Make it active. <br />
				• <m>Cmd+click</m> on a file name: Delete the file. <br />
				<br />
				For slots of type "color": <br />
				• <m>doubleclick</m>: Start defining a color (if slot is empty). <br />
				• <m>click</m> or <m>click+drag</m>: Change the color or the hue (if clicking on the side bar). <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on the main rectangle: Change alpha value (transparency) by dragging up or down. <br />
				<br />
				For slots of type "spat": <br />
				• <m>click</m>: Add a spat point. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on a spat point: Delete clicked spat point. <br />
				• <m>click+drag</m> on a point: Change the position of the point. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Ctrl</m> keys (mac) to move the spat point together with all the following ones. <br />
				   ↪ Add the <m>Alt</m> key to delete all neighbours spat points while dragging. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a spat point: Drag up or down to change the angle. <br />
				• <m>Alt+click</m> on a spat point: Switch interpolation type (from linear to circular or vice versa). <br />
				<br />
				For slots of type "togglematrix": <br />
				• <m>click</m> on a cell: Toggle the cell value <br />
				<br />
				For slots of type "intmatrix", "floatmatrix": <br />
				• <m>click</m> or <m>click+drag</m> on a cell: Change the cell value <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a cell: Revert the number to the <m>default</m> field defined in the <m>slotinfo</m>. <br />
				<br />
				For slots of type "filter": <br />
				• <m>rightclick</m> or <m>twofingerstap</m>: Choose or change the filter type. <br />
				• <m>click+drag</m> left or right: Change cutoff frequency. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) or <m>Shift+Ctrl</m> (win) keys to enter the fine editing mode. <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) up or down: Change Q (or slope). <br />
				• <m>Shift+click+drag</m> up or down: Change gain. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win): Revert gain to 0dB. <br />
				<br />
				For slots of type "dynfilter": <br />
				• <m>doubleclick</m>: Add a filter at the click position <br />
				• <m>rightclick</m> or <m>twofingerstap</m> on a filter column: Choose or change the filter type. <br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> on a filter column: Delete filter. <br />
				• <m>click+drag</m> on a filter column: Change filter cutoff frequency by dragging up or down. <br />
				• <m>click+drag</m> on a red square: Change filter cutoff frequency by dragging up or down, change temporal position by dragging left or right. <br />
				   ↪ Add the <m>Shift</m> key to change either the horizontal or the vertical coordinate. <br />
				   ↪ Add the <m>Shift+Cmd</m> (mac) keys to enter the fine editing mode (only for cutoff frequency change). <br />
				• <m>Ctrl+click+drag</m> (mac) or <m>Shift+Ctrl+click+drag</m> (win) on a filter column: Change Q (or slope) by dragging up or down. <br />
				• <m>Shift+Ctrl+click+drag</m> (mac) on a filter column: Change gain by dragging up or down. <br />
				• <m>Cmd+Alt+click</m> (mac) or <m>Ctrl+Alt+click</m> (win) on a filter column: Revert gain to 0dB. <br />
				<br />
			</description>
		</method>
		<method name="addbreakpoint">
			<arg name="relative_x_position" optional="0" type="float" />
			<arg name="delta_midicents" optional="0" type="float" />
			<arg name="slope" optional="1" type="float" />
			<arg name="velocity" optional="1" type="int" />
			<digest>
				Add a pitch breakpoint to each selected note
			</digest>
			<description>
				Adds a pitch breakpoint to each one of the selected notes.
				The breakpoint is given by three arguments: <br />
				- a float number between 0 and 1, setting the relative position of the pitch breakpoint
				with respect to the note duration line (0 being the note head, 1 being the note tail).
				0 and 1 should be avoided (since a notehead and notetail already exists for any note), so the
				values should be striclty greater than 0 and strictly less than 1. <br />
				- a number setting the pitch difference (in midicents) of the breakpoint with respect to the main
				note's pitch.
				- an optional slope parameter, between -1 and 1, setting the slope of the segment of duration line preceding the breakpoint
				(0 being linear, default).
				- an optional velocity parameter, between 1 and 127, but only if the <m>breakpointshavevelocity</m> attribute is active.
			</description>
		</method>
		<method name="addmarker">
			<arg name="position_ms" optional="0" type="float" />
			<arg name="name_or_names" optional="0" type="llll" />
			<digest>
				Add a marker
			</digest>
			<description>
				The <m>addmarker</m> adds a marker with a specified name at a specified position in the score.
				At least two arguments are needed: the position of the marker and the marker name, as symbol.
				The position of the marker is the first argument, and can be either a single floating point number, in which case it is taken as
				the marker onset, in milliseconds, and the marker is assigned as attached to absolute millisecond position, or a timepoint llll,
				in which case the marker is assigned as measure-attached to the point defined by the timepoint. <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For instance, <b>addmarker 1000 foo</b> adds a marker at 1000ms with the name "foo", while <b>addmarker (1 1/4 3) faa</b> adds a marker
				named "faa" at attached to the position: measure 1, onset 1/4, voice 3.
				If several names need to be associated to the marker, the symbol can be replaced by a list of symbols,
				for instance <b>addmarker 1000 (foo fee)</b>. If no names need to be associated to the marker, leave <b>()</b> as
				name llll.
			</description>
		</method>
		<method name="addmeasures">
			<arg name="arguments" optional="0" type="llll" />
			<arg name="measures" optional="1" type="llll" />
			<digest>
				Append several measures
			</digest>
			<description>
				An <m>addmeasures</m> message will add several measures to the existing ones.
				If the message has no arguments, the separate parameters are supposed to have been inserted through the separate parameter inlets,
				and the <m>addmeasures</m> message will essentially act like a <m>bang</m> which in turns will preserve the existing content,
				and append the newly introduced measures. Refer to the <m>llll</m> message to know more about separate parameter syntax of the inlets.<br />
				If the message as arguments, these are supposed to be in llll form, exactly in in the same syntax as the whole <o>bach.score</o>
				gathered syntax (without header specification): one llll for each voice,
				containing one llll for each measure to add (in measure gathered syntax). If for a given voice
				you don't need to add any chord, just set a <b>()</b> llll.
				More precisely the expected syntax for the argument is <b>(<m>VOICE1</m> <m>VOICE2</m>...)</b>
				where each voice is an llll in gathered syntax. <br /> <br />
				For instance, a valid message would be <b>addmeasures addmeasures ((((3 4)()) (1/4 (7185. 100 0)) (1/4 (6450. 100 0)) (1/4 (7185 100 0)))
				(((4 4) ()) (-1/4) (1/12 (5850. 100 0 1)) (1/6 (6300. 100 0 0) 2) (1/6 (6600. 100 0)) (1/12 (6600. 100 1)) (1/4 (6600. 100 0))))</b>
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any measure is, in its simplest form <b>(<m>MEASUREINFO</m> <m>CHORD1</m> <m>CHORD2</m>... <m>measure_flag</m>)</b>
				where <m>MEASUREINFO</m> is the information concerning time signatures and tempi, as well as possibly other information regarding barlines, widths and more (see below),
				each <m>CHORD</m> is an llll representing a chord and must be in the chord gathered syntax, and the <m>measure_flag</m> is an optional bitfield summing values of
				1 (if measure is locked), 2 (if measure is muted), 4 (if measure is solo), 8 (if measure rhythmic tree is locked). <br />
				In the most general form, chord information is not represented linearly as a sequence of <m>CHORD</m> lllls, rather as a rhythmic tree, so
				chord lllls are in general wrapped into further levels of parentheses. This is not necessary as input, although you can define such levels
				also as input, in order to suggest to <o>bach.score</o> the rhythmic tree you want to have,
				for instance: <b>(<m>MEASUREINFO</m> ((<m>CHORD1</m> <m>CHORD2</m>) <m>CHORD3</m>)... <m>measure_flag</m>)</b>.
				These additional levels act as suggestions on the bach algorithms, which might create further levels (e.g. by refining levels) or modify the existing ones
				according to the <m>treehandling</m> and <m>maketreecompatiblewithts</m> attributes.
				Each level llll by default has as first element, while output, an llll in the form <b>(leveltype <m>type</m>)</b>, where <m>type</m> is a number
				which accounts for the "lifecycle" of the level (was it created by the user? was it refined by bach itself?...) and which should be
				opaque to the user: such level type should never be set by hand, only kept to guarantee a good storage or rebuilding of <o>bach.score</o>.
				The interpretation of rhythmic tree levels as input will depend on all the rhythmic tree attributes, the most important of which are
				<m>treehandling</m> and <m>maketreecompatiblewithts</m>. At output, the gathered syntax might or might not contain the rhythmic tree
				levels of parentheses, depending on the <m>outputtrees</m> attribute. Also it might or might not contain level type specifications,
				depending on the <m>saveleveltypes</m> attribute. <br />
				Grace chords are characterized by being elements inside grace levels. Grace levels are identified by a "g" symbol at the very beginning
				of the level. A grace level may contain sub-levels as any other ordinary level. Indeed, grace chords may have any symbolic duration,
				they may also be rests, or organized in tuplets. The general form of the grace level is thus <b>(g <m>CHORD_OR_CHORDS</m>)</b>,
				where <m>CHORD_OR_CHORDS</m> may be a complex llll containing the gathered syntax of chords. For instance: <b>(g (1/8 (6000 127 1)) ((-1/12) (1/24 (6000 127 1))))</b>.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any chord, in its simplest form <b>(<m>sym_duration</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>)</b>
				where <m>sym_duration</m> is the symbolic rational duration of the chord, as a fraction of the whole note (e.g. <b>1/4</b>), each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have specifications defining its name(s) or its articulation(s).
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the last note llll,
				and before the <m>chord_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a chord definition might
				have the form <b>(1/4 (7000. 127 1) (7200. 100 0) (name john) (articulations acc stacc) 0)</b>
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</method>
		<method name="addslot">
			<arg name="slots" optional="0" type="llll" />
			<digest>
				Modify all the content of one or more slots for selected notes
			</digest>
			<description>
				An <m>addslot</m> message will modify all the content of one or more slots, for all the selected notes.
				The syntax is <b>addslot (<m>slot_number</m> <m>SLOT_CONTENT</m>) (<m>slot_number</m> <m>SLOT_CONTENT</m>)...</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
		<method name="autobeam">
			<arglist />
			<digest>
				Rebeam automatically the rhythm of the selected portion of score
			</digest>
			<description>
				The <m>autobeam</m> message applies an automatic beaming to the selected portion
				of score. (Differently from <m>autorhythm</m> message, this message will not overwrite the current value of the attribute <m>autoparserhythm</m>.)
			</description>
		</method>
		<method name="autorhythm">
			<arg name="reparse_tuplets" optional="1" type="int" />
			<digest>
				Reparse automatically the rhythm of the selected portion of score
			</digest>
			<description>
				The <m>autorhythm</m> message retranscribes and rebeams the rhythm of the selected portion
				of score. By default the reparsing and rebeaming will keep untouched the tuplet rhythmic levels. If you
				want also an automatic complete reparsing of the tuplets, add a non-zero integer argument, for instance
				<b>autorhythm 1</b>. (This message will overwrite the current value of the attribute <m>autoparserhythm</m>
				by forcing the parsing to be always performed, even if this attribute is unset.)
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Build content from separate parameters
			</digest>
			<description>
				A <m>bang</m> in any of the inlets will first rebuild new <o>bach.score</o> content starting from
				the parameters given as input in the separate inlets (see <m>llll</m> method).
				If the <m>autoclear</m> attribute is set to 1,
				first of all the <m>bang</m> will clear the content of the <o>bach.score</o>; if on the other hand
				the <m>autoclear</m> attribute is set to 0, the new parameter will modify the existing content.
				Not all the separate parameters need to be given to build the new content: if some are not given, default values
				will be used instead. Default measureinfo is a 4/4 time signature, with quarter = 60 tempo.
				Default durations are given by the equal division of the measure duration by the number of chords (i.e. if eight chords are needed in a 4/4 measure,
				default duration will be 1/8 each). Default pitch in cents is 6000 (middle C).
				Default velocity is 100, but the last one is padded if more chords than the input velocities are
				to be created. Default extras are no extras.
			</description>
		</method>
		<method name="ceilmeasures">
			<arglist />
			<digest>
				Pad measures
			</digest>
			<description>
				The message <m>ceilmeasures</m> forces all voices have the same number of measures,
				by possibly appending blank measures at the end of some voice.
				If the voice have the same tempi and time signatures, this message force all voices to end together
				(otherwise this is not necessarily the case).
			</description>
		</method>
		<method name="cents">
			<arg name="measureinfo" optional="0" type="llll" />
			<digest>
				Modify the measureinfo of selected measure
			</digest>
			<description>
				Modifies the measureinfo of select measures. The expected syntax is the standard measureinfo syntax,
				without the outermost level of parentheses (e.g. <b>measureinfo (4 4) (3/8 120)</b> is a valid message). <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="cents">
			<arg name="velocity" optional="0" type="number/llll/anything" />
			<digest>
				Modify the pitch of selected items
			</digest>
			<description>
				The word <m>cents</m>, followed by a number, sets the new pitch, in midicents, for all
				the selected notation items.
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded. <br /> <br />
				Pitches can equivalently be inserted as note names.
				The syntax for the single note must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:octave_number</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Names can be either in the latin ("Do", "Re", "Mi"...) or in the anglo-saxon ("C", "D", "E"...)
				styles, and are case insentitive. They and should be immediately followed by the possible accidentals and the
				octave number, without any space (e.g. <b>Re#4</b>). If no octave number is given, the last used is kept (default is 4).
				<br /> <br />
				Any of the numbers in the cents syntax can be replaced by an llll containing a relative modification of the existing pitch.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>(<m>value</m> <m>function</m>)</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>(100 minus)</b> removes 100 to the current
				value of the parameter, while <b>(2. times)</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m>, <m>tail</m> (position of the
				note end, in ms), <m>voice</m> (voice number). For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number)
				and <m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = (cents - 6000) / 100 + 2000 * (voice - 1)</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="changeslotvalue">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<arg name="element_index" optional="0" type="int" />
			<arg name="slot_element" optional="0" type="llll" />
			<digest>
				Change a specific value inside a slot for selected notes
			</digest>
			<description>
				A <m>changeslotvalue</m> message will change a specific value inside a slot (possibly containing more than one element, such as
				a <m>function</m> slot, or an <m>intlist</m> slot...) of any selected note.
				The syntax is <b>changeslotvalue <m>slot_number</m> <m>element_index</m> <m>SLOT_ELEMENT_CONTENT</m></b>. <br />
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
				The <m>element_index</m> is the number identifying the position of the element to be changed (e.g., for a <m>function</m> slot: 1 for the first point, 2 for the second, and so on).
				The element content is a single element in the lists of the slot content syntax: a single point for a slot <m>function</m>, a single number for an <m>intlist</m> or <m>floatlist</m> slot,
				and so on. Such element must be unwrapped from its outer level of parentheses (if any). For instance, for a function,
				a good syntax is <b>changeslotvalue 2 3 0.5 20 0</b> which will change the 3rd point of the function contained in the second slot
				to the point <b>(0.5 20 0)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
			</description>
		</method>
		<method name="clear">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the measures or a specific parameter inlet
			</digest>
			<description>
				A <m>clear</m> message sent in the first inlet will delete all the measures the <o>bach.score</o>, and all the markers.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
				A <m>clear</m> message sent in any of the separate parameters inlets (all inlets but the first one) will clear the content which was
				possibly stored in such inlet. This is equivalent to sending a <b>nil</b> or <b>()</b> message in that inlet.
			</description>
		</method>
		<method name="clearall">
			<arglist />
			<digest>
				Clear all separate parameters inlets
			</digest>
			<description>
				A <m>clearall</m> message will clear the content input in all the separate parameters inlets (all inlets but the first one).
				This is equivalent to sending a <b>nil</b> or <b>()</b> message in any of such inlets. <br />
			</description>
		</method>
		<method name="cleararticulations">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the articulations
			</digest>
			<description>
				A <m>cleararticulations</m> message sent in the first inlet will delete all the articulations inside the <o>bach.score</o>.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
			</description>
		</method>
		<method name="clearbreakpoints">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the pitch breakpoints
			</digest>
			<description>
				A <m>clearbreakpoints</m> message sent in the first inlet will delete all the pitch breakpoints inside the <o>bach.score</o>, and
				reset the note tails.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
			</description>
		</method>
		<method name="clearmarkers">
			<arglist />
			<digest>
				Delete all markers
			</digest>
			<description>
				The <m>clearmarkers</m> simply delets all the markers in the notation object.
			</description>
		</method>
		<method name="clearmarkers">
			<arglist />
			<digest>
				Delete all markers
			</digest>
			<description>
				The <m>clearmarkers</m> simply delets all the markers in the notation object.
			</description>
		</method>
		<method name="clearnames">
			<arg name="prevent_categories" optional="1" type="llll" />
			<digest>
				Clear all names in the score
			</digest>
			<description>
				Clears the names of all notation items in the score (this includes voice names and marker names).
				If you want to prevent names of some category from being cleared, you can add any of the following specifications
				after the <m>clearnames</m> symbol:
				<b>(voices 0)</b> prevents voice names from being cleared,
				<b>(measures 0)</b> prevents measure names from being cleared,
				<b>(chords 0)</b> prevents chord names from being cleared,
				<b>(notes 0)</b> prevents note names from being cleared,
				<b>(markers 0)</b> prevents marker names from being cleared.
			</description>
		</method>
		<method name="clearnotes">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the chords
			</digest>
			<description>
				A <m>clearnotes</m> message sent in the first inlet will delete all the chords the <o>bach.score</o>, but will keep the existing measures
				as they are (only they will be voided).
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
			</description>
		</method>
		<method name="clearselection">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear current selection
			</digest>
			<description>
				The word <m>clearselection</m> removes all items from the selection (without deleting them),
				yielding a situation where no notation item is selected. If an integer is given as argument,
				it specifies a voice number for which the selection should be cleared (and will be kept for all other voices)
			</description>
		</method>
		<method name="clearselectionarticulations">
			<arglist />
			<digest>
				Clear articulations for selected items
			</digest>
			<description>
				The message <m>clearselectionarticulations</m> deletes all the articulations of all selected notes.
			</description>
		</method>
		<method name="cleartempi">
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Clear all the tempi
			</digest>
			<description>
				A <m>cleartempi</m> message sent in the first inlet will delete all the tempi inside the <o>bach.score</o>.
				If an integer argument is given, the message will only clear the content of a specific voice (the one corresponding to the input integer number). <br />
			</description>
		</method>
		<method name="clock">
			<arglist />
			<digest>
				Select a clock source
			</digest>
			<description>
				The word <m>clock</m>, followed by the name of an existing <m>setclock</m> objects, sets the <o>bach.roll</o>
				object to be controlled by that <m>setclock</m> object rather than by Max's internal millisecond clock.
				The word <m>clock</m> by itself sets the <o>bach.roll</o> object back to using Max's regular millisecond clock.
			</description>
		</method>
		<method name="collapse">
			<arg name="voices" optional="0" type="llll" />
			<arg name="selective_options" optional="1" type="llll" />
			<digest>
				Collapse score to a single voice
			</digest>
			<description>
				Use the <m>collapse</m> message to reduce the score to a single voice, containing the .
				Polyphonies are collapsed to sequence of chords whose notes are properly tied (exactly as the original content).
				A simple <m>collapse</m> message will collapse the content of all voices. You can add up to two llll optional arguments,
				to obtain the general syntax:
				<b>collapse <m>VOICES</m> <m>SELECTIVE_OPTIONS</m></b>,
				<m>VOICES</m> is an llll of the kind <b>(<m>voice_number1</m> <m>voice_number2</m>...)</b>
				containing the number of the voices to be output; leave <b>nil</b> or <b>()</b> if you want to output all voices. <br />
				<m>SELECTIVE_OPTIONS</m>, if given, might contain a symbol or list of symbols
				which handle what part of the header should be dumped. By default all header is output. Options for these symbols are exactly
				the same as for the <m>dump</m> message (see its documentation to know more). For instance <b>collapse (4 5 8) (markers body)</b>
				will collapse voices 4, 5 and 8 into a single voice, preserving also markers. <br />
				By default the measureinfo (see <m>llll</m> message) of the first voice is kept. If a <m>VOICES</m> llll is specified, the measureinfo
				of the first entered voice number is kept as reference. If you want to change such reference, just change the order of the numbers inside
				<m>VOICES</m>. For instance <b>collapse (5 4 8) (markers body)</b> will act as before, but keeping measureinfo of voice 5.
			</description>
		</method>
		<method name="delete">
			<arglist />
			<digest>
				Delete current selected items
			</digest>
			<description>
				The word <m>delete</m> simply deletes all the currently selected items.
				If measures are selected, only their notes and chords are deleted, and measure are preserved.
				Use <m>deletemeasures</m> if you need to delete whole measures.
			</description>
		</method>
		<method name="delete">
			<arglist />
			<digest>
				Delete current selected measures
			</digest>
			<description>
				The <m>deletemeasures</m> message simply deletes all the selected measures.
				Differently from the <m>delete</m> command, all the measures will be deleted, not just their content.
			</description>
		</method>
		<method name="deletemarker">
			<arg name="marker_names" optional="0" type="list" />
			<digest>
				Delete a marker
			</digest>
			<description>
				The <m>deletemarker</m> message deletes a given marker, matching a given name or a llll of names.
				The name(s) can be introduced as a list, as argument. If more than one marker match such name(s), only the first
				one (in temporal order) is deleted.
			</description>
		</method>
		<method name="deletevoice">
			<arg name="voice_number" optional="0" type="int" />
			<digest>
				Delete a voice
			</digest>
			<description>
				A <m>deletevoice</m> message, followed by an integer number <m>N</m>, will delete the <m>N</m>-th voice from the score.
			</description>
		</method>
		<method name="domain">
			<arg name="duration_or_starting_point_ms" optional="0" type="float" />
			<arg name="ending_point_ms" optional="1" type="float" />
			<arg name="ending_pad_pixels" optional="1" type="float" />
			<digest>
				Change horizontal zoom to set the displayed domain
			</digest>
			<description>
				If the <m>domain</m> message is followed by a single number, this is considered as the size in milliseconds
				of the domain (i.e. the displayed portion of <o>bach.roll</o>), and such message will change the <m>zoom</m> so that the displayed
				portion of music has indeed that global duration. <br />
				If the <m>domain</m> message is followed by a two numbers, these are considered as the starting and ending domain points in milliseconds,
				and such message will change both the <m>zoom</m> and the scrollbar position so that the displayed
				portion of music starts from the input starting point and ends at the input ending point. <br />
				If a third argument is given, this is considered to be an ending pad in pixels (scaled with respect to the <m>vzoom</m>), so that the input ending point actually happens
				a certain number of pixels before (if pad is positive) or after (is pad is negative) the end of the displayed portion of music. <br />
				Beware: the <m>domain</m> message will not act on the actual measure spacing. It is a quick-and-dirty message which will act on the global horizontal zoom.
			</description>
		</method>
		<method name="droplastundo">
			<arglist />
			<digest>
				Prune last undo step
			</digest>
			<description>
				A <m>droplastundo</m> message will prune the last undo step, by merging
				its information into the previous one.
			</description>
		</method>
		<method name="dump">
			<arg name="selective_dump_options" optional="1" type="list" />
			<digest>
				Dump information
			</digest>
			<description>
				A <m>dump</m> message will simply output
				the content of all separate parameters from all separate outlets (in separate syntax, right-to-left), and
				all the content of <o>bach.score</o> in gathered syntax from the first outlet (header information included). See below to know more
				about gathered and separate syntaxes. <br />
				The <m>dump</m> message also accepts as argument one of the following symbols, which will only dump a portion of the global information: <br />
				- <b>measureinfo</b>: only dump the onsets (in separate syntax) from the second outlet. <br />
				- <b>cents</b>: only dump the cents (in separate syntax) from the third outlet. <br />
				- <b>durations</b>: only dump the durations (in separate syntax) from the fourth outlet. <br />
				- <b>velocities</b>: only dump the velocities (in separate syntax) from the fifth outlet. <br />
				- <b>ties</b>: only dump the velocities (in separate syntax) from the fifth outlet. <br />
				- <b>extras</b>: only dump the extras (in separate syntax) from the sixth outlet. <br />
				- <b>score</b>: only dump the whole <o>bach.score</o> gathered syntax from the first outlet (and nothing from the separate parameters outlets). <br />
				- <b>body</b>: only dump the whole <o>bach.score</o> gathered syntax from the first outlet, and drop all the header specifications: only dump the
				body (content) of the <o>bach.score</o>. <br />
				- <b>header</b>: only dump the whole <o>bach.score</o> from the first outlet, dropping all the content (body) specification, and only
				outputting all the header specification. <br />
				Moreover, if one needs to only dump specific header elements, the <m>dump</m> message may also accept a list of symbols referring to them.
				Namely, the possibilities are the following ones: "keys", "clefs", "voicenames", "midichannels", "markers", "slotinfo", "command".
				Also the "body" symbol can always be added, in order to also dump the music content.
				For instance, <b>dump keys slotinfo voicenames</b> will dump the key signatures, the slotinfo and the voicenames,
				while, <b>dump keys slotinfo voicenames body</b> will do the same but will also output the music content (body).
				The order of the dumped elements does not correspond in general to the order of the symbols in the list.
				<br /> <br />
				The gathered syntax of a whole <o>bach.score</o> is in the form <b>score <m>HEADER</m> <m>BODY</m></b>, where
				the first symbol is optional as input (but always given as output). <m>HEADER</m> is an llll containing all the
				<o>bach.score</o> meta-information (such as key signatures, clefs, markers...),
				while <m>BODY</m> has the form of a sequence of voices: <b>(<m>VOICE1</m> <m>VOICE2</m>...)</b>
				where each voice is an llll in gathered syntax (see below for more information about this). <br /> <br />
				The header contains meta-information about the score. Such information is given in the form <b>(<m>HEADER_LLLL1</m> <m>HEADER_LLLL2</m>...)</b>
				where each <m>HEADER_LLLL</m> is in the form <b>(<m>header_element_name</m> <m>CONTENT</m>)</b>. The complete list of header element names
				and the expected content is the following one: <br />
				– <b>clefs</b>: introduces the used clefs; one clef symbol for each voice is expected. The number of voices is automatically
				updated to the number of clef symbols inserted.
				Since clefs can be set both as header element and as attribute, also see the <m>clefs</m> attribute.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8", "F8", "G15", "F15",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8", "F8", "G15" and "F15" symbols correspond to the transposed clefs: above for "G" clefs,
				and below for "F" clefs. For instance, "G8" is the G clef, transposed one octave above, whereas "F15" is the F clef transposed two octaves below.
				<br /> <br />
				– <b>keys</b>: introduces the used key signatures; one key signature symbol for each voice is expected. If less are given, last one is padded.
				Since key signatures can be set both as header element and as attribute, also see the <m>keys</m> attribute.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
				– <b>voicenames</b>: introduces the voice names specification, one name (atom) for each voice is expected.
				If a voice have more than one name, an llll with the list of names must be introduced. To skip names for a voice use <b>nil</b> or <b>()</b>.
				Since voice names can be set both as header element and as attribute, also see the <m>voicenames</m> attribute.
				<br /> <br />
				– <b>midichannels</b>: introduces the MIDI channels specification, one integer for each voice is expected.
				Since MIDI channels can be set both as header element and as attribute, also see the <m>midichannels</m> attribute.
				<br /> <br />
				– <b>stafflines</b>: set the staff lines configurations. A list of elements (one for each voice) is expected. Since staff lines can be set both as header element and
				as attribute, also see the <m>stafflines</m> attribute. Each element can be in one of the following forms:
				either <b><m>number_of_stafflines</m></b>, setting the number of stafflines for the voice, which will be distributed evenly around
				the middle line of the default staff, or a wrapped llll in the form <b>(<m>index_staff_line1</m> <m>index_staff_line2</m>...)</b>
				where each index is the position of a line to be drawn. Line 1 correspond to the bottommost staffline of a standard staff;
				line 5 correspond to the topmost staffline of a standard staff. Integers need not be positive: indices like -2 or 7 will be
				extrapolated from the standard staff. The total number of lines is thus the length of such llll.
				<br /> <br />
				– <b>markers</b>: specifies the markers. A list of elements (one for each marker) is expected. For <o>bach.roll</o> markers, or for
				<o>bach.score</o> markers attached to milliseconds position, each element
				must be in the form <b>(<m>position_ms</m> <m>marker_name(s)</m> <m>role</m> <m>content</m>)</b> where the two last parameters
				are optional and only supported by <o>bach.roll</o> (ignore them in <o>bach.score</o>). The <m>position_ms</m> is a floating number
				specifying the marker position in milliseconds; the <m>marker_name(s)</m> is either a single symbol, or a wrapped llll, or
				<b>nil</b> or <b>()</b> if marker has no name. For <o>bach.score</o> measure-attached markers the syntax is: <b>(<m>TIMEPOINT</m> <m>marker_name(s)</m>)</b>
				where <m>TIMEPOINT</m> identifies a time point.
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				– <b>slotinfo</b>: specifies the information about the types and the global characteristics of each slot.
				The general syntax for a slotinfo llll in a notation object header is: <b>(slotinfo (<m>slot_num1</m> <m>SPECIFICATIONS1</m>) (<m>slot_num2</m> <m>SPECIFICATIONS2</m>)...)</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction", "none".  <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). You can also put "temporal"
				if you want the window to correspond exactly to the note length, which is handy when dealing e.g. with envelopes or spatializations. <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: if followed by an llll sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: if followed by an llll sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>()</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "notecolor", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				– <b>commands</b>: specifies the information about the commands. A list of elements (one for each command) is expected.
				The general syntax for an llll defining commands in a notation object header is:
				<b>(commands (<m>command_num1</m> <m>SPECIFICATIONS1</m>) (<m>command_num2</m> <m>SPECIFICATIONS2</m>)...)</b>
				where the <m>command_num1</m> are the command numbers (1 to 5), followed by their corresponding command specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the command numbers have to be sorted in any way. On the other hand, at output, the commands
				are always output for all commands, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the commands.
				The list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>note</b>: expects the symbol which will replace the "note" symbol in the playout (given as a unique symbol). <br />
				– <b>chord</b>: expects the symbol which will replace the "chord" symbol in the playout (given as a unique symbol). <br />
				– <b>rest</b>: expects the symbol which will replace the "rest" symbol in the playout (given as a unique symbol). <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				<br /> <br />
				– <b>groups</b>: (<o>bach.roll</o> only) specifies the information about the grouped chords.
				Although bach.roll syntax, as everything in bach, is transparent (and you are thus allowed to modify any element),
				there are extremely few cases where you might need to set manually the group information in llll form.
				Usually, such information is only dealt with via the interface (i.e. by grouping and ungrouping things),
				and the group header element is only a way to embed or save such information with the object.
				Nevertheless, nothing in principle prevents you from setting groups via message. The syntax is the following one:
				<b>(groups <m>GROUP1</m> <m>GROUP2</m>...)</b>, where each <m>GROUP</m> is an llll having the syntax
				<b>(<m>ADDRESS_CHORD1</m> <m>ADDRESS_CHORD2</m> <m>ADDRESS_CHORD3</m>...)</b>, where each address llll identifies one of the
				chord inside the groups, via the following syntax: <b>(<m>voice_number</m> <m>chord_index</m>)</b>,
				where the chord index is the position of the chord inside the sequence of chords of the voice (ordered by onsets).
				For <o>bach.score</o>, the gathered syntax for any voice, in its simplest form <b>(<m>MEASURE1</m> <m>MEASURE2</m>... <m>voice_flag</m>)</b>
				where each <m>MEASURE</m> is an llll representing a measure in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br /> <br />
				For <o>bach.score</o>, the gathered syntax for any measure is, in its simplest form <b>(<m>MEASUREINFO</m> <m>CHORD1</m> <m>CHORD2</m>... <m>measure_flag</m>)</b>
				where <m>MEASUREINFO</m> is the information concerning time signatures and tempi, as well as possibly other information regarding barlines, widths and more (see below),
				each <m>CHORD</m> is an llll representing a chord and must be in the chord gathered syntax, and the <m>measure_flag</m> is an optional bitfield summing values of
				1 (if measure is locked), 2 (if measure is muted), 4 (if measure is solo), 8 (if measure rhythmic tree is locked). <br />
				In the most general form, chord information is not represented linearly as a sequence of <m>CHORD</m> lllls, rather as a rhythmic tree, so
				chord lllls are in general wrapped into further levels of parentheses. This is not necessary as input, although you can define such levels
				also as input, in order to suggest to <o>bach.score</o> the rhythmic tree you want to have,
				for instance: <b>(<m>MEASUREINFO</m> ((<m>CHORD1</m> <m>CHORD2</m>) <m>CHORD3</m>)... <m>measure_flag</m>)</b>.
				These additional levels act as suggestions on the bach algorithms, which might create further levels (e.g. by refining levels) or modify the existing ones
				according to the <m>treehandling</m> and <m>maketreecompatiblewithts</m> attributes.
				Each level llll by default has as first element, while output, an llll in the form <b>(leveltype <m>type</m>)</b>, where <m>type</m> is a number
				which accounts for the "lifecycle" of the level (was it created by the user? was it refined by bach itself?...) and which should be
				opaque to the user: such level type should never be set by hand, only kept to guarantee a good storage or rebuilding of <o>bach.score</o>.
				The interpretation of rhythmic tree levels as input will depend on all the rhythmic tree attributes, the most important of which are
				<m>treehandling</m> and <m>maketreecompatiblewithts</m>. At output, the gathered syntax might or might not contain the rhythmic tree
				levels of parentheses, depending on the <m>outputtrees</m> attribute. Also it might or might not contain level type specifications,
				depending on the <m>saveleveltypes</m> attribute. <br />
				Grace chords are characterized by being elements inside grace levels. Grace levels are identified by a "g" symbol at the very beginning
				of the level. A grace level may contain sub-levels as any other ordinary level. Indeed, grace chords may have any symbolic duration,
				they may also be rests, or organized in tuplets. The general form of the grace level is thus <b>(g <m>CHORD_OR_CHORDS</m>)</b>,
				where <m>CHORD_OR_CHORDS</m> may be a complex llll containing the gathered syntax of chords. For instance: <b>(g (1/8 (6000 127 1)) ((-1/12) (1/24 (6000 127 1))))</b>.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any chord, in its simplest form <b>(<m>sym_duration</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>)</b>
				where <m>sym_duration</m> is the symbolic rational duration of the chord, as a fraction of the whole note (e.g. <b>1/4</b>), each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have specifications defining its name(s) or its articulation(s).
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the last note llll,
				and before the <m>chord_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a chord definition might
				have the form <b>(1/4 (7000. 127 1) (7200. 100 0) (name john) (articulations acc stacc) 0)</b>
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>(<m>extra_name</m> <m>GLOBAL_CONTENT</m>) (<m>extra_name</m> <m>GLOBAL_CONTENT</m>)...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots",
				and also "articulations", but only for <o>bach.score</o>)
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). For instance, the pitch breakpoints specification for a given note may have the form
				<b>((0. 0. 0.) (0.5 500 0.5) (1. 0. 0.))</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>()</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>(graphics 6200 -1/2)</b>, one should just have <b>(6200 -1/2)</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</method>
		<method name="dumppixelpos">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve pixel position of every chord and note
			</digest>
			<description>
				The <m>dumppixelpos</m> message retrieves the pixel position of any chord and note, and outputs it from the playout.
				The output answer has the syntax:
				<b>dumppixelpos <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form:
				<b>(<m>MEASURE1</m> <m>MEASURE2</m>...)</b>, and where each <m>MEASURE</m> is in turn an llll of the form
				<b>(<m>CHORD1</m> <m>CHORD2</m>...)</b>, and where each <m>CHORD</m> is an llll accounting for the pixel position of the chord
				and all its notes, in the form:
				<b>(<m>x-pixel_onset</m> (<m>duration_in_horizontal_pixels_note1</m>  <m>duration_in_horizontal_pixels_note2</m> ...)
				(<m>y_pixel_noteheadcenter_note1</m>   <m>y_pixel_noteheadcenter_note2</m> ...)
				(<m>x_pixel_accidental_left_position_note1</m> <m>x_pixel_accidental_left_position_note2</m> ...))</b>.
				The <m>x-pixel_onset</m> is the pixel corresponding to the chord onset; each <m>duration_in_horizontal_pixels_note</m> is the
				length of eachnote duration line in pixels; each <m>y_pixel_noteheadcenter_note</m> is the vertical position (in pixels) of the center
				of the noteheads, and each <m>x_pixel_accidental_left_position_note</m> is the pixel position of the left boundary of the leftmost accidental
				for each note (or, if a note has no accidentals, the leftmost point of the notehead). <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="dumpselection">
			<arglist />
			<digest>
				Play selected items off-line
			</digest>
			<description>
				The <m>dumpselection</m> message sends the content of each one of selected notation items from the
				playout, in playout syntax (off-line play). You should not rely on the order of the output messages.
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="erasebreakpoints">
			<arglist />
			<digest>
				Delete pitch breakpoints of selected notes
			</digest>
			<description>
				The <m>erasebreakpoints</m> message deletes all the pitch breakpoints of the selected notes.
			</description>
		</method>
		<method name="eraseslot">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<digest>
				Clear a specific slot for selected notes
			</digest>
			<description>
				An <m>eraseslot</m> message will clear the content of a specific slot for any selected note.
				The slot number of the slot to clear is given as argument.
				Instead of the slot number, you can use slot names, or you can the word "active" to refer to the currently open slot.
			</description>
		</method>
		<method name="exportlilypond">
			<arg name="filename" optional="1" type="symbol" />
			<arg name="specifications" optional="1" type="llll" />
			<digest>
				Export as LilyPond file
			</digest>
			<description>
				The <m>exportlilypond</m> message saves the content of the <o>bach.score</o> as a LilyPond file.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				Furthermore, some exporting specifications are available, and each has to be given as llll after the (optional) file name.
				Such lllls will be in the form <b>(<m>specification_name</m> <m>specification_value</m>)</b>). Available specifications are: <br />
				- <b>voices</b> (default: <b>()</b>): if a list of voices is provided, then only the specified voices will be exported.
				If no list is provided, then all the voices of the score will be exported. Ranges can also be
				expressed, as sublists. For example, <b>(voices 1 3 5)</b> will export the first, third and fifth voice,
				while <b>(voices (1 5) 8)</b> will export all the voices from 1 to 5, and the 8th voice. <br />
			</description>
		</method>
		<method name="exportlilypondpdf">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export PDF file via LilyPond
			</digest>
			<description>
				The <m>exportlilypondpdf</m> exports the content of the <o>bach.score</o> as a PDF file,
				via a LilyPond conversion. LilyPond has to be installed properly in order for this to work.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
			</description>
		</method>
		<method name="exportmidi">
			<arg name="filename" optional="1" type="symbol" />
			<arg name="specifications" optional="1" type="llll" />
			<digest>
				Export as MIDI file
			</digest>
			<description>
				The <m>exportmidi</m> message saves the content of the <o>bach.score</o> as a MIDI file.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				Furthermore, some exporting specifications are available, and each has to be given as llll after the (optional) file name.
				Such lllls will be in the form <b>(<m>specification_name</m> <m>specification_value</m>)</b>). Available specifications are: <br />
				- <b>exportmarkers</b> (default: 1): if non-0, all the markers in the score will be exported. <br />
				- <b>voices</b> (default: <b>()</b>): if a list of voices is provided, then only the specified voices will be exported.
				If no list is provided, then all the voices of the score will be exported. Ranges can also be
				expressed, as sublists. For example, <b>(voices 1 3 5)</b> will export the first, third and fifth voice,
				while <b>(voices (1 5) 8)</b> will export all the voices from 1 to 5, and the 8th voice. <br />
				- <b>format</b> (default: 0): the MIDI file format (0 = single track, 1 = multiple tracks). <br />
				– <b>resolution</b> (default: 960): the number of MIDI ticks per beat. <br />
				- <b>temporampsamplingrate</b> (default 240): is an option expressing the maximum duration, expressed in MIDI ticks,
				for a single tempo step during tempo interpolations. With the default settings, this duration is one sixteenth note.
				In bach.score, accelerandi and rallentandi vary the tempo continuously.
				This can't be achieved within MIDI files: instead, an accelerando or a rallentando will be exported as a
				sequence of discrete tempo changes, each representing a "step" of the accelerando or rallentando.
				It is guaranteed that the overall duration of the tempo ramp will be consistent with the original.
			</description>
		</method>
		<method name="exportom">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export to OpenMusic
			</digest>
			<description>
				The <m>exportom</m> message saves the content of the <o>bach.score</o> object in a way that OpenMusic will be able to open
				(by selecting "Import" and then "From bach" from the File menu). The content of a <o>bach.score</o> can be imported into an OpenMusic's "voice"
				or "poly".
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
			</description>
		</method>
		<method name="exportpwgl">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export to PWGL
			</digest>
			<description>
				The <m>exportpwgl</m> message saves the content of the <o>bach.score</o> object in a way that PWGL will be able to open
				(by connecting the "import-bach" box, in the "pwgl2bach" library).
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
			</description>
		</method>
		<method name="exportxml">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Export as MusicXML file
			</digest>
			<description>
				The <m>exportxml</m> message saves the content of the <o>bach.score</o> object in MusicXML format.
				Such format is read by most of the currently available music engraving softwares.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
				Furthermore, some exporting specifications are available, and each has to be given as llll after the (optional) file name.
				Such lllls will be in the form <b>(<m>specification_name</m> <m>specification_value</m>)</b>). Available specifications are: <br />
				- <b>velocity</b> (default: 0): if non-0, the velocity for each note will be exported as a MusicXML direction.
				This is not always desirable, as the direction itself will appear as an empty expression when
				imported, for instance, into a software like Finale. <br />
				- <b>directionslots</b> (default: <b>null</b>): if one or more slots numbers are specified, their contents will be converted
				into text and exported as generic text directions. <br />
				- <b>dynamicsslot</b> (default: <b>0</b>): if a valid text slot number is specified, its content will be exported
				as dynamics directions, shown as dynamics markings by most music engraving programs. <br />
				- <b>parenthesizedquartertones</b> (default: <b>0</b>): export quarter tones as parenthesized versions of semitonal accidentals
				which are a quartertone lower. For instance, if you set this specification to 1, a quarter sharp will be exported as a parenthesized
				natural, a quarter flat will be exported as a parenthesized flat, and so on.
				This specification should be considered as a workaround to ease quartertone export to Finale or similar pieces of software.
				Please notice that music notation software with a good native support for quartertones
				(e.g. Sibelius or MuseScore) will import them correctly from bach, without any workaround (no need to specify anything).
				Things are more complex with software such Finale, whose quartertone support is more cumbersome.
				With the default settings, what Finale will do is changing the character for single accidentals in order to show quartertones
				accidentals when needed. This is something you might want to avoid, since editing your score from that point on becomes very
				difficult. What might be handy to do, with Finale, is to export quartertone accidentals as if they were parenthesized versions
				of the standard accidentals. You can easily map inside finale the parenthesized accidentals to the glyphs of
				quartertone accidentals, via your favorite quartertone accidental font. A parenthesized natural will be displayed as
				a quarter-sharp; a parenthesized sharp as a three-quarter-sharp, and so on. Everything, if parenthesized, will step up a
				quarter tone. Once you have set up your new Finale document in this way, you can use the <b>(parenthesizedquartertones 1)</b>
				specification in order to export quartertones in this way.
			</description>
		</method>
		<method name="filltiedsequenceswithslots">
			<arglist />
			<digest>
				Fill tie sequences with slots
			</digest>
			<description>
				Fills each note in a sequence of ties with the slots of the first tied note, provided that the <m>singleslotfortiednotes</m> specification
				is set in the slotinfo (otherwise the slot is not copied). This might be useful for instance while reversing, scrambling or modifying sequences of tied notes
				while preserving the correct slot information.
			</description>
		</method>
		<method name="fixvzoom">
			<arglist />
			<digest>
				Fix the vertical zoom value
			</digest>
			<description>
				If the <m>vzoom</m> attribute was set to "auto", the <m>fixvzoom</m> message turns it into the
				fixed value that the vertical zoom currently have. (The vertical zoom is also a global zoom for any
				displayed item: see <m>vzoom</m> to know more.)
			</description>
		</method>
		<method name="getcurrentchord">
			<arglist />
			<digest>
				Get notes at cursor position
			</digest>
			<description>
				The word <m>getcurrentchord</m> outputs from the playout the pitches and velocities of the
				notes being played at the cursor position. The output syntax is: <b>currentchord <m>PITCHES</m> <m>VELOCITIES</m></b>,
				where <m>PITCHES</m> and <m>VELOCITIES</m> are respectively wrapped lists containing the midicents and the corresponding
				velocities of the notes being played at the cursor position. <br /> This is a rather quick'n'dirty method to have
				pitch and velocity information; if you need any more information at a specific timepoint, see the <m>interp</m> and
				<m>sample</m> messages.
			</description>
		</method>
		<method name="getcursor">
			<arglist />
			<digest>
				Get current playhead cursor position
			</digest>
			<description>
				The <m>getcursor</m> message retrieves the current playhead cursor position, and outputs it from the playout in the form
				<b>cursor <m>cursor_position_ms</m></b>, where the last parameter is the current position of the playhead cursor in milliseconds.
			</description>
		</method>
		<method name="getdomain">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the current domain
			</digest>
			<description>
				The <m>getdomain</m> message forces <o>bach.score</o> to output from the playout the current domain,
				i.e. the portion of <o>bach.score</o> currently displayed inside the screen. The output information is both in milliseconds
				and in timepoints.
				The syntax of the output answer is: <b>domain <m>start_ms</m> <m>end_ms</m> <m>VOICE1</m> <m>VOICE2</m>...</b>, where the
				two elements following the "domain" symbol are the starting and ending point of the domain in milliseconds,
				and each <m>VOICE</m> is an llll containing the information about the timepoints of each voice (i.e. at which measure and point in measure,
				for each voice, the domain starts and ends): its syntax is: <b>((<m>start_measure_number</m> <m>start_sym_onset</m>)
				(<m>end_measure_number</m> <m>end_sym_onset</m>) <m>total_sym_duration</m>)</b>, where <m>start_measure_number</m> is the measure number of the
				measure where the domain starts, and <m>start_sym_onset</m> is the symbolic onset (point inside the measure) at which the domain start happens;
				<m>end_measure_number</m> is the measure number of the
				measure where the domain end, and <m>end_sym_onset</m> is the symbolic onset (point inside the measure) at which the domain end happens;
				finally <m>total_sym_duration</m> is the global duration of the domain in symbolic units. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getdomainpixels">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the pixel position of the domain
			</digest>
			<description>
				The <m>getdomainpixels</m> message forces <o>bach.score</o> to output from the playout the current position
				(in pixels) of the domain, i.e. the starting (left) and ending (right) pixels of the currently displayed portion of music.
				These pixels are referred to the notation object box.
				The syntax of the output answer is: <b>domainpixels <m>start_pixel</m> <m>end_pixel</m></b>, where the
				two elements following the "domainpixels" symbol are the leftmost and rightmost horizontal points (in pixels) of the domain. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getlength">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the total length
			</digest>
			<description>
				@description The <m>getlength</m> message forces the notation object to output from the playout the total length of the musical content,
				in milliseconds.
				The syntax of the output answer is: <b>length <m>length_ms</m></b>, where the last element is indeed the total length of the
				content in milliseconds. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getloop">
			<arglist />
			<digest>
				Get current loop region position
			</digest>
			<description>
				The <m>getloop</m> message retrieves the current loop region position, and outputs it from the playout in the form
				<b>loop <m>loop_start_ms</m> <m>loop_end_ms</m> <m>LOOP_START_TIMEPOINT</m> <m>LOOP_END_TIMEPOINT</m></b>, where the two parameters
				after the "loop" symbol are the beginning and end position of the loop, in milliseconds (also see the <m>loop</m> attribute), while
				the two last parameters are lllls representing the same milliseconds position but as timepoints, in the form
				<b>(<m>measure_number</m> <m>sym_onset_in_measure</m> <m>voice_number</m>)</b>. The two timepoints might not be linked to the same voice:
				the two voice numbers are in general different (depending on the voice where the loop extreme aligns best to a chord).
			</description>
		</method>
		<method name="getmarker">
			<arg name="names" optional="1" type="list" />
			<arg name="namefirst_specification" optional="1" type="llll" />
			<digest>
				Retrieve marker information
			</digest>
			<description>
				The <m>getmarker</m>, without any further argument, will output all the markers from the playout in the form
				<b>markers <m>MARKER1</m> <m>MARKER2</m>...</b>, where each <m>MARKER</m> is an llll of the form
				<b>(<m>POSITION</m> <m>name_or_names</m> none)</b>, where the <m>POSITION</m> is either a floating point number (if marker is attached to
				an absolute position in milliseconds) or the marker timepoint (if the marker is attached to a given measure position).
				The <m>name_or_names</m> parameter is either a single symbol or integer (if the marker has a single name), or an llll containing all the names
				listed, in the form <b>(<m>name1</m> <m>name2</m> ...)</b>, where each <m>name</m> is a symbol or an integer. If a marker has no name,
				then <b>()</b> is used. Finally the <b>none</b> symbol represents the marker role (unsupported in <o>bach.score</o> but output for compatibility
				with <o>bach.roll</o> and for a possible future usage). <br />
				If you send a message <b>getmarker (namefirst 1)</b>, all the markers will be output from the playout in the form
				<b>markers <m>MARKER1</m> <m>MARKER2</m>...</b>, where each <m>MARKER</m> is an llll of the form
				<b>(<m>name_or_names</m> <m>POSITION</m> none)</b>. <br />
				You can retrieve the information about a specific marker by adding the marker name or names as arguments. In this case you'll get
				from the playout an llll in the form <b>marker <m>name_or_names</m> <m>POSITION</m> none</b>, where all
				the parameters are the same as above.
				If more than one marker match the introduced name(s), only the information about the first marker (in temporal order) is output.
			</description>
		</method>
		<method name="getnumchords">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of chords
			</digest>
			<description>
				The <m>getnumchords</m> message forces <o>bach.score</o> to output from the playout the number of chord, for each measure and for each voice.
				The syntax of the output answer is: <b>numchords <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>(<m>num_chords_measure1</m> <m>num_chords_measure1</m>...)</b>,
				i.e. after the "numchords" symbol, a list of lists is given: each outer list represents a voice, and innerly contains an integer for each one
				of its measures: such integer is the number of chords of the measure. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getnummeasures">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of measures
			</digest>
			<description>
				The <m>getnummeasures</m> message forces <o>bach.score</o> to output from the playout the current number of measures, for each voice.
				The syntax of the output answer is: <b>nummeasures <m>num_measures_voice1</m> <m>num_measures_voice2</m>...</b>,
				i.e. after the "nummeasures" symbol, a list of integers is given, representing the number of measures for each one of the voices. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getnumnotes">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of notes
			</digest>
			<description>
				The <m>getnumnotes</m> message forces <o>bach.score</o> to output from the playout the number of notes, for each chord, for each measure and for each voice.
				The syntax of the output answer is: <b>numnotes <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>(<m>MEASURE1</m> <m>MEASURE2</m>...)</b>, and each <m>MEASURE</m> is in turn an llll of the form <b>(<m>num_notes_chord1</m> <m>num_notes_chord2</m>...)</b>,
				i.e. after the "numnotes" symbol, a list of lists of lists is given: each outer list represents a voice, then one has a level for each measure,
				containing contains an integer for each one of its chords: such integer is the number of notes of the chord. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getnumvoices">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Get the number of voices
			</digest>
			<description>
				The <m>getnumvoices</m> message forces <o>bach.score</o> to output from the playout the current number of voices.
				The syntax of the output answer is: <b>numvoices <m>num_voices</m></b>, where the last element is the number of voices. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getvoicepixelpos">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve pixel position of every voice
			</digest>
			<description>
				The <m>getvoicepixelpos</m> message retrieves the pixel position of any voices, and outputs it from the playout.
				The output answer has the syntax:
				<b>voicepixelpos <m>VOICE1</m> <m>VOICE2</m>...</b>, where each <m>VOICE</m> is an llll of the form
				<b>(<m>y_pixel_middleC</m> <m>y_pixel_bottom_staffline</m> <m>y-pixel_top_staffline</m>)</b>. The three values are: the vertical position
				in pixels of the middle C, and the bottommost and topmost staffline position (in pixels). <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getvzoom">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve the current vertical zoom
			</digest>
			<description>
				The <m>getvzoom</m> message retrieves the current value of the vertical zoom. Such value is given as precise percentage value,
				also in case the <m>vzoom</m> attribute is set to "auto".
				The output answer is sent through the playout in the form: <b>vzoom <m>current_vzoom_value</m></b>, where the
				<m>current_vzoom_value</m> is given as percentage. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="getzoom">
			<arg name="query_label" optional="1" type="llll" />
			<digest>
				Retrieve the current horizontal zoom
			</digest>
			<description>
				The <m>getzoom</m> message retrieves the current value of the horizontal zoom.
				The output answer is sent through the playout in the form: <b>zoom <m>current_zoom_value</m></b>, where the
				<m>current_zoom_value</m> is given as percentage. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="glissando">
			<arg name="slope" optional="1" type="float" />
			<digest>
				Make selection glissando
			</digest>
			<description>
				The <m>glissando</m> message changes each note tail so that it matches the following note's pitch - in other words, turns the written musical
				line into a continuous glissando. If a note is followed by a rest, nothing will happen.
				You can set as optional argument the glissando slope, as floating point value, from -1. to 1. (0. being linear, default).
			</description>
		</method>
		<method name="hidecursor">
			<arglist />
			<digest>
				Hide the playhead cursor
			</digest>
			<description>
				The <m>hidecursor</m> message hides the playhead cursor, if it was visible.
				This does not affect the playback behavior: at play time the cursor is always visible.
			</description>
		</method>
		<method name="inhibitundo">
			<arglist />
			<digest>
				Temporarily disable/enable undo step creation
			</digest>
			<description>
				An <m>inhibitundo</m> message followed by any non-zero number will
				temporarily disable any undo step creation. Use the same message followed by a zero
				to re-enable undo steps.
			</description>
		</method>
		<method name="inscreen">
			<arg name="temporal_position" optional="0" type="llll" />
			<digest>
				Change scrollbar position to display a temporal point
			</digest>
			<description>
				The message <m>inscreen</m> followed by a temporal position specified in milliseconds forces such
				position to be displayed inside the domain, by changing the scrollbar position.
				The millisecond position can be replaced by a timepoint timepoint. <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
			</description>
		</method>
		<method name="inscreenmeas">
			<arg name="start_measure_number" optional="0" type="int" />
			<arg name="end_measure_number" optional="0" type="int" />
			<arg name="voice_number" optional="1" type="int" />
			<digest>
				Fit measure range inside the domain
			</digest>
			<description>
				The message <m>inscreenmeas</m> change the domain so that it exactly fits a given range of measures. To do so, not only the position
				of the scrollbar is changed, but also the width factors of the involved measures are precisely modified, so to fit precisely inside the screen.
				The two arguments are the starting and ending numbers of the measures to be displayed in the screen.
				If a third argument is given, this is the voice number to which the measure range refers (by default: first voice).
				For instance, <b>inscreenmeas 4 7 3</b> shows exactly in the screen measures 4 to 7 of voice 3.
			</description>
		</method>
		<method name="inscreenpos">
			<arg name="domain_relative_location" optional="0" type="float" />
			<arg name="temporal_position" optional="0" type="llll" />
			<digest>
				Change scrollbar position to precisely display a temporal point
			</digest>
			<description>
				The message <m>inscreenpos</m> sets a given position in milliseconds (or a given timepoint) in a given point inside the notation object domain.
				It has to be followed by two argument: a value between 0 and 1, specifying the relative location inside the screen in which the temporal
				point should be displayed (0 represents the screen beginning, 1 the screen end), and the position in milliseconds (as a single number) or the timepoint
				(as an llll) <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
			</description>
		</method>
		<method name="insertvoice">
			<arg name="voice_number" optional="0" type="int" />
			<arg name="voice" optional="1" type="int/llll" />
			<digest>
				Insert a voice
			</digest>
			<description>
				An <m>insertvoice</m> message, followed by an integer number <m>N</m>, will create a new voice and insert it as the <m>N</m>-th voice
				of the current score. If a third llll argument is set, this can be either an integer, specifying the number of reference voice from where
				the measureinfo should be copied (hence the new voice will be filled with empty measures, according to the specified reference voice),
				or an llll, containing the gathered syntax of the whole new voice, so that the new voice comes also
				filled with musical content. <br />
				For <o>bach.score</o>, the gathered syntax for any voice, in its simplest form <b>(<m>MEASURE1</m> <m>MEASURE2</m>... <m>voice_flag</m>)</b>
				where each <m>MEASURE</m> is an llll representing a measure in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br /> <br />
				For <o>bach.score</o>, the gathered syntax for any measure is, in its simplest form <b>(<m>MEASUREINFO</m> <m>CHORD1</m> <m>CHORD2</m>... <m>measure_flag</m>)</b>
				where <m>MEASUREINFO</m> is the information concerning time signatures and tempi, as well as possibly other information regarding barlines, widths and more (see below),
				each <m>CHORD</m> is an llll representing a chord and must be in the chord gathered syntax, and the <m>measure_flag</m> is an optional bitfield summing values of
				1 (if measure is locked), 2 (if measure is muted), 4 (if measure is solo), 8 (if measure rhythmic tree is locked). <br />
				In the most general form, chord information is not represented linearly as a sequence of <m>CHORD</m> lllls, rather as a rhythmic tree, so
				chord lllls are in general wrapped into further levels of parentheses. This is not necessary as input, although you can define such levels
				also as input, in order to suggest to <o>bach.score</o> the rhythmic tree you want to have,
				for instance: <b>(<m>MEASUREINFO</m> ((<m>CHORD1</m> <m>CHORD2</m>) <m>CHORD3</m>)... <m>measure_flag</m>)</b>.
				These additional levels act as suggestions on the bach algorithms, which might create further levels (e.g. by refining levels) or modify the existing ones
				according to the <m>treehandling</m> and <m>maketreecompatiblewithts</m> attributes.
				Each level llll by default has as first element, while output, an llll in the form <b>(leveltype <m>type</m>)</b>, where <m>type</m> is a number
				which accounts for the "lifecycle" of the level (was it created by the user? was it refined by bach itself?...) and which should be
				opaque to the user: such level type should never be set by hand, only kept to guarantee a good storage or rebuilding of <o>bach.score</o>.
				The interpretation of rhythmic tree levels as input will depend on all the rhythmic tree attributes, the most important of which are
				<m>treehandling</m> and <m>maketreecompatiblewithts</m>. At output, the gathered syntax might or might not contain the rhythmic tree
				levels of parentheses, depending on the <m>outputtrees</m> attribute. Also it might or might not contain level type specifications,
				depending on the <m>saveleveltypes</m> attribute. <br />
				Grace chords are characterized by being elements inside grace levels. Grace levels are identified by a "g" symbol at the very beginning
				of the level. A grace level may contain sub-levels as any other ordinary level. Indeed, grace chords may have any symbolic duration,
				they may also be rests, or organized in tuplets. The general form of the grace level is thus <b>(g <m>CHORD_OR_CHORDS</m>)</b>,
				where <m>CHORD_OR_CHORDS</m> may be a complex llll containing the gathered syntax of chords. For instance: <b>(g (1/8 (6000 127 1)) ((-1/12) (1/24 (6000 127 1))))</b>.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any chord, in its simplest form <b>(<m>sym_duration</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>)</b>
				where <m>sym_duration</m> is the symbolic rational duration of the chord, as a fraction of the whole note (e.g. <b>1/4</b>), each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have specifications defining its name(s) or its articulation(s).
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the last note llll,
				and before the <m>chord_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a chord definition might
				have the form <b>(1/4 (7000. 127 1) (7200. 100 0) (name john) (articulations acc stacc) 0)</b>
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</method>
		<method name="interp">
			<arg name="num_samples" optional="0" type="int" />
			<digest>
				Obtain active notes data at a given instant
			</digest>
			<description>
				The <m>interp</m> message, followed by a time value (in milliseconds) retrieves
				the instantaneous data of all the notes which are active at the given time instant.
				The answer is sent through the playout in the following form: <b>interp <m>VOICE1</m> <m>VOICE2</m>...</b>
				where each <m>VOICE</m> is in the form <b>(<m>CHORD</m>)</b>, being the chord active at the
				given time instant (if any, or null if none), with <m>CHORD</m> being in the form <b>(<m>NOTE1</m> <m>NOTE2</m>...)</b>,
				being the chord notes active at
				the given time instant, each in the standard note gathered syntax, with two important variations:
				there is no tie element, and for each slot marked as temporal only the slot element at the given time instant
				is output (e.g. the interpolated function point of a function slot). <br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</method>
		<method name="join">
			<arglist />
			<digest>
				Join selected chords
			</digest>
			<description>
				The <m>join</m> message joins the selected chords when possible, by creating ties between them and by rhythmically re-writing the musical content.
			</description>
		</method>
		<method name="lambda">
			<arg name="modification_message" optional="0" type="llll" />
			<digest>
				Perform operation on individual selected items
			</digest>
			<description>
				The <m>lambda</m> message is a general router which can be prepended to all the following operations:
				<m>cents</m>, <m>velocity</m>, <m>onset</m>, <m>tail</m>, <m>duration</m>, <m>addbreakpoint</m>, <m>erasebreakpoint</m>, <m>addslot</m>,
				<m>changeslotvalue</m>, <m>eraseslot</m>.
				If such router is prepended, the corresponding operation will apply on the currently output selected item.
				The idea is that when a selection dump is asked or a command is sent (also see <m>dumpselection</m> or <m>sendcommand</m>), the notation
				elements are output one by one from the playout (notewise or chordwise depending on the <m>playmode</m>): if you put a feedback loop from the playout
				to the <o>bach.roll</o>, changing one of the previously defined parameter, but prepending the "lambda" symbol inside the message,
				such modification will not apply to the whole selection, but only to the item currently being output. In such a way, you can modify
				chords one by one, depending on their parameters, even by performing a collective selection dump.
				Such feedback cycle must not have any <o>delay</o> nor <o>pipe</o> nor <o>defer</o> nor <o>deferlow</o>, nor anything which may change the thread
				or defer the modification operation. See #lambda+operation in the help center to have some examples of usage.
			</description>
		</method>
		<method name="legato">
			<arglist />
			<digest>
				Make selection legato
			</digest>
			<description>
				The <m>legato</m> message removes any rest inside the selected items, by extending the duration of the chords right before the rests.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In the first inlet, an llll is expected to be a gathered syntax content of the entire <o>bach.score</o> (building
				the new <o>bach.score</o> content from scratch), or an llll containing just some header specification
				(thus not affecting the body of the object). See below for more information on the gathered syntax. <br />
				In any of the other inlets, an llll is expected to contain the separate syntax of some parameter. Namely: <br />
				- second inlet: Measureinfo <br />
				- third inlet: Cents <br />
				- fourth inlet: Durations <br />
				- fifth inlet: Velocities <br />
				- sixth inlet: Ties <br />
				- seventh inlet: Extras <br />
				See below for more information about the separate syntax. Also see the <m>bang</m> method to rebuild content from these separate
				parameters.<br /> <br />
				The gathered syntax of a whole <o>bach.score</o> is in the form <b>score <m>HEADER</m> <m>BODY</m></b>, where
				the first symbol is optional as input (but always given as output). <m>HEADER</m> is an llll containing all the
				<o>bach.score</o> meta-information (such as key signatures, clefs, markers...),
				while <m>BODY</m> has the form of a sequence of voices: <b>(<m>VOICE1</m> <m>VOICE2</m>...)</b>
				where each voice is an llll in gathered syntax (see below for more information about this). <br /> <br />
				The header contains meta-information about the score. Such information is given in the form <b>(<m>HEADER_LLLL1</m> <m>HEADER_LLLL2</m>...)</b>
				where each <m>HEADER_LLLL</m> is in the form <b>(<m>header_element_name</m> <m>CONTENT</m>)</b>. The complete list of header element names
				and the expected content is the following one: <br />
				– <b>clefs</b>: introduces the used clefs; one clef symbol for each voice is expected. The number of voices is automatically
				updated to the number of clef symbols inserted.
				Since clefs can be set both as header element and as attribute, also see the <m>clefs</m> attribute.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8", "F8", "G15", "F15",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8", "F8", "G15" and "F15" symbols correspond to the transposed clefs: above for "G" clefs,
				and below for "F" clefs. For instance, "G8" is the G clef, transposed one octave above, whereas "F15" is the F clef transposed two octaves below.
				<br /> <br />
				– <b>keys</b>: introduces the used key signatures; one key signature symbol for each voice is expected. If less are given, last one is padded.
				Since key signatures can be set both as header element and as attribute, also see the <m>keys</m> attribute.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
				– <b>voicenames</b>: introduces the voice names specification, one name (atom) for each voice is expected.
				If a voice have more than one name, an llll with the list of names must be introduced. To skip names for a voice use <b>nil</b> or <b>()</b>.
				Since voice names can be set both as header element and as attribute, also see the <m>voicenames</m> attribute.
				<br /> <br />
				– <b>midichannels</b>: introduces the MIDI channels specification, one integer for each voice is expected.
				Since MIDI channels can be set both as header element and as attribute, also see the <m>midichannels</m> attribute.
				<br /> <br />
				– <b>stafflines</b>: set the staff lines configurations. A list of elements (one for each voice) is expected. Since staff lines can be set both as header element and
				as attribute, also see the <m>stafflines</m> attribute. Each element can be in one of the following forms:
				either <b><m>number_of_stafflines</m></b>, setting the number of stafflines for the voice, which will be distributed evenly around
				the middle line of the default staff, or a wrapped llll in the form <b>(<m>index_staff_line1</m> <m>index_staff_line2</m>...)</b>
				where each index is the position of a line to be drawn. Line 1 correspond to the bottommost staffline of a standard staff;
				line 5 correspond to the topmost staffline of a standard staff. Integers need not be positive: indices like -2 or 7 will be
				extrapolated from the standard staff. The total number of lines is thus the length of such llll.
				<br /> <br />
				– <b>markers</b>: specifies the markers. A list of elements (one for each marker) is expected. For <o>bach.roll</o> markers, or for
				<o>bach.score</o> markers attached to milliseconds position, each element
				must be in the form <b>(<m>position_ms</m> <m>marker_name(s)</m> <m>role</m> <m>content</m>)</b> where the two last parameters
				are optional and only supported by <o>bach.roll</o> (ignore them in <o>bach.score</o>). The <m>position_ms</m> is a floating number
				specifying the marker position in milliseconds; the <m>marker_name(s)</m> is either a single symbol, or a wrapped llll, or
				<b>nil</b> or <b>()</b> if marker has no name. For <o>bach.score</o> measure-attached markers the syntax is: <b>(<m>TIMEPOINT</m> <m>marker_name(s)</m>)</b>
				where <m>TIMEPOINT</m> identifies a time point.
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				– <b>slotinfo</b>: specifies the information about the types and the global characteristics of each slot.
				The general syntax for a slotinfo llll in a notation object header is: <b>(slotinfo (<m>slot_num1</m> <m>SPECIFICATIONS1</m>) (<m>slot_num2</m> <m>SPECIFICATIONS2</m>)...)</b>,
				where the <m>slot_num</m> are the slot numbers (1 to 30), followed by their corresponding slotinfo specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the slot numbers have to be sorted in any way. On the other hand, at output, the slotinfo
				is always output for all slots, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the slotinfo.
				The complete list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>name</b>: expects the name you want to give to the slot (given as a unique symbol). <br />
				– <b>type</b>: expects one of the following symbols, defining the slot type: "function", "int", "float", "intlist", "floatlist", "text",
				"filelist", "llll", "spat", "togglematrix", "intmatrix", "floatmatrix", "filter, "dynfilter", "color", "3dfunction", "none".  <br />
				– <b>range</b>: followed by two numbers, sets the minimum and maximum values the slot range (vertical axis for function and 3dfunction slots, or number
				range for number slots) may assume. <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				– <b>slope</b>: expects a parameter (-1 to 1, 0 = linear) to exponentially represent the displayed range values of the slot. <br />
				– <b>width</b>: expects a value determining the width of the slot window (scaled according to the object's vertical zoom). You can also put "temporal"
				if you want the window to correspond exactly to the note length, which is handy when dealing e.g. with envelopes or spatializations. <br />
				– <b>height</b>: a value determining the height of the slot window (scaled according to the object's vertical zoom). You can also put "auto"
				if you want to leave an automatically calculated height (default). <br />
				– <b>ysnap</b>: if followed by an llll sets, for function or 3dfunction slots, some privileged Y points to which the points will be snapped
				upon Shift+Alt+mousedrag. <br />
				– <b>zsnap</b>: if followed by an llll sets, for 3function slots, some privileged Z points to which the points will be snapped
				upon Shift+Ctrl+Alt+mousedrag (mac). <br />
				– <b>domain</b>: followed by two numbers, for function and 3dfunction slots, replaces the standard 0 to 1 domain with any input domain (input numbers
				are minimum and maximum). <br />
				– <b>domainslope</b>: a slope (-1 to 1, 0 = linear) to exponentially rescale the domain display. <br />
				– <b>default</b>: a numeric value (for numeric slots) determining the slot default value. <br />
				– <b>representation</b>: it could expect one of the following things. 1: Symbols defining units of measurement (e.g. "Hz", "ms"...), for numeric
				slots one symbol is expected, for function slots if one symbol is given, it is applied to the Y axis, if two symbols are given they are
				applied to the X and Y axis, for 3dfunction slots up to three symbols can be given, the third one referring to the Z axis, use <b>nil</b> or
				<b>()</b> to skip assignment for an axis. For filter and dynfilter slots, you can assign "Hz" or "cents" as unit of measurement
				and it will be used to display the cutoff frequency accordingly. 2: An enumeration list (only for int
				and intlist slots), mapping each integer to an element of this enumeration list (e.g. in an int slot from 1 to 3, a
				slot_representation "(one two three)" will display "one" at the place of 1, "two" at the place of 2, "three" at the place of 3).
				These symbols will never be output upon dump or play, they will be just displayed. 3:
				For matrix-typed slots, it can be either a llll containing the number of rows and columns, such as (3 4), or a llll containing
				the names of the rows and columns, such as ((or fee foo) (col1 col2 col3)). To give units to different axes, just list them, such as: Hz dB.
				– <b>zrange</b>: as "range", but for the Z spatial dimension (used by the 3dfunction slot: the Z dimension is the one "coming out" from the screen). <br />
				– <b>zslope</b>: as "slope", but for the Z spatial dimention (used by the 3dfunction slot). <br />
				– <b>singleslotfortiednotes</b>: (for bach.score only) tells whether tied sequences of notes have just one slot, the one corresponding
				to the first note of the sequence. <br />
				<br />
				You are not obliged to input all the fields: you can give as input only the required fields.
				Also at output, only the needed fields are given (e.g. the "zrange" is only output for 3dfunction slots, and so on).
				Setting an individual field for a given will not change any other field, unless the type is changed, in which case
				a conversion on all the slots is performed (if possible, i.e. if slots are compatible) otherwise the slot data of the given slot is lost.
				While converting slots, also some other fields may be changed to default values for the new slot type. <br />
				Some more fields can be set via the slotinfo. These fields are never retrieved when the slotinfo is queried via a
				<m>dump</m> message, since they correspond to standard attribute values of the notation object: <br />
				- <b>background</b>: this should be set to 1 if one needs the slot to be constantly painted in the background or 0 otherwise.
				This information is constantly synchronized with the <m>bgslots</m> attribute. <br />
				- <b>popup</b> (except bach.slot): this should be set to 1 if one needs the slot to show up in the note+popup+menu, or to 0 otherwise.
				This information is constantly synchronized with the <m>popupmenuslots</m> attribute. <br />
				- <b>rightclick</b> (except bach.slot): this should be set to 1 if one wants that the right click (or two-fingers tap) on a note head directly
				pops up the slot window of the current slot, or to 0 otherwise.
				This information is constantly synchronized with the <m>rightclickslot</m> attribute. <br />
				- <b>linkto</b> (except bach.slot): this field defines the possible slot linkage. Slot linkage is a way to entangle some notation or
				display features to the content of a given slot. You can specify here to which feature the slot should be linked,
				via one of the following symbols: "none", "lyrics", "notecolor", "noteheadadjust", "noteheadchar", "noteheadfont", "notesize". <br />
				<br />
				– <b>commands</b>: specifies the information about the commands. A list of elements (one for each command) is expected.
				The general syntax for an llll defining commands in a notation object header is:
				<b>(commands (<m>command_num1</m> <m>SPECIFICATIONS1</m>) (<m>command_num2</m> <m>SPECIFICATIONS2</m>)...)</b>
				where the <m>command_num1</m> are the command numbers (1 to 5), followed by their corresponding command specification. You don't need to give the information about all slots
				at input (only the one that you will use), nor the command numbers have to be sorted in any way. On the other hand, at output, the commands
				are always output for all commands, sorted in ascending order.
				Each <m>SPECIFICATIONS</m> llll has the form <b>(<m>parameter1</m> <m>content1</m>) (<m>parameter2</m> <m>content2</m>)...</b>, where
				each <m>parameter</m> is a symbol followed by some content specifying a field of the commands.
				The list of parameters symbols and their corresponding expected content is the following one: <br />
				– <b>note</b>: expects the symbol which will replace the "note" symbol in the playout (given as a unique symbol). <br />
				– <b>chord</b>: expects the symbol which will replace the "chord" symbol in the playout (given as a unique symbol). <br />
				– <b>rest</b>: expects the symbol which will replace the "rest" symbol in the playout (given as a unique symbol). <br />
				– <b>key</b>: expects the character or the ASCII value of a key to be mapped as a hotkey for the slot. <br />
				<br /> <br />
				– <b>groups</b>: (<o>bach.roll</o> only) specifies the information about the grouped chords.
				Although bach.roll syntax, as everything in bach, is transparent (and you are thus allowed to modify any element),
				there are extremely few cases where you might need to set manually the group information in llll form.
				Usually, such information is only dealt with via the interface (i.e. by grouping and ungrouping things),
				and the group header element is only a way to embed or save such information with the object.
				Nevertheless, nothing in principle prevents you from setting groups via message. The syntax is the following one:
				<b>(groups <m>GROUP1</m> <m>GROUP2</m>...)</b>, where each <m>GROUP</m> is an llll having the syntax
				<b>(<m>ADDRESS_CHORD1</m> <m>ADDRESS_CHORD2</m> <m>ADDRESS_CHORD3</m>...)</b>, where each address llll identifies one of the
				chord inside the groups, via the following syntax: <b>(<m>voice_number</m> <m>chord_index</m>)</b>,
				where the chord index is the position of the chord inside the sequence of chords of the voice (ordered by onsets).
				For <o>bach.score</o>, the gathered syntax for any voice, in its simplest form <b>(<m>MEASURE1</m> <m>MEASURE2</m>... <m>voice_flag</m>)</b>
				where each <m>MEASURE</m> is an llll representing a measure in gathered syntax, and the <m>voice_flag</m> is an optional bitfield summing values of
				1 (if voice is locked), 2 (if voice is muted), 4 (if voice is solo). <br /> <br />
				For <o>bach.score</o>, the gathered syntax for any measure is, in its simplest form <b>(<m>MEASUREINFO</m> <m>CHORD1</m> <m>CHORD2</m>... <m>measure_flag</m>)</b>
				where <m>MEASUREINFO</m> is the information concerning time signatures and tempi, as well as possibly other information regarding barlines, widths and more (see below),
				each <m>CHORD</m> is an llll representing a chord and must be in the chord gathered syntax, and the <m>measure_flag</m> is an optional bitfield summing values of
				1 (if measure is locked), 2 (if measure is muted), 4 (if measure is solo), 8 (if measure rhythmic tree is locked). <br />
				In the most general form, chord information is not represented linearly as a sequence of <m>CHORD</m> lllls, rather as a rhythmic tree, so
				chord lllls are in general wrapped into further levels of parentheses. This is not necessary as input, although you can define such levels
				also as input, in order to suggest to <o>bach.score</o> the rhythmic tree you want to have,
				for instance: <b>(<m>MEASUREINFO</m> ((<m>CHORD1</m> <m>CHORD2</m>) <m>CHORD3</m>)... <m>measure_flag</m>)</b>.
				These additional levels act as suggestions on the bach algorithms, which might create further levels (e.g. by refining levels) or modify the existing ones
				according to the <m>treehandling</m> and <m>maketreecompatiblewithts</m> attributes.
				Each level llll by default has as first element, while output, an llll in the form <b>(leveltype <m>type</m>)</b>, where <m>type</m> is a number
				which accounts for the "lifecycle" of the level (was it created by the user? was it refined by bach itself?...) and which should be
				opaque to the user: such level type should never be set by hand, only kept to guarantee a good storage or rebuilding of <o>bach.score</o>.
				The interpretation of rhythmic tree levels as input will depend on all the rhythmic tree attributes, the most important of which are
				<m>treehandling</m> and <m>maketreecompatiblewithts</m>. At output, the gathered syntax might or might not contain the rhythmic tree
				levels of parentheses, depending on the <m>outputtrees</m> attribute. Also it might or might not contain level type specifications,
				depending on the <m>saveleveltypes</m> attribute. <br />
				Grace chords are characterized by being elements inside grace levels. Grace levels are identified by a "g" symbol at the very beginning
				of the level. A grace level may contain sub-levels as any other ordinary level. Indeed, grace chords may have any symbolic duration,
				they may also be rests, or organized in tuplets. The general form of the grace level is thus <b>(g <m>CHORD_OR_CHORDS</m>)</b>,
				where <m>CHORD_OR_CHORDS</m> may be a complex llll containing the gathered syntax of chords. For instance: <b>(g (1/8 (6000 127 1)) ((-1/12) (1/24 (6000 127 1))))</b>.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any chord, in its simplest form <b>(<m>sym_duration</m> <m>NOTE1</m> <m>NOTE2</m>... <m>chord_flag</m>)</b>
				where <m>sym_duration</m> is the symbolic rational duration of the chord, as a fraction of the whole note (e.g. <b>1/4</b>), each <m>NOTE</m>
				is an llll representing a note in gathered syntax, and the <m>chord_flag</m> is an optional bitfield summing values of
				1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				In its most general form, each chord can have specifications defining its name(s) or its articulation(s).
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the last note llll,
				and before the <m>chord_flag</m>. The order in which the specifications are listed is, on the other hand, irrelevant. For instance, a chord definition might
				have the form <b>(1/4 (7000. 127 1) (7200. 100 0) (name john) (articulations acc stacc) 0)</b>
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>(<m>extra_name</m> <m>GLOBAL_CONTENT</m>) (<m>extra_name</m> <m>GLOBAL_CONTENT</m>)...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots",
				and also "articulations", but only for <o>bach.score</o>)
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). For instance, the pitch breakpoints specification for a given note may have the form
				<b>((0. 0. 0.) (0.5 500 0.5) (1. 0. 0.))</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>()</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>(graphics 6200 -1/2)</b>, one should just have <b>(6200 -1/2)</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</method>
		<method name="lock">
			<arglist />
			<digest>
				Lock selected items
			</digest>
			<description>
				The <m>lock</m> message will lock all selected items, in order to prevent their editing.
			</description>
		</method>
		<method name="merge">
			<arg name="selection" optional="0" type="sym" />
			<arg name="threshold_ms" optional="0" type="float" />
			<arg name="threshold_cents" optional="0" type="float" />
			<arg name="time_merging_policy" optional="1" type="int" />
			<arg name="pitch_merging_policy" optional="1" type="int" />
			<digest>
				Merge notes or chords
			</digest>
			<description>
				You can use the <m>merge</m> message to perform a merging of chords whose duration is too small,
				and/or of notes too near (with respect to the pitch). The two tasks are separate: the first implies that small chords will be deleted,
				and their duration will increase other chords' duration; the second implies that notes whose pitches differ by less then a pitch
				threshold will be merged to a single one. <br />
				Two arguments are needed for the "merge" command: the time threshold (in symbolic units, e.g.: <b>1/32</b> merges all the
				chords whose duration is less or equal to 1/32) and the pitch threshold (in cents).
				If any of the two threshold is set as negative, this means that there will be no corresponding merging: leave the time threshold as negative
				if you only want to merge in the pitch direction, leave the pitch threshold as negative if you only want to merge chords in the time coordinate. <br />
				Two additional optional arguments can be given specifying, respectively: the time merging policy (-1 = merge towards the left chord,
				0 = split small chord's duration between left and right chords, 1 = merge towards the right chord), the pitch merging policy (-1 = set pitch to the bottommost
				pitch, 0 = set pitch to the average of pitches, 1 = set pitch to the topmost pitch).
				The merging policies are optional parameters: if you don't specify them, by default they are 0 (= merge to the average). <br />
				If an optional "selection" symbol is put in front of the time threshold argument, the merging is performend only on the current selection,
				otherwise it is performed on the whole score.
			</description>
		</method>
		<method name="mute">
			<arglist />
			<digest>
				Mute selected items
			</digest>
			<description>
				The <m>mute</m> message will set all selected items as "muted", so that they will not be sequenced while playing.
			</description>
		</method>
		<method name="name">
			<arglist />
			<digest>
				Clear names of selected items
			</digest>
			<description>
				Clears all the names of all selected items.
			</description>
		</method>
		<method name="name">
			<arg name="names" optional="0" type="llll" />
			<digest>
				Append name(s) to selected items
			</digest>
			<description>
				Works like the <m>name</m> message, but appends the given names
				to the already existing ones (see <m>name</m>).
			</description>
		</method>
		<method name="name">
			<arg name="names" optional="0" type="llll" />
			<arg name="incremental_specification" optional="1" type="llll" />
			<arg name="progeny_specification" optional="1" type="llll" />
			<digest>
				Assign name(s) to selected items
			</digest>
			<description>
				The word <m>name</m>, followed by a symbol, a number or an llll, assigns such content as names for the
				selected notation items. <br />
				If markers are selected, an additional specification can be given in order to name them with an incremental naming system,
				keeping the first one of the introduced names, and then adding an integer as second name, so that the overall name is unique
				inside the <o>bach.roll</o>. The additional specification must be given in the form of the following llll: <b>(incremental 1)</b>,
				to be appended at the end of the message. For instance <b>name foo (incremental 1)</b> will name all selected elements as "foo",
				but will name all selected markers as "foo 1", "foo 2", and so on (unless one of such names was already taken, and thus it is skipped
				to guarantee the unicity). <br />
				If a <b>(progeny 1)</b> specification is added and chords are selected, not only the chord name is changed, but also the name of all its notes.
				This is handy for instance, if one needs to send <b>name (progeny 1)</b> to delete all names of selected chords and notes.
			</description>
		</method>
		<method name="onset">
			<arg name="onset" optional="0" type="number/llll/anything" />
			<digest>
				Modify the onset of selected markers
			</digest>
			<description>
				The word <m>onset</m>, followed by a number, sets the new onset, in milliseconds, for all
				the selected markers or pitch breakpoints. This absolute onset can be replaced by an llll containing a relative modification of the
				existing onset, or by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>(<m>value</m> <m>function</m>)</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>(100 minus)</b> removes 100 to the current
				value of the parameter, while <b>(2. times)</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m>, <m>tail</m> (position of the
				note end, in ms), <m>voice</m> (voice number). For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number)
				and <m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = (cents - 6000) / 100 + 2000 * (voice - 1)</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="openslotwin">
			<arg name="slot_number_or_name" optional="0" type="atom" />
			<digest>
				Open a slot window
			</digest>
			<description>
				If a single note is selected, an <m>openslotwin</m> message, followed by the number of the slot whose window should be open,
				opens the corresponding slot window. If more notes are selected, nothing happens.
				Instead of the slot number, you can use slot names, so you can set a symbol as argument containing the name of the slot whose window should
				be open.
			</description>
		</method>
		<method name="overtype">
			<arg name="region" optional="0" type="llll" />
			<arg name="content" optional="0" type="llll" />
			<digest>
				Replace score content at given points
			</digest>
			<description>
				You can use the <m>overtype</m> message to replace the score content at given points in time for given voices, independently
				from the measure barline boxing. Somehow, this operation corresponds to putting a cursor somewhere in the score, and start "typing"
				some content. <br />
				The first argument for the <m>overtype</m> message is the overtyping region, in the form
				<b>(<m>START_TIMEPOINT</m> <m>optional_END_TIMEPOINT</m>)</b>, where each one of the two elements must be in the timepoint syntax
				(see below). If the second timepoint is not given, then the duration of the overtyping region will be determined by the duration
				of the overtype content. Notice that the timepoints also include the voices in which the overtype must occurr. <br />
				The second argument is indeed the content to be overtyped. This is assumed to be in the score gathered-syntax, but without any
				measure llll levels. Somehow, it is assumed to be an "unboxed" score content in gathered syntax, although rhythmic tree levels might
				also appear in such content. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
			</description>
		</method>
		<method name="pause">
			<arglist />
			<digest>
				Pause
			</digest>
			<description>
				The <m>pause</m> message pause any ongoing playing, if <o>bach.score</o> was in play mode (nothing happens otherwise).
				When paused, the play head cursor is updated to its last reached position while playing, so that a new play will begin by default
				at that position.
			</description>
		</method>
		<method name="pixeltotime">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="pixel_position" optional="0" type="float" />
			<arg name="snap_type" optional="1" type="symbol" />
			<digest>
				Convert a pixel position into a time position
			</digest>
			<description>
				The <m>pixeltotime</m> message converts a position given in pixels (as argument) into a temporal position, output both in milliseconds and
				as timepoints, representing the time corresponding to the inserted pixel position.
				The output answer is sent through the playout, and its syntax is: <b>time <m>time_position_ms</m> <m>VOICE1</m> <m>VOICE2</m>...</b>, where the
				two elements following the "timeatpixel" symbol are the starting and ending point of the hypotetical domain in milliseconds,
				and each <m>VOICE</m> is an llll containing the information about the timepoints of each voice (i.e. at which measure and point in measure,
				for each voice, fall on the introduced pixel): its syntax is: <b>(<m>measure_number</m> <m>sym_onset</m>)</b>, where <m>measure_number</m> is the measure number of the
				measure where the pixel lies, and <m>sym_onset</m> is the symbolic onset (point inside the measure) to which the pixel correspond.
				If the pixel does not fall exactly on a chord, by default, the timepoints are output by properly interpolating the timepoints of the chords whose onset are
				immediately at left and at right of the pixels. On the other hand, one can modify this behavior by introducing a final symbol argument (the "snap" type), which can be one
				of the followings: <br />
				- <b>left</b>: always return the timepoint of the chord whose onset falls immediately at left of the inserted pixel. <br />
				- <b>right</b>: always return the timepoint of the chord whose onset falls immediately at right of the inserted pixel. <br />
				- <b>nearest</b>: return the timepoint of the chord whose onset falls immediately either at left or at right of the inserted pixel, depending on which onset is nearest to the pixel position. <br />
				- <b>interp</b> (default): interpolate between left and right chord (as explained above). <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="play">
			<arg name="offline_mode" optional="1" type="symbol" />
			<arg name="start_ms" optional="1" type="float" />
			<arg name="end_ms" optional="1" type="float" />
			<digest>
				Play
			</digest>
			<description>
				The <m>play</m> message plays a portion or all the <o>bach.score</o>.
				"Playing" means that <o>bach.score</o> sends from the "playout" outlet, at the timing corresponding to each chord onset,
				the information about all the chord, or about all the notes of the chord (depending on the <m>playmode</m> attribute, to which you
				should refer to know more). Rests are sequenced if the <m>playrests</m> attribute is set to 1.
				Markers are sequenced if the <m>playmarkers</m> attribute is set to 1. Tempi are sequenced
				if the <m>playtempi</m> attribute is set to 1. Measure starting barlines (along with the corresponding measureinfo) are sequenced if
				the <m>playmeasures</m> attribute is set to 1. <br />
				The sequencing takes into account the solo and mute state of each element (see <m>solo</m>, <m>unsolo</m>, <m>mute</m> and <m>unmute</m> messages):
				if elements are muted, they will not be sequences; if some elements are set as "solo", just those elements will be sequenced.
				If multiple chords or notes are simultaneous, the order is from topmost voice to bottommost voice, then from lowest note to highest note.
				Sequencing can be controlled with a variable speed via the <m>clock</m> message and the <o>setclock</o> object.
				The <m>play</m> message, without any further argument, plays the <o>bach.score</o> from the current playhead cursor position
				(by default: the beginning of the <o>bach.score</o>) to the end. <br />
				If you put as first argument the "offset" symbol, all the playing will be done in non-real-time mode, i.e. with no sequencing involved; playing messages
				will be still output from the playout, but one after another, "immediately". <br />
				If you give a single numeric argument, it will be the starting point in milliseconds
				of the region to be played: <o>bach.roll</o> will play from that point to the end. If you give two numeric arguments, they will be the starting and
				ending point in milliseconds of the region to be played.
				Each one of such numbers can be replaced by a <o>bach.score</o> timepoint. <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="playselection">
			<arg name="offline_mode" optional="1" type="symbol" />
			<digest>
				Only play selected items
			</digest>
			<description>
				The <m>playselection</m> message only plays the selected content. It works exactly like <m>play</m>, but it starts playing
				at the beginning of the selection, and ends playing at the end of the last selected item. Only selected items are sequenced.
				Mute and solo status are also taken into account (see <m>play</m>). <br />
				If you put as first argument the "offset" symbol, all the playing will be done in non-real-time mode, i.e. with no sequencing involved; playing messages
				will be still output from the playout, but one after another, "immediately", in the low-priority queue. <br />
			</description>
		</method>
		<method name="quantize">
			<arg name="selective_quantize_options" optional="1" type="list" />
			<digest>
				Send quantization data
			</digest>
			<description>
				The <m>quantize</m> message outputs all the content of <o>bach.score</o> from the first outlet,
				in a form which is understandable by <o>bach.quantize</o>, for a score-to-score quantization.
				You should just connect the first outlet of <o>bach.score</o> to the second inlet of <o>bach.quantize</o>, to have this latter
				properly get all the information (refer to the <o>bach.quantize</o> help and documentation; also see #quantize in the help center). <br />
				By default, the <m>quantize</m> message also outputs all the header information, but as for the <m>dump</m> message,
				if one needs to only dump specific header elements, the <m>quantize</m> message may also accept a list of symbols referring to them.
				Namely, the possibilities are the following ones: "keys", "clefs", "voicenames", "midichannels", "markers", "slotinfo", "command".
				Also the "body" symbol should always be added, in order to also dump the music content (otherwise no real quantization can be performed).
				For instance, <b>quantize keys slotinfo body</b> will dump the key signatures, the slotinfo and will send the quantization data of the
				music content.
			</description>
		</method>
		<method name="read">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Open file
			</digest>
			<description>
				The <m>read</m> message will open any file that <o>bach.score</o> is able to read.
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the file to open.
				Supported file types are: <br />
				- Previously saved <o>bach.score</o> content, either in native or in text format (see <m>write</m> and <m>writetxt</m> messages).
				These might include also files exported in bach format from OpenMusic or PWGL. <br />
				- MusicXML files (no importing options are needed). <br />
				MIDI files are not imported directly into bach score. They should be imported into a <o>bach.roll</o>, possibly with a <b>read (markmeasures 1)</b> specification,
				and then quantized with <o>bach.quantize</o>.
			</description>
		</method>
		<method name="realtime">
			<arg name="realtime_mode" optional="0" type="int" />
			<digest>
				Toggle real-time mode
			</digest>
			<description>
				The <m>realtime 1</m> message will toggle the real-time mode, i.e. will change some attribute values in order to
				disable the play highlight, the undo system and the legend. This will increase the object performance for real-time tasks.
				A subsequent <m>realtime 0</m> message will disable real-time mode, reverting the value of all attribute to the previous ones.
			</description>
		</method>
		<method name="redo">
			<arglist />
			<digest>
				Perform a redo step
			</digest>
			<description>
				A <m>redo</m> message will perform a redo step.
			</description>
		</method>
		<method name="refresh">
			<arglist />
			<digest>
				Force recomputation and redraw
			</digest>
			<description>
				The <m>refresh</m> message forces the recomputation of all the features and forces the object box to be redrawn.
			</description>
		</method>
		<method name="resetslotinfo">
			<arglist />
			<digest>
				Reset the slotinfo to the default one
			</digest>
			<description>
				A <m>resetslotinfo</m> message will reset the all the <m>slotinfo</m> to the original one.
				Beware that this may entail slot type conversions, which might result in loss of data if slot types are not compatible.
				The slotinfo is the information about the types, ranges and many further characteristics of each one of the slots.
				For bach.roll and bach.score, it is a global information: changing the slotinfo for a given slot will
				affect such slot for all the notes inside the notation object. See the <m>llll</m> method to know more about its syntax.
			</description>
		</method>
		<method name="resetwidthfactors">
			<arg name="start_measure_number" optional="1" type="int" />
			<arg name="end_measure_number" optional="1" type="int" />
			<digest>
				Reset measure width factors
			</digest>
			<description>
				The <m>resetwidthfactors</m> will revert all measure width factors to 1.
				Measure width factors are local width factors defined inside the measureinfo (see below) which alters the spacing width only for a given measure
				(To be more precise: they alter measure width for all the region of measures, throughout all voices, where the given measure is, and extended
				at left and at right until a synchronous barline is found in all voices. In standard cases, where voices have the same tempi and time signatures,
				this correspond to the vertical range of measures having the same number, in all voices.)
				A value of 1 corresponds to standard spacing, any lower values correspond
				to a compression, any higher values correspond to an expansion. The <m>resetwidthfactors</m> message revert such values to the 1 (default).
				If no arguments are given, width factors are reset for the entire score.
				If two arguments are given, they are expected to be integers, representing the measure numbers of the leftmost and rightmost
				measure whose width factors should be reset (in any voice).
				If just one argument is given, it is expected this represents the leftmost measure number, and the rightmost boundary is considered to be
				the end of the score. <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="respell">
			<arglist />
			<digest>
				Respell selected notes automatically
			</digest>
			<description>
				The <m>respell</m> message reset the enharmonicity ("graphics") specification of each selected note to a default one.
			</description>
		</method>
		<method name="sample">
			<arg name="num_samples_or_delta" optional="0" type="number/llll" />
			<arg name="ms_or_timepoint" optional="1" type="symbol" />
			<digest>
				Sample score data
			</digest>
			<description>
				The <m>sample</m> message, followed by a integer (the number of sampling points),
				samples the note data (exactly as <m>interp</m> does) throughout the score, at the (uniformly taken) sampling point.
				The answer is sent through the playout in the following form: <b>sample (<m>t1</m> <m>t2</m>...) (<m>RES1</m> <m>RES2</m>...)...</b>
				where each <m>t</m> is an instant in milliseconds, and each <m>RES</m> is the result of the <m>interp</m> message performed
				on such instant (see <m>interp</m> to know more). <br />
				If the <b>ms</b> symbol is given as second argument, the first numeric argument (which can also be non-integer, in
				this case) is considered to be the distance between samples (in milliseconds), and not the number of samples. <br />
				If the <b>timepoint</b> symbol is given as second argument, the first argument is expected to be an interval expressed in the
				timepoint syntax; the score will be sampled at multiples of such timepoint. For instance, a timepoint of <b>(1)</b> will sample
				the score at the beginning of each measure, while a timepoint of <b>(0 1/4)</b> will sample the score at each quarter note;
				a timepoint of <b>(4 0 1/4)</b> will sample the score at each quarter note, taking the fourth voice as "master" to consider
				the timepoints (which might be crucial if voices have different tempi or time signatures). If no voice number is specified, the
				voice having the most measures is considered. Extended timepoint syntax (with floating point numbers) is not supported. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
			</description>
		</method>
		<method name="score2roll">
			<arglist />
			<digest>
				Send data for converting content into a <o>bach.roll</o>
			</digest>
			<description>
				A <m>score2roll</m> message will trigger the output from the first outlet of information which should be given to the
				<o>bach.score2roll</o> first inlet, in order to have it convert such information into a <o>bach.roll</o> object.
			</description>
		</method>
		<method name="sel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Select items
			</digest>
			<description>
				The word <m>sel</m> add some notation items to the current selection. In the basic behavior,
				the word must be followed by four elements, specifying: <br />
				- the starting temporal point of the selection, in milliseconds (leave <b>nil</b> or <b>()</b> if you want to select from the beginning); <br />
				- the ending temporal point of the selection, in milliseconds (leave <b>nil</b> or <b>()</b> if you want to select until the end); <br />
				- the minimum pitch of the selection, in cents (leave <b>nil</b> or <b>()</b> if you don't want to put a lower bound on pitches); <br />
				- the maximum pitch of the selection, in cents (leave <b>nil</b> or <b>()</b> if you don't want to put an upper bound on pitches). <br />
				Both the starting and the ending temporal point of the selection can be substituted by timepoints. <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				Other selection modes are possible: <br />
				- If the word <m>sel</m> is followed by the symbol <b>all</b>, all notes, chords and markers are selected. <br />
				- If the word <m>sel</m> is followed by the symbol <b>markers</b>, all markers are selected. <br />
				- If the word <m>sel</m> is followed by the symbol <b>measure</b> followed by one or two integers (representing an address), a certain measure is selected.
				The full syntax for the integers is: <m>voice_number</m> <m>measure_number</m>. If just one integer is given, the voice number is considered
				to be by default 1.
				For instance, <b>sel measure 3</b> selects the third measure (of first voice), while <b>sel measure 2 3</b> does the same with the second voice.
				Negative positions are also allowed, counting backwards. Multiple measures can be selected at once, provided that instead of a list integers one gives
				a sequence of wrapped lists of integers, for instance <b>sel measure (2 3) (2 4) (2 7) (5 1)</b>.<br />
				- If the word <m>sel</m> is followed by the symbols <b>measure range</b>, a certain measure range is selected.
				If a single argument (after the <b>measure range</b> symbols) is given, this is either a single number, representing the measure number to be selected,
				in all voices, or an llll in the form <b>(<m>start_meas_num</m> <m>end_meas_num</m>)</b>, representing the range of measures (from the one
				whose number is <m>start_meas_num</m> to the one whose number is <m>end_meas_num</m>) to be selected, in all voices.
				If a second argument is given, this is expected to be an llll containing the numbers of the voices for the selection
				(default being <b>()</b>, meaning: all voices). For instance <b>selmeasures (4 12) (1 2 5)</b> selects the range of measures
				from 4 to 12 only in voices 1, 2 and 5. If a single number is given instead of the voices llll, the selection is performed only
				for the voice having such number.
				- If the word <m>sel</m> is followed by the symbol <b>chord</b> followed by one, two or three integers (representing an address), a certain chord is selected.
				The full syntax for the integers is: <m>voice_number</m> <m>measure_number</m> <m>chord_index</m>. If less elements are given, the first ones are considered
				to be by default 1's. The chord index is the counting index of the chord inside the measure.
				For instance, <b>sel chord 2 3</b> selects the third chord of second measure (of first voice), while <b>sel chord 4 2 3</b> does the same with the fourth voice.
				Negative positions are also allowed, counting backwards. Multiple chords can be selected at once, provided that instead of a l ofist integers one gives
				a sequence of wrapped lists of integers, for instance <b>sel chord (2 3) (4 1 2) (5 6 1)</b>.<br />
				- If the word <m>sel</m> is followed by the symbol <b>note</b> followed by one, two, three or four integers (representing an address), a certain note is selected.
				The full syntax for the integers is: <m>voice_number</m> <m>measure_number</m> <m>chord_index</m> <m>note_index</m>. If less elements are given, the first ones are considered
				to be by default 1's. The chord index is the counting index of the chord inside the measure; the note index is taken from the lowest to the highest.
				For instance, <b>sel note 4 2 3</b> selects the third note of second chord of fourth measure (of first voice), while <b>sel note 5 4 2 3</b> does the same with the fifth voice.
				Negative positions are also allowed, counting backwards. Multiple notes can be selected at once, provided that instead of a list integers one gives
				a sequence of wrapped lists of integers, for instance <b>sel note (5 2 4 3) (1 1 1 -1)</b>.<br />
				- If the word <m>sel</m> is followed by the symbols <b>note if</b>, or <b>marker if</b>, or <b>breakpoint if</b> followed by a
				condition to be verified, a conditional selection on notes,  markers or pitch breakpoints (respectively) is performed.
				and notes/markers/pitch breakpoints matching such condition are selected.
				The condition must be an expr-like expression returning 1 if notes have to be selected, 0 otherwise.
				You can use symbolic variables inside such expressions. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m>, <m>tail</m> (position of the
				note end, in ms), <m>voice</m> (voice number). For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number)
				and <m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance <b>sel note if velocity == 100</b> selects all notes whose
				velocity is exactly equal to 100, while <b>round(cents / 100.) % 12 == 0</b> select all the C's.<br />
				- If the word <m>sel</m> is followed by any other symbol or sequence of symbols, these are interpreted as names, and the notation items
				matching all these names (or a single name, if just one symbol is entered) are selected. <br />
			</description>
		</method>
		<method name="sendcommand">
			<arg name="command_number" optional="0" type="int" />
			<digest>
				Send a command to selected items
			</digest>
			<description>
				The <m>sendcommand</m> message sends a given command to the selected notation items,
				whose content is then immediately output from the playout in playout syntax (see <m>dumpselection</m>)
				but with a router different from the standard playout syntax router, i.e. the router defined by the given command.
				It expects as argument the number of the command to be sent (1 to 5).
				You should not rely on the order of the output messages.
				Commands are a mechanism to output selected content with given labels.
				You can define up to 5 user commands which will send user-defined messages upon a note or chord evaluation.
				The idea is that you can map each command to a hotkey: if one triggers the hot key (when something is selected),
				this will cause the output of the notes/chord content from the playouts, exactly as if such notes/chords were played.
				The only difference with the simple play situation, is that the router of those messages is not the "note" or "chord" symbol,
				but rather the custom symbol defined at the command declaration. This allows you to properly detect and route the message.
				<br /> <br />
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="setcursor">
			<arg name="position" optional="0" type="llll" />
			<digest>
				Move the playhead cursor
			</digest>
			<description>
				The <m>setcursor</m> message moves the playhead cursor to a specific position, given as argument in milliseconds (if a single number is entered)
				or as a timepoint (if an llll is entered). <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				The <m>setcursor</m> message can also directly move the playhead cursor to the position where a marker is. In this case, the syntax is
				<b>setcursor <m>MARKER_NAME_OR_NAMES</m></b>, where <m>MARKER_NAME_OR_NAMES</m> is a single name or plain list of names.
				The playhead cursor is moved to the first marker matching all the names (if any).
			</description>
		</method>
		<method name="setmeasureparameters">
			<arg name="measure" optional="0" type="llll" />
			<arg name="" optional="0" type="" />
			<arg name="specifications" optional="0" type="llll" />
			<digest>
				Set measure parameters
			</digest>
			<description>
				The <m>setmeasureparameters</m> will set specified measure parameters for a given measure.
				The measure number is given as first argument: if it is a single integer, measure parameters are applied to all measure (throughout all voices)
				having such measure number; if it is a wrapped list in the form <b>(<m>measure_number</m> <m>voice_number</m>)</b>, measure parameters are only applied
				to the measure identified by the <m>measure_number</m> and for the voice identified by the <m>voice_number</m>.
				Any further argument is an <m>SPECIFICATION</m> llll, specifying the measure parameter to be changed, yielding a complete syntax of
				<b>setmeasureparameters <m>MEASURE</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...</b>. <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</method>
		<method name="showcursor">
			<arglist />
			<digest>
				Show the playhead cursor
			</digest>
			<description>
				The <m>showcursor</m> message shows the playhead cursor, if it was hidden.
				In any case, during playback the cursor is always visible.
			</description>
		</method>
		<method name="snappitchtogrid">
			<arglist />
			<digest>
				Snap selected notes' pitches to the current microtonal grid
			</digest>
			<description>
				The <m>snappitchtogrid</m> message snaps the midicents of each selected note to the
				currently active microtonal grid (see the <m>tonedivision</m> attribute).
			</description>
		</method>
		<method name="solo">
			<arglist />
			<digest>
				Set selected items as solo
			</digest>
			<description>
				The <m>solo</m> message will set all selected items as "solo". If solo items exist, they are the only one sequenced during playing.
			</description>
		</method>
		<method name="split">
			<arg name="num_parts" optional="0" type="int" />
			<arg name="separate" optional="1" type="symbol" />
			<digest>
				Split selected chords
			</digest>
			<description>
				The <m>split</m> message splits each selected chord into a number of pieces given as argument.
				By default, sequences of completely tied chords are split as a whole (e.g. splitting a 1/4 chord tied to an 1/8 chord into 3 pieces, will yield
				three 1/8 chords); you can individually split each one of the chords instead by adding the "separate" symbol as second argument.
			</description>
		</method>
		<method name="stop">
			<arglist />
			<digest>
				Stop
			</digest>
			<description>
				The <m>stop</m> message stops any ongoing playing, if <o>bach.score</o> was in play mode (nothing happens otherwise).
			</description>
		</method>
		<method name="subscore">
			<arg name="voices" optional="0" type="llll" />
			<arg name="measure_range" optional="0" type="llll" />
			<arg name="selective_options" optional="1" type="llll" />
			<digest>
				Output a portion of <o>bach.score</o>
			</digest>
			<description>
				The <m>subscore</m> message outputs the gathered syntax information of a portion of the <o>bach.score</o>,
				namely it outputs only certain voices and within a certain time interval.
				The syntax for the <m>subscore</m> message is:
				<b>subscore <m>VOICES</m> <m>MEASURE_RANGE</m> <m>optional:SELECTIVE_OPTIONS</m></b>,
				<m>VOICES</m> is an llll of the kind <b>(<m>voice_number1</m> <m>voice_number2</m>...)</b>
				containing the number of the voices to be output; leave <b>nil</b> or <b>()</b> if you want to output all voices. <br />
				<m>MEASURE_RANGE</m> is an llll of the kind <b>(<m>start_measure_number</m> <m>end_measure_number</m>)</b> representing the
				range of measures that has to be output (the defined one are included).
				Leave such list as <b>nil</b> or <b>()</b> if you want this range to be all the measures of the <o>bach.score</o>.
				Otherwise <m>start_measure_number</m> is the number of the starting measure in the range, and
				<m>end_measure_number</m> is the number of the ending measure in the range; leave any negative value
				for <m>end_ms</m> if you want the portion of <o>bach.score</o> to be output to go till the end of the notation object. <br />
				The third llll, <m>optional:SELECTIVE_OPTIONS</m>, is optional, and if given might contain a symbol or list of symbols
				which handles what part of the header should be dumped. By default all header is output. Options for these symbols are exactly
				the same as for the <m>dump</m> message (see its documentation to know more). For instance <b>subscore (4 5) (4 9) (clefs markers body)</b>
				output voices 4 and 5 in the portion of the <o>bach.score</o> going from measure 4 to measure 9, and outputs in addition to the musical content (the body)
				the information about clefs and the markers.
				Leave <b>(body)</b> as third parameter if you only want to dump the music content, and no header information
			</description>
		</method>
		<method name="testdomain">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="domain_start" optional="0" type="llll" />
			<digest>
				Test hypotetical domain
			</digest>
			<description>
				The <m>testdomain</m> message forces <o>bach.score</o> to output from the playout a hypotetical domain,
				given a fixed domain starting point. The idea is that the user asks <o>bach.score</o> which would be the complete domain if such domain
				started at a given point.
				The hypotetical starting point of the domain is given as argument, and can be expressed either as absolute millisecond position (a single floating point
				number) or as a timepoint (an llll).
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				The syntax of the output answer is: <b>testdomain <m>start_ms</m> <m>end_ms</m> <m>VOICE1</m> <m>VOICE2</m>...</b>, where the
				two elements following the "testdomain" symbol are the starting and ending point of the hypotetical domain in milliseconds,
				and each <m>VOICE</m> is an llll containing the information about the timepoints of each voice (i.e. at which measure and point in measure,
				for each voice, the domain would start and end): its syntax is: <b>((<m>start_measure_number</m> <m>start_sym_onset</m>)
				(<m>end_measure_number</m> <m>end_sym_onset</m>) <m>total_sym_duration</m>)</b>, where <m>start_measure_number</m> is the measure number of the
				measure where the domain would start, and <m>start_sym_onset</m> is the symbolic onset (point inside the measure) at which the domain start would happen;
				<m>end_measure_number</m> is the measure number of the
				measure where the domain would end, and <m>end_sym_onset</m> is the symbolic onset (point inside the measure) at which the domain end would happen;
				finally <m>total_sym_duration</m> is the global duration the domain would have, in symbolic units. <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="tie">
			<arg name="tie" optional="0" type="number/llll/anything" />
			<digest>
				Modify the ties of selected items
			</digest>
			<description>
				The word <m>tie</m>, followed by an integer, sets the new tie status for all the selected notation items.
				Such integer should be 0 for "no tie", 1 for "tie starts", 2 for "tie ends", 3 for "tie stards and ends".
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded.
				Any of the numbers can be replaced by an llll containing a relative modification of the existing velocity.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>(<m>value</m> <m>function</m>)</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>(100 minus)</b> removes 100 to the current
				value of the parameter, while <b>(2. times)</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m>, <m>tail</m> (position of the
				note end, in ms), <m>voice</m> (voice number). For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number)
				and <m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = (cents - 6000) / 100 + 2000 * (voice - 1)</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="timepoint">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="position" optional="0" type="number/llll" />
			<digest>
				Perform conversions between timepoint and millisecond syntaxes
			</digest>
			<description>
				The <m>timepoint</m> message, either followed by a single number, considered as milliseconds position,
				or by an llll representing the timepoint syntax, will convert the inserted time position into milliseconds and timepoint for
				all voices of the current score (different voices might end up having different timepoints only if tempi or timesignatures are not synchronous).
				The output answer is sent through the playout, and its syntax is: <b>timepoint <m>ms</m> <m>TP_voice1</m> <m>TP_voice2</m>...</b>, where the
				<m>TP_voice</m> are lllls in timepoint syntax. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="timetopixel">
			<arg name="query_label" optional="1" type="llll" />
			<arg name="position" optional="0" type="llll" />
			<digest>
				Convert a time position into a pixel position
			</digest>
			<description>
				The <m>timetopixel</m> message converts a position given (as argument) in milliseconds or in the timepoint syntax,
				into a position given in pixels, representing
				the pixel at which such time position happens, in the current domain.
				The output answer is sent through the playout, and its syntax is: <b>pixel <m>pixel_position</m></b>, where the last element
				is indeed the position in pixels corresponding to the inserted position in milliseconds.
				Such element can be replaced by a <o>bach.score</o> timepoint. <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				Moreover, each query can have in bach as very first argument a label, kept inside the query answer,
				which can be useful to retrieve queries separately (for instance to keep track of queries coming from different threads).
				To assign a label to a query, you have to put as very first argument after the query message (before any other query argument) an llll in the form
				<b>(label <m>label_name</m>)</b>, where <m>label_name</m> is a symbol you want to assign to the label.
				When the answer of a labelled query is output from the playout, after the first router symbol, the label will appear, thus yielding a
				general form <b><m>query_router_symbol</m> <m>label_name</m> <m>QUERY_ANSWER</m></b>. Just to make an example,
				the answer of <b>pixeltotime (label john) 6000</b> might be something like <b>pixel john 300.</b>.
				It works accordingly for any other query.
				<br /> <br />
			</description>
		</method>
		<method name="undo">
			<arglist />
			<digest>
				Perform an undo step
			</digest>
			<description>
				An <m>undo</m> message will perform an undo step.
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Copy
			</digest>
			<description>
				Copies into the global clipboard selected musical content or slot data.
				If no argument is given, the current selected measures are copied. If a "slot" symbol is given as argument,
				the content of the open slot window (if any) is copied; if in addition to the "slot" symbol an integer
				is given, such integer is the number of the slot whose content is copied (this will work even if no slot window is open);
				finally, this integer can be substituted by the "all" symbol to copy the content of all slots.
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Paste
			</digest>
			<description>
				Pastes the content contained in the global clipboard. <br />
				If the clipboard contains some measures, the measure are pasted over the selected ones. <br />
				If the clipboard contains slot content, the slot content is applied to the selected notes. If an integer argument is given, and a single slot
				was copied, the slot content is applied only to the specified slot number. This number can be replaced with the "active" symbol, and the
				slot content will be applied to the open slot window.
			</description>
		</method>
		<method name="unlock">
			<arglist />
			<digest>
				Unlock selected items
			</digest>
			<description>
				The <m>unlock</m> message will unlock all locked selected items, in order to allow their editing anew.
			</description>
		</method>
		<method name="unlock">
			<arg name="slot" optional="1" type="symbol" />
			<arg name="slot_number" optional="1" type="int/symbol" />
			<digest>
				Cut
			</digest>
			<description>
				Cuts, and puts global roll clipboard, selected musical content or slot data.
				The behavior and arguments of <m>cut</m> are exaclty as <m>copy</m>, with the addition that the copied
				content is subsequently deleted (see <m>copy</m> to know more).
			</description>
		</method>
		<method name="unmute">
			<arglist />
			<digest>
				Unmute selected items
			</digest>
			<description>
				The <m>unmute</m> message will remove the "mute" status to any muted selected items, so that they will be sequenced anew while playing.
			</description>
		</method>
		<method name="unsel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Involutively select items
			</digest>
			<description>
				The message <m>select</m> works as <m>sel</m> but in an involutive manner: i.e. it selects non-selected items
				and deselect already selected items. This is essentially what happens when you draw a
				selection rectangle on the notation object, and then draw another overlapping one keeping the Shift key pressed.
				Refer to the message <m>sel</m> to know more about the syntax, since it is exactly the same.
				The only exception is for the <m>select all</m> message, which does not work involutively and always select all the notation items.
			</description>
		</method>
		<method name="unsel">
			<arg name="arguments" optional="0" type="llll" />
			<digest>
				Deselect items
			</digest>
			<description>
				The message <m>unsel</m> works in the opposite way of the message <m>sel</m>, i.e. deselect
				notation items (removes them from the current selection). Refer to the message <m>sel</m> to know more about the
				syntax, since it is exactly the same.
			</description>
		</method>
		<method name="unsolo">
			<arglist />
			<digest>
				Remove solo status from selected items
			</digest>
			<description>
				The <m>unsolo</m> message will remove the "solo" status to any selected items having it.
			</description>
		</method>
		<method name="velocity">
			<arg name="velocity" optional="0" type="number/llll/anything" />
			<digest>
				Modify the velocity of selected items
			</digest>
			<description>
				The word <m>velocity</m>, followed by a number, sets the new velocity (from 1 to 127) for all
				the selected notation items.
				If a list of numbers is given as arguments, this is applied to selected chords notewise: bottommost note will be assigned
				the first value, the one above will be assigned the next one, and so on. If less values than selected notes in the chord
				are given, last value is padded.
				Any of the numbers can be replaced by an llll containing a relative modification of the existing velocity.
				If a single number is inserted, this can be replaced by a generic equation.
				All parameters, except for <o>bach.score</o>'s timepoints, also support a relative modification syntax, which modifies the existing values instead
				Relative modifications of a parameter are handled via lllls of the type <b>(<m>value</m> <m>function</m>)</b>, where
				the <m>function</m> is one of the following symbols: "plus", "minus", "times", "div". Such modification applies the corresponding
				function to the current value of the parameter and the inserted <m>value</m>. For instance, <b>(100 minus)</b> removes 100 to the current
				value of the parameter, while <b>(2. times)</b> multiplies it by two.
				<br /> <br />
				All separate parameters, except for measureinfo, ties and slots, can also be modified via a generic equation. In order to do so,
				the message symbol must be followed by an <m>=</m> sign (with spaces before and after it), and then by the desired equation.
				The standard symbolic variables are available. <br />
				Symbolic variables are variables that can be used in the conditional selection or parameter modification processes.
				These are: <m>onset</m> (in ms), <m>duration</m> (in ms), <m>velocity</m>, <m>cents</m>, <m>tail</m> (position of the
				note end, in ms), <m>voice</m> (voice number). For <o>bach.score</o> you can also use: <m>symduration</m> (symbolic rational duration),
				<m>symonset</m> (symbolic rational onset inside the measure), <m>symtail</m> (sum of the two previous), <m>measure</m> (the measure number)
				and <m>tie</m> (which is 1 if a tie starts, 2 if a tie ends and 3 if a tie both starts and ends, 0 otherwise). <br />
				In addition, you also have the <m>index</m> symbol, corresponding to the index of the item: the index of the note in the chord (bottom-up),
				the index of the chord in the measure or voice (left to right), the index of the measures, voices, markers, pitch breakpoints, etc.
				(all left to right). In case you need to distinguish between chord index and note index, for a given note, you can explicitly use the
				<m>chordindex</m> or <m>noteindex</m> symbols. <br />
				For instance, one could define <b>velocity = duration / 100. + onset * 0.01</b> or <b>cents = cents + 200</b>, or
				<b>onset = (cents - 6000) / 100 + 2000 * (voice - 1)</b>.
				The equation syntax extends in a sense the relative modification syntax; however it is applied to the globality of the selection, and
				one cannot apply different equations to different notes inside the chord.
				<br /> <br />
			</description>
		</method>
		<method name="write">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Save file in native format
			</digest>
			<description>
				The <m>write</m> message saves all the <o>bach.score</o> content in native format (with extension .llll).
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
			</description>
		</method>
		<method name="writetxt">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Save file in text format
			</digest>
			<description>
				The <m>writetxt</m> message saves all the <o>bach.score</o> content in text format (with extension .txt).
				This will result in a readable text file, but it might also lead to some very slight loss of precision. This is usually negligible, but
				if it bothers you, use the <m>write</m> message instead.
				No limit in size is given for saving a file in text format (differently than what happens while outputting lllls as text in Max).
				The file name (as symbol) can be given as optional first argument. If no such symbol is given, a dialog box will pop up
				allowing the choice of the location and file name for saving.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="accidentalsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Accidentals Font
			</digest>
			<description>
				@description Sets the font used to display accidentals.
				The official notation bach font is "November for bach", created by Robert Piéchaud (www.poeticprocessing.net) and
				automatically loaded at bach startup. "November for bach" is a light version of the famous November font.
				The full November font covers a wide range of music symbols, from Renaissance to the XXI century, and gives a unique,
				warm and lively look to your music scores. It is fully compatible with Finale, Sibelius and other notation softwares.
				You can purchase November from this web address: www.klemm-music.de/notation/november/.
				Other supported fonts are: Accidentals (up to the eighth-tones), Tamburo (up to the quartertones),
				Maestro, Petrucci, Boulez, Engraver Font Set (up to the semitones).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidentals Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="accidentalsgraphic" get="1" set="1" type="int" size="1">
			<digest>
				Accidental Graphic
			</digest>
			<description>
				Sets the way of displaying accidentals: <br />
				- None: no accidental is displayed. <br />
				- Classical: accidentals are displayed with the classical symbols (sharps, flats...).
				This option is only available if <m>tonedivision</m> is 2, 4 or 8. <br />
				- Fraction: accidentala are displayed as fractions of tone (e.g. "-1/4" for quartertone flat or "+1/2" for
				an ordinary sharp). <br />
				- Unreduced Fraction: as the previous one, but fractions are never reduced. For instance, if <m>tonedivision</m> is
				48 one would have "+2/8" and not "+1/4". Denominator of each fraction is the <m>tonedivision</m>
				(thus a tonedivision 2 has denominators 2, as expected for standard sharps and flats). <br />
				- Cents: accidentals are displayed as cents differences with respect to the diatonic note.
				Remark that, unless <m>tonedivision</m> is 100, the displayed cents difference will not in general correspond to the
				real cents difference: the first one will be indeed a cents difference snapped to the chosen microtonal grid.
				For instance, if <m>tonedivision</m> is 8, a note having midicents 6027 will be displayed as a middle C with a "+25cents" accidental.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Graphic" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="accidentalspreferences" get="1" set="1" type="int" size="1">
			<digest>
				Accidental Preferences
			</digest>
			<description>
				Sets how non-natural notes should be represented: <br />
				- Auto: let bach choose a default representation. <br />
				- Sharps: always choose sharp accidentals (more precisely, in general: always
				choose a representation such that the displayed diatonic pitch is below the actual note). <br />
				- Flats: always choose flat accidentals (more precisely, in general: always
				choose a representation such that the displayed diatonic pitch is above the actual note). <br />
				- Custom: use a custom enharmonic table, defined via the <m>enharmonictable</m> attribute.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Accidental Preferences" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="additionalstartpad" get="1" set="1" type="float" size="1">
			<digest>
				Additional Start Pad
			</digest>
			<description>
				Sets an additional left pad to the domain display start, in pixels (rescaled according to the <m>vzoom</m>),
				This pad is located right after each clef, before the music content starts.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Additional Start Pad" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="admitdottedtuplets" get="1" set="1" type="int" size="1">
			<digest>
				Admit Dotted Tuplets
			</digest>
			<description>
				Toggles the possibility to have dotted tuplets in the score.
				The number of dots, in any case, has to respect the <m>maxdots</m> attribute.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Admit Dotted Tuplets" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="align" get="1" set="1" type="int" size="1">
			<digest>
				Proportional Spacing Alignment Mode
			</digest>
			<description>
				Sets the alignment mode for chords when the Proportional spacing <m>spacingtype</m> is selected: <br />
				- Stems: chords are aligned by their stem (whether or not it is displayed: see the <m>showstems</m> attribute). Two chords falling on the same time
				instant will have their stems vertically aligned. <br />
				- Notehead Center (default): means that chords are aligned by the center of the main notehead. This is similar to what happens in <o>bach.score</o>:
				two chords falling on the same time instant, one with stem up and one with stem down, will be aligned according to the position of their noteheads, and not
				the position of their stems. The noteheads will result aligned. <br />
				- Notehead End: chords are aligned by the ending point of their noteheads. In this case, the duration line perfectly spans the time duration of the notes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Proportional Spacing Alignment Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="allowbarlinelock" get="1" set="1" type="int" size="1">
			<digest>
				Allow Barline Lock
			</digest>
			<description>
				Toggles the ability to lock barlines (i.e. to fix measure widths).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Barline Lock" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowbeaming" get="1" set="1" type="int" size="1">
			<digest>
				Allow Beaming
			</digest>
			<description>
				Toggles the possibility to beam chords. By default, of course, this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Beaming" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowcopypaste" get="1" set="1" type="int" size="1">
			<digest>
				Allow Copy/Paste
			</digest>
			<description>
				Toggles the ability to copy and paste data via the interface copy/paste commands.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Copy/Paste" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowglissandi" get="1" set="1" type="int" size="1">
			<digest>
				Allow Glissando Breakpoints
			</digest>
			<description>
				Toggles the possibility, for duration lines, to have pitch breakpoints, creating glissando-like behaviors.
				If this is hidden, all breakpoints are not displayed.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Glissando Breakpoints" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowlock" get="1" set="1" type="int" size="1">
			<digest>
				Allow Lock
			</digest>
			<description>
				Toggles the ability to lock notation items.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Lock" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowmute" get="1" set="1" type="int" size="1">
			<digest>
				Allow Mute
			</digest>
			<description>
				Toggles the ability to mute notation items.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Mute" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowslothzoom" get="1" set="1" type="int" size="1">
			<digest>
				Allow Slot Horizontal Zooming
			</digest>
			<description>
				Toggles the ability to allow the horizontal slot zooming and navigation (via mousewheel and <m>Cmd</m>+mousewheel, as standard zoom)
				for slots of type function, 3dfunction, spat and dynfilter. However, for <o>bach.roll</o> and <o>bach.score</o>,
				if the slot is defined to be "temporal", no slot zooming will be allowed,
				as the zoom will be passed to the underlying notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Slot Horizontal Zooming" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="allowsolo" get="1" set="1" type="int" size="1">
			<digest>
				Allow Solo
			</digest>
			<description>
				Toggles the ability to set notation items as "solo".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Solo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="articulationsfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Articulations Font
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Articulations Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="autoclear" get="1" set="1" type="int" size="1">
			<digest>
				Autoclear
			</digest>
			<description>
				Toggles the ability to clear the notation object automatically when a new
				separate syntax information is entered, and a bang is sent through the first inlet.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autoclear" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autojump" get="1" set="1" type="int" size="1">
			<digest>
				Auto Jump To Next Chord While Editing
			</digest>
			<description>
				Toggles the ability to automatically jump to the next chord, while adding or modifying chords in the linear editing system.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auto Jump To Next Chord While Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="automessage" get="1" set="1" type="atom_array" size="10">
			<digest>
				Automatically Send Message When Changed
			</digest>
			<description>
				Sets a message which is sent automatically to the notation object
				each time any change happens in the interface (right after the bang is sent through the last outlet).
				Use this with caution, since it creates a sort of hidden feedback connection!
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Send Message When Changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="autoparserhythm" get="1" set="1" type="int" size="1">
			<digest>
				Parse Rhythm Automatically
			</digest>
			<description>
				Toggles the ability to automatically parse the rhythm inside each rhythmic tree level, e.g. rests and completely
				tied chords are automatically tried to be merged.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Parse Rhythm Automatically" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autosize" get="1" set="1" type="int" size="1">
			<digest>
				Automatically Adapt Number Of Voices
			</digest>
			<description>
				Toggles the ability to automatically adapt the number of voices of the
				notation object depending on the number of voice lllls given as input.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Adapt Number Of Voices" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="auxiliarystavescolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Auxiliary Staff Color
			</digest>
			<description>
				Sets the color of the auxiliary staves (the ones extending the standard G and F clefs above or below) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.4 0.4 0.4 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Auxiliary Staff Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="beamgracesequences" get="1" set="1" type="int" size="1">
			<digest>
				Beam Grace Sequences When Possible
			</digest>
			<description>
				Toggles the ability to beam sequences of grace chords, when possible.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Beam Grace Sequences When Possible" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="bgcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Background Color
			</digest>
			<description>
				Sets the color of the background in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="1. 1. 1. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="bgslotfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Background Slot Font Size
			</digest>
			<description>
				Sets the font size of background slots displayed as text (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="7" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Slot Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslots" get="1" set="1" type="int_array" size="0">
			<digest>
				Slots In Background
			</digest>
			<description>
				Sets the slots to be displayed on the background even when slots windows are not open.
				The attribute expects a list of integers, each representing a slot number.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slots In Background" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslottextshift" get="1" set="1" type="float_array" size="0">
			<digest>
				Background Slot Text Shift
			</digest>
			<description>
				Sets an horizontal and vertical shift coefficients for the slot text displayed
				for slots kept in background.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float_array" size="0" value="0 0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Background Slot Text Shift" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bgslotzoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom For Slot In Background
			</digest>
			<description>
				Sets the independent zoom factor relative to the slots displayed in background.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom For Slot In Background" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bordercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Border Color
			</digest>
			<description>
				Sets the color of the border in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.6 0.6 0.6 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="breakpointshavenoteheads" get="1" set="1" type="int" size="1">
			<digest>
				Breakpoints Have Noteheads
			</digest>
			<description>
				Toggles the ability to display pitch breakpoints as real notes (possibly with accidentals).
				If this is not set, pitch breakpoints are displayed as small diamonds.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoints Have Noteheads" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="breakpointshavevelocity" get="1" set="1" type="int" size="1">
			<digest>
				Breakpoints Have Velocity
			</digest>
			<description>
				Toggles the ability, for pitch breakpoints, to have their own independent velocity.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Breakpoints Have Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="breakrootlevelbeam" get="1" set="1" type="int" size="1">
			<digest>
				Always Break Root Level Beam
			</digest>
			<description>
				If this is set to 1 (default), no beams will be allowed to exist at the root level of the rhythmic tree of a measure.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Always Break Root Level Beam" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="clefcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Clef Color
			</digest>
			<description>
				Sets the color of clefs in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clef Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="clefs" get="1" set="1" type="sym_array" size="0">
			<digest>
				Clefs
			</digest>
			<description>
				Sets the clefs. A list of symbols is expected, the length of the list will also automatically change the <m>numvoices</m> attribute
				and update the number of voices.
				Each clef symbol can be one of the following: "G", "F", "FG", "FGG", "FFG", "FFGG", "G8", "F8", "G15", "F15",
				"Soprano", "Mezzo", "Alto", "Tenor", "Soprano", "Mezzo", "Tenor", "Alto", "Barytone", "Percussion", "None". <br />
				Clefs such as "FGG" correspond to multiple-staff voices: for instance, in this case, we have a standard piano staff ("FG") with an additional
				G clef superposed (transposed a 15ma above). The "G8", "F8", "G15" and "F15" symbols correspond to the transposed clefs: above for "G" clefs,
				and below for "F" clefs. For instance, "G8" is the G clef, transposed one octave above, whereas "F15" is the F clef transposed two octaves below.
				<br /> <br />
				A special message <b>clefs auto</b> will detect automatically the most appropriate clefs to display
				the musical content, and will set them: such message will apply to all the existing voices, and will not change the number of voices.
				You can use the "auto" symbol instead of any symbol in order to have bach detect automatically the most appropriate clefs
				for the given voice, depending on its notes (e.g. <b>clefs auto G FG</b>). However, in this case the message will also change the
				<m>numvoices</m> attribute, as for the standard case.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="G" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Clefs" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="constraintbeamsinspaces" get="1" set="1" type="int" size="1">
			<digest>
				Constrain Beams In Spaces
			</digest>
			<description>
				If this is set to 1, beams are constraint to lie on privileged position inside
				the staff lines. If this is 0, the beams position only depends on stems height.
				This attribute should be active for a better display result.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Constrain Beams In Spaces" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="continuousbang" get="1" set="1" type="int" size="1">
			<digest>
				Continuously Output Bang If Changed
			</digest>
			<description>
				Toggles the ability to output continuously the bang through the last outlet
				while the mouse is down and dragging something. Also the <m>automessage</m>, if any, is sent continuously.
				This defaults to 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Continuously Output Bang If Changed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="copyarticulationswithnotes" get="1" set="1" type="int" size="1">
			<digest>
				Copy Articulations With Notes
			</digest>
			<description>
				Toggles the ability to copy articulations along with the copied notes, while
				copying musical data via mouse and keyboard.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Copy Articulations With Notes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="dblclicksendsvalues" get="1" set="1" type="int" size="1">
			<digest>
				Send Selection Upon Double-Click
			</digest>
			<description>
				Toggles the ability to individually off-line dump any note or marker by doubleclicking on it.
				This defaults to 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send Selection Upon Double-Click" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="dlspansties" get="1" set="1" type="int" size="1">
			<digest>
				Duration Line Spans Ties
			</digest>
			<description>
				Toggles the ability for the duration line (if shown) to span sequences of
				tied notes. Values are: 0 = Don't span ties (default); 1 = Span ties; 2 = Span ties,
				and also hide notes and ties (i.e. only the duration line is kept to symbolize the duration of the
				tied sequence).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Duration Line Spans Ties" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="drawbarlinesacrossstaves" get="1" set="1" type="int" size="1">
			<digest>
				Draw Barlines Across Staves
			</digest>
			<description>
				Toggles the ability to draw barlines across all the staves. This is true only for barlines which perfectly
				correspond in all voices.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Draw Barlines Across Staves" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="durationlinewidth" get="1" set="1" type="float" size="1">
			<digest>
				Width of the duration line
			</digest>
			<description>
				Sets the width of the duration lines (when displayed: see <m>showdurations</m>).
				In case the <m>velocityhandling</m> attribute handles velocities via duration line width, this width is the maximum possible
				width (corresponding to a velocity of 127), and will be rescaled according to the note (or breakpoint) velocity.
				Defaults to 2.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="2." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Width of the duration line" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="editcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Edit Color
			</digest>
			<description>
				Sets the color corresponding to linear editing mode, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.78 0.63 0.04 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Edit Color" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="edittiedelementstogether" get="1" set="1" type="int" size="1">
			<digest>
				Edit Tied Notes Together
			</digest>
			<description>
				Toggles to ability to edit tied sequences of notes at once (namely: when a note is selected via the interface,
				all the notes tied to and from it are automatically selected as well).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Edit Tied Notes Together" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="int" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				Toggles the ability to save the notation object content within the patch.
				By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="enharmonictable" get="1" set="1" type="sym_array" size="0">
			<digest>
				Custom Enharmonic Table
			</digest>
			<description>
				An enharmonic table is a string of elements defining the accidentals to be used for each step of the chromatic scale.
				A symbol for each voice (containing such string of characters) is expected. If less symbols than the number of voices
				are defined, the last one is padded.
				The number of elements in the string depends on the <m>tonedivision</m>; more precisely it is the <m>tonedivision</m> multiplied by 6.
				Standard case is <m>tonedivision</m> = 2, and thus the full 12 steps must be defined.
				Elements are sequencies of characters associated to accidentals.
				For instance "bb" is associated to a double flat, while "#+" is associated to a three quarter tones sharp.
				Such elements are to be separated by white spaces. For instance, if <m>tonedivision</m> is 12, a string like
				<b>enharmonictable "n # n b n n b n b n b x"</b> says that the C must be represented as natural, the note above will
				be a C# (and not a Db), the one above a D natural, the one above a Eb (and not a D#), and so on. Last note says that
				the B will actually be a Ax (A double diesis). <br />
				In the bach environment, accidentals can be written or output as ascii using the following symbols: <br />
				# for stanard 1/2 tone sharp <br />
				b for stanard 1/2 tone flat <br />
				x for stanard tone sharp <br />
				bb for stanard tone flat <br />
				+ for 1/4 tone sharp; <br />
				d or - for 1/4 tone flat; <br />
				#+ for 3/4 tone sharp; <br />
				db for 3/4 tone flat; <br />
				^ for 1/8 tone up; <br />
				v for 1/8 tone down. <br />
				Of course, these symbols can be combined, like in #+^ or dv.
				The 1/8 symbols are used also for smaller intervals (at output time).
				<br /> <br />
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="default" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Custom Enharmonic Table" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="extendbeamsoverrests" get="1" set="1" type="int" size="1">
			<digest>
				Extend Beams Over Rests
			</digest>
			<description>
				Handles the number of beams to be exended over rests when these are incorporated inside the beam (i.e.
				the <m>restswithinbeaming</m> attribute must not be set on Never): <br />
				- Only First Beam: only one beam has to be extended over the rests, all other possible beams will be broken. <br />
				- All Beams Up To Figure: the number of beams which can be extended depends on the duration of the rest, namely from the
				number of beams such rest had if it were a note. For instance, over a 1/16 rest we would be able to extend up to 2 beams, but not 3;
				over a 1/64 rest up to 4 beams would be extended, but not 5, and so on. <br />
				- All Beams: always extend all possible beams over rests.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Extend Beams Over Rests" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="gracedur" get="1" set="1" type="symbol" size="1">
			<digest>
				1/8 Grace Note Playback Duration
			</digest>
			<description>
				Sets the playback equivalent duration of an eighth grace note, as a symbolic duration (i.e. fraction of the whole note).
				By default, a 1/8 grace note is played as a 1/64 ordinary note. This attribute is in any case tempered by the <m>gracemaxperc</m> attribute.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="1/64" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="1/8 Grace Note Playback Duration" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="gracemaxperc" get="1" set="1" type="float" size="1">
			<digest>
				Maximum Playback Percentage Of Chord Taken By Grace Notes
			</digest>
			<description>
				Sets the maximum playback percentage of the duration of a note which can be taken by grace notes of the following chord.
				If more than such duration is taken by following grace notes, the duration of each grace note is decreased (and will not be equal to <m>gracedur</m> any more)
				so that this percentage is always respected.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="90" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Playback Percentage Of Chord Taken By Grace Notes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="grid" get="1" set="1" type="int" size="1">
			<digest>
				Show Grid
			</digest>
			<description>
				Toggles the display of the grid.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Grid" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="gridcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Grid Color
			</digest>
			<description>
				Sets the color of the main grid lines ("divisions") in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 0.3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Grid Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="gridperiodms" get="1" set="1" type="float" size="1">
			<digest>
				Ruler/Grid Period (ms)
			</digest>
			<description>
				Sets the ruler and grid main period ("divisions"), in milliseconds. Defaults to 1000.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1000" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler/Grid Period (ms)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="highlightplay" get="1" set="1" type="int" size="1">
			<digest>
				Highlight Played Notes
			</digest>
			<description>
				Toggle the ability to highlight the played notes with the <m>playcolor</m>.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Highlight Played Notes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="inset" get="1" set="1" type="int" size="1">
			<digest>
				Border Inset
			</digest>
			<description>
				Sets the stafflines inset at left and right borders of notation object, in pixels (rescaled according to the
				<m>vzoom</m>). Defaults to 7.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="7" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Border Inset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="jointuplets" get="1" set="1" type="int" size="1">
			<digest>
				Join Tuplets When Possible
			</digest>
			<description>
				Toggles the ability to join tuplets automatically when possible.
				For instance, it will to gather two adjacent triplets into a single 6-plet.
				This is handy in most situations; for instance if we had a rhythm whose duration tree looked like
				<b>((1/24 1/24 1/24) (1/24 1/24 1/24))</b>, the algorithm would join the two triplets of sixteenth notes into
				a single sextuplet <b>(1/24 1/24 1/24 1/24 1/24 1/24)</b>.
				Such joining is performed by taking care of delimiting beat levels (e.g. in a 4/4 time signature, eighth triplets are never
				joined into 6-plets).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Join Tuplets When Possible" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="keepselectioniflostfocus" get="1" set="1" type="int" size="1">
			<digest>
				Keep Selection If Lost Focus
			</digest>
			<description>
				Toggles the ability to keep the current selection when the object lose the focus.
				This defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keep Selection If Lost Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="keys" get="1" set="1" type="sym_array" size="0">
			<digest>
				Keys
			</digest>
			<description>
				Sets the key signatures. A list of symbols is expected, one symbol for each voice.
				If less symbols are entered, the last one is padded.
				The syntax for the single key signature must be an unique symbol (no spaces) with:
				<b><m>notename</m>-<m>optional:accidental</m>-<m>optional:mode</m></b>.
				Dashes are only set in order to separate parts of the symbol, but must not be included in the symbol. <br /> <br />
				Note names are allowed both in anglo-saxon (C, D, E...) and in latin (Do, Re, Mi) format. In both ways,
				they are case insensitive ("c" or "C", "do" or "DO" is the same). <br /> <br />
				Accidentals are defined as string of ASCII characters, each identifying one accidental.
				The list of allowed characters is the following one: <br />
				"n" = natural <br />
				"#" = sharp (+1/2 tone) <br />
				"x" = double sharp (+ 1 tone) <br />
				"+" = monesis = quarter sharp (+1/4 tone) <br />
				"^" = +1/8 tone <br />
				"b" = flat (-1/2 tone) <br />
				"d" or "-" = mobemol = quarter flat (-1/4 tone) <br />
				"v" = -1/8 tone <br />
				If no accidental is defined, the natural is used by default.
				<br /> <br />
				The mode can be either "M" (major) or "m" minor. If no mode is defined, the major is used by default.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="sym_array" size="0" value="CM" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keys" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="labelfamilies" get="1" set="1" type="int" size="1">
			<digest>
				Show Label Families
			</digest>
			<description>
				Chooses the way in which elements bearing the same names should be visually tagged: <br />
				- None (default): don't show label families. <br />
				- Singleton: enclose each single notation item in a shape (circle for notes, rectangles for chords and measures)
				bearing the same color for each family. <br />
				- Bounding Box: enclose all items of a certain family in a rectangle bounding box. IMPORTANT: in this case,
				you might end up with having other notes (not belonging to that family) inside the bounding box. <br />
				- Venn: enclose families in an unique closed curve. This will usually work well if points are not too much scattered among other points.
				Notice that in this case, points not belonging to the label family lie outside the curve. BEW
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Label Families" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="legend" get="1" set="1" type="int" size="1">
			<digest>
				Show Legend
			</digest>
			<description>
				Chooses if and where the legend should be displayed:
				- Never: no legend is ever shown. <br />
				- Only For Selection: only selection legend is displayed. Selection legend is
				located in the upper left corner of the notation object, and is shown whenever a single
				notation item (e.g. a note) is selected. <br />
				- Always: in addition to selection legend, also the mouseover legend is displayed.
				Mouseover legend is located in the bottom right corner of the notation object, and is shown whenever the mouse
				moves over the notation object. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="legendcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Mouseover Legend Color
			</digest>
			<description>
				Sets the color of the mouseover legend (displayed at the bottom right corner of the notation object)
				in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.5 0.5 0.5 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mouseover Legend Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="legendfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Legend Font Size
			</digest>
			<description>
				Sets the font size of mouseover and selection legends (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="13" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Legend Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="leveltobeam" get="1" set="1" type="int" size="1">
			<digest>
				Tree Levels To Beams Conversion
			</digest>
			<description>
				Sets the way in which levels in rhythmic trees are to be converted into beams. <br />
				- Break Beams Around Levels (default): different levels will be identifiable by different beaming lines: at least one beaming line will be
				broken from one level the following one. <br />
				- Break Beams Arount Tuplet: as the previous one, but only valid for tuplet levels: tuplets will be thus left identifiable by one or more
				specific beams, but non-tuplet levels can share the same beams. <br />
				- Levels Can Share Beams: levels are never identified by specific beams: beams can start and end across levels, rather independently from them.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Tree Levels To Beams Conversion" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="linearedit" get="1" set="1" type="int" size="1">
			<digest>
				Allow Linear Editing
			</digest>
			<description>
				Toggles the ability to enter in the linear editing mode
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Linear Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="linklyricstoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Lyrics To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be displayed as lyrics.
				A text slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="7" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Lyrics To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknotecolortoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Color To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content must be linked to the note colors.
				An int, float, floatlist or color slot is expected. Int slots are mapped on default colors,
				float slots are mapped on the color spectrum, floatlist slots are interpreted as RGBA coordinates
				while color slots are simply taken as they are.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Color To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadadjusttoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head Adjust To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is associated with noteheads
				horizontal and vertical adjustments. An intlist or floatlist slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head Adjust To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadfonttoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head Font To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is the name of the font with which
				the note should be displayed. A text slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head Font To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknoteheadtoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Head Character To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is to be associated with the notehead
				characters of each note. An int slot is expected.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Head Character To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="linknotesizetoslot" get="1" set="1" type="int" size="1">
			<digest>
				Link Note Size To Slot
			</digest>
			<description>
				Sets the slot number of the slot whose content is linked with a note size factor,
				as a percentage (100 being the usual size). A float slot is expected (to change both note
				and accidentals size at the same time), or also a floatlist slot can be used, in which case
				two factor are expected: one for the note size and one for the accidentals size.
				0 (default) means: none.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Link Note Size To Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lockcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Lock Color
			</digest>
			<description>
				Sets the color of locked items in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.83 0.04 0.04 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lock Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="loopcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Loop Color
			</digest>
			<description>
				Sets the color of the loop region in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.68 0.48 0.69 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Loop Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="lyricsaffectspacing" get="1" set="1" type="int" size="1">
			<digest>
				Lyrics Affect Spacing
			</digest>
			<description>
				Sets the way in which lyrics affect the score spacing: <br />
				- Never: lyrics never affect the spacing. <br />
				- Only Inside Measures: They only affect the internal spacing of a measure, but they cannot increase the width of the measure. <br />
				- Also Measure Width When Overlapping: They affect the internal spacing of the measure, and also can increase its width in case they risk to overlap.<br />
				- Also Measure Width Always: They always affect both internal spacing and measure width increasing.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Affect Spacing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="lyricsalignment" get="1" set="1" type="int" size="1">
			<digest>
				Lyrics Alignment
			</digest>
			<description>
				Sets how the lyrics syllables must be aligned with respect to the chord to which they refer.
				Possibilities are: "Auto", "Left", "Center", "Right". Currently "Auto" completely coincides with "Center",
				but it might be improved in a future version.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="lyricscolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Lyrics Color
			</digest>
			<description>
				Sets the color of lyrics in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="lyricsfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Lyrics Font Size
			</digest>
			<description>
				Sets the font size of lyrics (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="12" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lyricsvadj" get="1" set="1" type="float" size="1">
			<digest>
				Lyrics Vertical Adjustment
			</digest>
			<description>
				Sets the vertical shift (in pixels, rescaled depending on the <m>vzoom</m>) of the
				lyrics display. 0 will set the lyrics top line coinciding with the bottommost staff line.
				The default is 16.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="-16" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Lyrics Vertical Adjustment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mainstavescolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Main Staff Color
			</digest>
			<description>
				Sets the color of the main staves (the ones always carring the clefs) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Main Staff Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="maketreecompatiblewithts" get="1" set="1" type="int" size="1">
			<digest>
				Make Rhythmic Tree Compatible With Time Signature
			</digest>
			<description>
				Toggles the ability to always make rhythmic trees compatible with time signatures. In other words,
				it always applies a preliminar boxing of the rhythmic tree into a certain number of boxes, each corresponding to a beat.
				For instance, in a 4/4 time signature, if this is set to 1, any tree will be first of all split into four branches,
				one for each beat. If you use as <m>treehandling</m> the Take For Granted option, you might want to set this attribute to 0,
				otherwise in any case trees will be parsed and modified according to the time signatures.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Make Rhythmic Tree Compatible With Time Signature" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="markersfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Markers Font Size
			</digest>
			<description>
				Sets the font size of marker names (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="9" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Markers Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxundosteps" get="1" set="1" type="atom" size="1">
			<digest>
				Maximum Number Of Undo Steps
			</digest>
			<description>
				Sets the maximum number of undo steps. 0 means that undo/redo system will be made inactive.
				The "inf" symbol means unlimited undo steps.
				Defaults to 50. You should change it to 0 if you perform heavy operations in real-time.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="atom" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Number Of Undo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="measmarkercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Measure-Attached Marker Color
			</digest>
			<description>
				Sets the color of markers attached to measure position in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.17 0.25 0.88 0.9" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Measure-Attached Marker Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="measurenumberfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Measure Numbers Font Size
			</digest>
			<description>
				Sets the font size with which measure numbers are displayed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="9" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Measure Numbers Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="measurenumberoffset" get="1" set="1" type="int" size="1">
			<digest>
				Measure Number Offset
			</digest>
			<description>
				Sets a global offset for the measure numbering (0 is the default, meaning: first measure start with 1).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Measure Number Offset" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="middlecoctave" get="1" set="1" type="int" size="1">
			<digest>
				Middle C Octave
			</digest>
			<description>
				Sets the octave number of the middle C. By default this is 4 (meaning that C4 = Do4 is the middle C);
				values of 3 and 5 are also encountered.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="4" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Middle C Octave" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="midichannels" get="1" set="1" type="int_array" size="0">
			<digest>
				MIDI Channels
			</digest>
			<description>
				Sets the MIDI channels, which are a property of voices: a list with one integer for each voice is expected.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int_array" size="0" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="MIDI Channels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mousehover" get="1" set="1" type="int" size="1">
			<digest>
				Allow Mouse Hovering
			</digest>
			<description>
				Toggles mouse hovering capabilities.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Mouse Hovering" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mutecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Mute Color
			</digest>
			<description>
				Sets the color of muted items in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.29 0.29 0.72 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Mute Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="nonantialiasedstafflines" get="1" set="1" type="int" size="1">
			<digest>
				Only Non-Antialiased Staff
			</digest>
			<description>
				Toggles the ability to force stafflines to precisely lie on pixels on the screen.
				If this attribute is 1, the <m>vzoom</m> attribute will be snapped to the closest value allowing stafflines to be drawn
				precisely on a pixel row. This also means that the staffline-to-staffline distance is an integer (e.g. 4 pixels).
				If this attribute is 0, all <m>vzoom</m> values are possible, and stafflines will be displayed
				with any floating-point distance the <m>vzoom</m> will require.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Only Non-Antialiased Staff" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notationfont" get="1" set="1" type="symbol" size="1">
			<digest>
				Notation Font
			</digest>
			<description>
				@description Sets the font used to display all notation elements except accidentals.
				The official notation bach font is "November for bach", created by Robert Piéchaud (www.poeticprocessing.net) and
				automatically loaded at bach startup. "November for bach" is a light version of the famous November font.
				The full November font covers a wide range of music symbols, from Renaissance to the XXI century, and gives a unique,
				warm and lively look to your music scores. It is fully compatible with Finale, Sibelius and other notation softwares.
				You can purchase November from this web address: www.klemm-music.de/notation/november/.
				Other supported fonts are: Boulez, Maestro, Petrucci, Engraver Font Set.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="symbol" size="1" value="\" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notation Font" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="font" />
			</attributelist>
		</attribute>
		<attribute name="notecolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Note Color
			</digest>
			<description>
				Sets the color of each notehead, accidental, duration line and note tail in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Note Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="notenamesstyle" get="1" set="1" type="int" size="1">
			<digest>
				Note Names Style
			</digest>
			<description>
				Sets the style of the note names display: "Latin" corresponds to note names such as
				"Do Re Mi Fa...", while "Anglo-Saxon" corresponds to note name such as "C D E F...".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Note Names Style" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="notificationsformessages" get="1" set="1" type="int" size="1">
			<digest>
				Notifications When Changed Via Messages
			</digest>
			<description>
				Toggles the ability to send notifications caused by actions coming from messages, and not only from the interface.
				For instance, a <m>inscreenpos</m> message will toggle a <m>domain</m> notification, and so on.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notifications When Changed Via Messages" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="numgridsubdivisions" get="1" set="1" type="int" size="1">
			<digest>
				Number of Ruler/Grid Subdivisions
			</digest>
			<description>
				Sets the number of subdivisions for each ruler and grid period. Defaults to 10.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Ruler/Grid Subdivisions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="numvoices" get="1" set="1" type="int" size="1">
			<digest>
				Number Of Voices
			</digest>
			<description>
				Sets the number of voices of the notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number Of Voices" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the followings: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed. Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				llllobj_class_add_check_attr(c, LLLL_OBJ_UI);
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outputslotnames" get="1" set="1" type="int" size="1">
			<digest>
				Output Slot Names From Playout
			</digest>
			<description>
				Toggles the ability to output slot names instead of slot numbers when slot information
				is sent through the playout.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Slot Names From Playout" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="outputtiesindurationtree" get="1" set="1" type="int" size="1">
			<digest>
				Output Ties In Duration Tree
			</digest>
			<description>
				Toggles the ability to output a symbol "t" to identify ties in the tree of durations.
				This attribute is active only if <m>outputtrees</m> is set to "All Outlets": in this case the duration outlet will
				output durations structured as the rhythmic tree. If this attribute is set to 1, after each note which starts a tie,
				a "t" symbol will be put, identifying such tie. For instance:
				<b>( ( ( 1/8 t ( 1/24 1/24 1/24 ) ) ( ( ( -1/16 1/64 t ) ( 1/64 1/64 1/64 t ) ) ( 1/16 1/16 ) ) -1/2 ) )</b>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Ties In Duration Tree" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="outputtrees" get="1" set="1" type="int" size="1">
			<digest>
				Output Rhythmic Trees Upon Dump
			</digest>
			<description>
				Sets the way in which rhythmic trees are output: <br />
				- Never: rhythmic trees are never output from any of the outlets. <br />
				- First Outlet Only (default): rhythmic trees are only output from the first outlet of <o>bach.score</o> (the one
				with the score gathered syntax), but never from any of the other outlets. <br />
				- All Outlets: rhythmic trees are output from the first outlet and also from all the separate parameter outlets. <br />
				Outputting rhythmic trees means essentially that the given llll containing the data (e.g. durations or velocities) is reshaped
				according to the shape of the rhythmic tree. Also see the <m>outputtiesindurationtree</m> attribute.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Rhythmic Trees Upon Dump" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="pitcheditrange" get="1" set="1" type="llll" size="1">
			<digest>
				Constraint Pitches While Editing
			</digest>
			<description>
				Force edited pitches to lie in a given range, given by the specified llll.
				One sublist for each voice is expected. For any given voice, the sublist must be in one of the following forms: <br />
				- a plain llll specifies a list of allowed midicents, e.g. <b>(6000 6200 6400 6500 6700 6900 7100 7200)</b> will
				force edited notes to lie in the C major scale in middle octave; <br/>
				- a two-elements wrapped llll specifies a range of allowed midicents, e.g. <b>((6000 7200))</b> will do the same as above, but will also
				allow notes in principle to have any microtonal value such as 6050;<br/>
				- you can combine the two syntaxes to have the general one. For instance <b>(3600 4800 (6000 7200) 8400 9600))</b> will
				force pitches to be in one of the specified C's or in the middle octave.<br/>
				Such list must be given for any voice. Use a <b>nil</b> or <b>()</b> list to allow all possibilities for a voice.
				For instance: <b>pitchededitrange (7100) ((6000 7200)) ()</b> will force first voice's edited notes to snap to 7100 mc (and no other note can be inserted or edited!),
				second voice's edited notes to lie in middle octave, and third voice's edited notes to assume any available pitch. <br />
				Note names (in latin or anglo-saxon syntax) can always be used instead of midicents.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Constraint Pitches While Editing" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="playcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Play Color
			</digest>
			<description>
				Sets the color corresponding to notes being played, in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.34 0.87 0.20 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="playheaddragmode" get="1" set="1" type="int" size="1">
			<digest>
				Playhead Mousing Mode
			</digest>
			<description>
				Sets the way the playhead bar responds to mouse clicks. In Relative mode, the playhead keeps its relative
				position when one clicks - moving the mouse will shift the playhead to higher or lower temporal points in relation to the
				relative position. In Absolute mode (default), the playhead will automatically jump directly on the clicked location.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playhead Mousing Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playmarkers" get="1" set="1" type="int" size="1">
			<digest>
				Play Markers
			</digest>
			<description>
				Toggle the ability to also send the marker information through the playout during the playback.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Markers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playmeasures" get="1" set="1" type="int" size="1">
			<digest>
				Play Measure Start Barlines
			</digest>
			<description>
				Toggle the ability to also send the information about measure start at the beginning of playback. See the <m>play</m> message to know more
				about the syntax. By default this is 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Measure Start Barlines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playmode" get="1" set="1" type="int" size="1">
			<digest>
				Playout Mode
			</digest>
			<description>
				Sets the syntax of the content output from the playout: either a chordwise playout syntax,
				or a notewise playout syntax (default). <br />
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Playout Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="playoutfullpath" get="1" set="1" type="int" size="1">
			<digest>
				Full Path In Playout Syntax
			</digest>
			<description>
				Toggle the ability to output from the playout, instead of the voice number, the full path
				to get to the played element.
				The playout syntax normally has as first element the voice number of the output item (note or chord).
				By default this attribute is 0, and the simple voice number is output as first element. <br />
				If this flag is active, for <o>bach.roll</o>, the voice number is substituted with the list
				<b>(<m>voice_number</m> <m>chord_index</m>)</b>, if the <m>playmode</m> is chord-wise, or
				<b>(<m>voice_number</m> <m>chord_index</m> <m>note_index</m>)</b>, if the <m>playmode</m> is note-wise.
				The <m>chord_index</m> is the index of the chord, when ordered by onsets. The <m>note_index</m> is the
				index of the note (from the lowest to highest one).
				For instance, instead of <b>note 1 1 (...)</b> one might have <b>note (1 4 2) 1 (...)</b>, meaning that
				the output information concerns the 2nd note of 4th chord of 1st voice.
				Voice is anyway always the first element in the output llll. <br />
				If this flag is active, for <o>bach.score</o>, the voice number is substituted with a list of lists, namely
				<b>(<m>LIST1</m> <m>LIST2</m>...)</b>. The slightly complex form is due to the fact that
				tied notes or chords are output just once for all from the playout, so that each output element
				may be a combination of subsequently tied notes or chords. Each one of the <m>LIST</m>s represents one of these elements,
				and has the form
				<b>(<m>voice_number</m> <m>measure_number</m> <m>chord_index</m>)</b>, if the <m>playmode</m> is chord-wise, or
				<b>(<m>voice_number</m> <m>measure_number</m> <m>chord_index</m> <m>note_index</m>)</b>, if the <m>playmode</m> is note-wise.
				The <m>chord_index</m> is the index of the chord inside the measure. The <m>note_index</m> is the
				index of the note (from the lowest to highest one).
				For instance, instead of <b>note 1 1 (...)</b> one might have <b>note ((1 3 4 2) (1 4 1 3)) 1 (...)</b>,
				meaning that the output information concerns two notes: the 2nd note of 4th chord of 3rd measure of 1st voice,
				which is tied to the 3rd note of 1st chord of 4th measure of 1st voice.
				Voice is anyway always the first element in the output llll. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Full Path In Playout Syntax" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playpartialnotes" get="1" set="1" type="int" size="1">
			<digest>
				Play Partial Notes
			</digest>
			<description>
				Toggle the ability to play partial notes, when the playhead starts from a point where a note has
				already started but not yet ended. In this case, all temporal information (temporal slots, pitch breakpoints)
				is properly trimmed, and the corresponding partial note is played.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Partial Notes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playpollthrottle" get="1" set="1" type="int" size="1">
			<digest>
				Play Poll Throttle
			</digest>
			<description>
				Maximum number of synchronous notation items being output within the same scheduler event.
				Chords count as singles notation items (so if you have a chord with a large number of notes, this will still count as 1 notation item.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="10" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Poll Throttle" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playrests" get="1" set="1" type="int" size="1">
			<digest>
				Play Rests
			</digest>
			<description>
				Toggles the ability to also play rests, having <b>rest</b> as symbol router for the playout llll.
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Rests" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playstep" get="1" set="1" type="float" size="1">
			<digest>
				Play Bar Average Step (ms)
			</digest>
			<description>
				Approximative step (in milliseconds) for playhead (and notation object) redraw.
				0 means that the score is redrawn at each scheduled event.
				The "approximative" adjective is due to the fact that we need an integer number of ticks
				between two scheduled events (e.g.: two subsequent chord onsets), so this might slightly
				vary in each scheduled interval
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="50" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Bar Average Step (ms)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="playtempi" get="1" set="1" type="int" size="1">
			<digest>
				Play Tempi
			</digest>
			<description>
				Toggle the ability to also send the tempo through the playout during the playback. See the <m>play</m> message to know more
				about the syntax. By default this is 0.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Play Tempi" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="playwhenediting" get="1" set="1" type="int" size="1">
			<digest>
				Chord Playback While Editing
			</digest>
			<description>
				Toggles the ability to output chords from the playout, while they are being inserted in the linear editing system.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Chord Playback While Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="popupmenuslots" get="1" set="1" type="int_array" size="0">
			<digest>
				Slots In Popup Menu
			</digest>
			<description>
				Sets the slots which should show up in the right-click (or two-fingers-tap) popup menu
				of a note. The attribute expects a list of integers, each representing a slot number.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slots In Popup Menu" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="preventedit" get="1" set="1" type="atom_array" size="0">
			<digest>
				Prevent Editing For
			</digest>
			<description>
				Prevents the interface editing of the specified elements, specified via an llll. Somehow, this is a lock specified globally for given notation items or features.
				If the first symbol is a "-" (minus), the editing is prevented for any element or feature, except for the specified ones. <br />
				The llll must contain at its root level: <br />
				- either single symbols, with the items or features names to be completely "locked", e.g. <b>preventedit measure lyrics inspector</b> will prevent the editing of all measures
				(one cannot create, delete, modify them), lyrics, and will not allow the opening of the bach inspector; <br />
				- or lllls in the form <b>(<m>item_or_feature_name</m> <m>property1</m> <m>property2</m> <m>property3</m>...)</b>, where properties are symbols which restrict the locking
				only to a given aspect of the item or feature. For instance, <b>preventedit (measure create delete) (marker onset)</b> will prevent the creation and deletion of measures
				(but not their modification!), and will also prevent the movement of existing markers (but not the creation of new ones!). <br/>
				The two approaches. <br />
				Here is the complete list of symbols which can be used to define items and feature names; parentheses list symbols for the single properties which one can block for them: <br />
				notes (create, delete, onset, duration, pitch, velocity, modify), measures (create, delete, rhythmictree, modify), voice (create, delete, name, clef, key, position, modify),
				breakpoints (create, delete, onset, pitch, velocity, modify), tempi (create, delete, modify), slots, markers (create, delete, onset, name, modify), articulations (create, delete),
				selection, zooming, dilationrectangle, groups, inspector, popup, slotinfo, lyrics, cursor, loop, scrollbar. <br />
				The "modify" symbol only refers to modification different from the previously defined ones. For instance: <b>preventedit (breakpoints modify)</b> will not
				prevent the modification of breakpoints onsets, but will, as an example, prevent the modification of breakpoints slopes. Use <b>preventedit (breakpoints onset modify)</b> to do both.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Prevent Editing For" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="reducetreeidlelevels" get="1" set="1" type="int" size="1">
			<digest>
				Always Reduce Rhythmic Tree Idle Levels
			</digest>
			<description>
				Toggles the ability to reduce automatically the idle, empty or unnecessary levels of rhythmic trees.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Always Reduce Rhythmic Tree Idle Levels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="restswithinbeaming" get="1" set="1" type="int" size="1">
			<digest>
				Rests Can Be Within Beaming
			</digest>
			<description>
				Handles the possibility that rests be incorporated inside (under or over) beams: <br />
				- Never: rests are never to be incorporated inside a beam; the beam should be rather broken. <br />
				- Only Internally (default): rests can stay inside a beam only if they are not at the beginning or at the end of the beam. <br />
				- Always: rests can alway stay inside beams. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Rests Can Be Within Beaming" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="rightclickslot" get="1" set="1" type="int" size="1">
			<digest>
				Right Click Directly Pops Out Slot
			</digest>
			<description>
				Sets the number of the slot whose window should automatically popup when a
				right-click (or a two-fingers-tap) is performed on a notehead. 0 (default) means: none
				(in which case the usual contextual menu pops up).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Right Click Directly Pops Out Slot" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="ruler" get="1" set="1" type="int" size="1">
			<digest>
				Show Ruler
			</digest>
			<description>
				Toggles the display of the ruler. Four options are possible: <br />
				- Never: ruler is not shown. <br />
				- Above: ruler is shown on the upper border of the notation object. <br />
				- Below: ruler is shown on the lower border of the notation object. <br />
				- Both: ruler is shown on both upper and lower borders of the notation object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ruler" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="rulercolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Ruler Color
			</digest>
			<description>
				Sets the color of the ruler in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="rulerlabels" get="1" set="1" type="int" size="1">
			<digest>
				Show Ruler Labels
			</digest>
			<description>
				Toggles the display of the ruler labels.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ruler Labels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="rulerlabelsfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Ruler Labels Font Size
			</digest>
			<description>
				Sets the font size of ruler labels (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="8" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ruler Labels Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="samplingrate" get="1" set="1" type="float" size="1">
			<digest>
				Sampling Rate (For Filter Slots)
			</digest>
			<description>
				Sets the currentl sampling rate. "Manually" setting the sampling rate
				is necessary for a proper handling of the filter slots. No object in the bach library is a
				DSP objects, so this information should be set "by hand" (it could easily come from <o>dspstatus~</o>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="44100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Sampling Rate (For Filter Slots)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="saveleveltypes" get="1" set="1" type="int" size="1">
			<digest>
				Output And Save Level Types
			</digest>
			<description>
				Toggles the saving and output of level type information.
				If this attribute is set to 1 (default), and <m>outputtrees</m> is not set on "Never", level type information of each level is output
				within the level from the first outlet (gathered syntax). Also such information is stored inside the lllls created
				after a <m>write</m> or <m>writetxt</m> message.
				Level type information concerns the "life" of the rhythmic levels inside a given measure. Indeed, some of those levels may have been
				created by the user, some other levels may have been refined by <o>bach.score</o>, some other again may correspond to beats, and may been created to make
				the rhythmic tree compatible with the time signature (see <m>maketreecompatiblewithts</m>). All such differences are important to <o>bach.score</o>,
				in order to know how it should behave towards such levels: it'll take great care of the level you've introduced yourself, while it'll
				bother less to modify levels it had refined itself, and so on. This information is thus useful for a correct handling of the score interface. <br />
				Level type information can only be stored in gathered-syntax lllls, at the beginning of each level in an llll of the following form:
				<b>(leveltype <m>type</m>)</b>, where <m>type</m> is an integer defining the type of the level.
				Such integer is undocumented, and you should always consider level types as being opaque for the user: never set them "manually", only
				deal with them at output or while saving the content. Removing leveltype lllls yields a perfectly valid <o>bach.score</o> llll.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output And Save Level Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="scrollbarcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Scrollbar Color
			</digest>
			<description>
				Sets the color of the scrollbars in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.3 0.3 0.3 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Scrollbar Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectedlegendcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selection Legend Color
			</digest>
			<description>
				Sets the color of the selection legend (displayed at the top left corner of the notation object,
				when one clicks on a notation item) in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.2 0.2 0.2 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selection Legend Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="selectioncolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Selection Color
			</digest>
			<description>
				Sets the color of each selected notehead, accidental, duration line and note tail in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.8 0. 0.8 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Selection Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="senddoneafterpaint" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' Only After Paint
			</digest>
			<description>
				If this is 1, the <m>done</m> notification is not sent when the content has been loaded or built,
				but after the content has been painted (which, in general, is later: paint is done at low priority). This is handy
				if you need to retrieve appearance data (such as pixel position) which is computed inside the paint method, and not
				when the object is loaded. If this is 0, on the other hand, the notification is sent right after the content has been loaded
				or built, and you have no guarantee that the display data will be correct when the notification is sent.
				By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' Only After Paint" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="senddoneatstartup" get="1" set="1" type="int" size="1">
			<digest>
				Send 'Done' At Startup (If Data Was Saved)
			</digest>
			<description>
				Toggles the ability to send a <m>done</m> notification through the playout (or the notification outlet
				for <o>bach.slot</o>) at the object instantiation, if content saved with the object is loaded.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send 'Done' At Startup (If Data Was Saved)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showaccidentalspreferences" get="1" set="1" type="int" size="1">
			<digest>
				Display Accidentals
			</digest>
			<description>
				Handles the display of accidentals: <br />
				- Classically (default): for <o>bach.score</o>: accidentals are displayed classically, i.e. on the first (altered) note requiring them,
				and them never for any other note inside the same measure (but cautionary accidentals are possible: see the attribute <m>cautionaryaccidentals</m>);
				for <o>bach.roll</o>: this coincides with Altered Note (No Naturals) (see below). <br />
				- Always: accidentals are always displayed for all altered and naturals notes. <br />
				- Altered Notes: accidentals are always displayed for any altered note. Natural signs are preserved for notes which have to cancel such accidental. <br />
				- Altered Notes (No Repetition): accidentals are always displayed for any altered note, but dropped for immediate repetitions of the same note. <br />
				- Altered Note (No Naturals): accidentals are always displayed for any altered note, and natural signs are dropped for notes having to cancel such accidentals.
				In this case all non-natural notes have their accidental, and all natural notes have no accidental. <br />
				- Never: accidentals are never shown (always hidden). <br />
				IMPORTANT: be aware of the fact that, due to the cross dependencies between accidentals, in <o>bach.roll</o> the "Altered Notes"
				"Altered Notes (No Repetition)" configurations can be sensibly slower than any other any other configuration
				(<o>bach.score</o>, on the other hand, does not suffer from this issue).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Notation" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Display Accidentals" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showarticulations" get="1" set="1" type="int" size="1">
			<digest>
				Show Articulations
			</digest>
			<description>
				Toggles the display of articulations.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Articulations" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showarticulationsextensions" get="1" set="1" type="int" size="1">
			<digest>
				Show Articulations Extensions
			</digest>
			<description>
				Toggles the display of articulation extensions (such as trill lines).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Articulations Extensions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showbarlinelocks" get="1" set="1" type="int" size="1">
			<digest>
				Show Barline Locks
			</digest>
			<description>
				Toggles the display of barlines locks.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Barline Locks" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showbarlines" get="1" set="1" type="int" size="1">
			<digest>
				Show Barlines
			</digest>
			<description>
				Toggles the display of barlines.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Barlines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showbeams" get="1" set="1" type="int" size="1">
			<digest>
				Show Beams
			</digest>
			<description>
				Toggles the display of beams.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Beams" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showborder" get="1" set="1" type="int" size="1">
			<digest>
				Show Border
			</digest>
			<description>
				Toggles the ability to display the object border.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Border" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showdots" get="1" set="1" type="int" size="1">
			<digest>
				Show Augmentation Dots
			</digest>
			<description>
				Toggles the display of augmentation dots.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Augmentation Dots" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showdurations" get="1" set="1" type="int" size="1">
			<digest>
				Show Duration Lines
			</digest>
			<description>
				Toggles the display of the duration lines.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Duration Lines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showflags" get="1" set="1" type="int" size="1">
			<digest>
				Show Chord Flags
			</digest>
			<description>
				Toggles the display of chord flags.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Chord Flags" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showfocus" get="1" set="1" type="int" size="1">
			<digest>
				Show Object Focus
			</digest>
			<description>
				Toggles the display of a thicker border when the notation object has the focus.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Object Focus" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showledgerlines" get="1" set="1" type="int" size="1">
			<digest>
				Show Ledger Lines
			</digest>
			<description>
				Chooses how to display the ledger lines: <br />
				- Never: ledger lines are always hidden. <br />
				- Standard: the only displayed ledger lines are the one really needed to understand note positioning (i.e. ledger lines between main and auxiliary staves are hidden if not needed). <br />
				- Always Refer To Main Staves: always show all ledger lines, even between main and auxiliary staves.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ledger Lines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showlockcolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Lock Color
			</digest>
			<description>
				Chooses when the locked elements should be displayed with the color associated with the element locking
				(see the <m>lockcolor</m> attribute): <br />
				- Never: never use the <m>lockcolor</m>. <br />
				- When Selecteed: use the <m>lockcolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>lockcolor</m> only when elements are not selected. <br />
				- Always: always use the <m>lockcolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Lock Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showloop" get="1" set="1" type="int" size="1">
			<digest>
				Show Loop Region
			</digest>
			<description>
				Toggles the display of the loop region.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Loop Region" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showlyrics" get="1" set="1" type="int" size="1">
			<digest>
				Show Lyrics
			</digest>
			<description>
				Toggles the display of lyrics.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Lyrics" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showlyricswordextensions" get="1" set="1" type="int" size="1">
			<digest>
				Show Lyrics Word Extensions
			</digest>
			<description>
				Toggles the display of word extensions for lyrics. Word extensions are the horizontal
				lines which extend a syllable over chords which don't have any defined syllable.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Lyrics Word Extensions" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showmarkers" get="1" set="1" type="int" size="1">
			<digest>
				Show Markers
			</digest>
			<description>
				Toggles the display of markers.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Markers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showmeasurenumbers" get="1" set="1" type="char_array" size="0">
			<digest>
				Show Measure Numbers
			</digest>
			<description>
				Toggles the display of measure numbers. A 0/1 integer for each voice is expected: 0 means that the measure numbers
				must be hidden, 1 means that the measure numbers will be shown for the given voice. If <m>drawbarlinesacrossstaves</m> is 1 and
				barlines are drawn across the staves, in any case the measure numbers can only be shown for the first voice.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="char_array" size="0" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Measure Numbers" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="showmutecolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Mute Color
			</digest>
			<description>
				Chooses when the muted elements should be displayed with the color associated with the element muting
				(see the <m>mutecolor</m> attribute): <br />
				- Never: never use the <m>mutecolor</m>. <br />
				- When Selecteed: use the <m>mutecolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>mutecolor</m> only when elements are not selected. <br />
				- Always: always use the <m>mutecolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Mute Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="shownotenames" get="1" set="1" type="int" size="1">
			<digest>
				Show Note Names In Selection Legend
			</digest>
			<description>
				Toggles the display of note names in the selection legend
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Note Names In Selection Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showplayhead" get="1" set="1" type="int" size="1">
			<digest>
				Show Playhead
			</digest>
			<description>
				Toggles the constant display of the playhead line (even while not playing).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Playhead" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showrests" get="1" set="1" type="int" size="1">
			<digest>
				Show Rests
			</digest>
			<description>
				Toggles the display of the rests. Values are: 0 = never show,
				1 = show rests except when they are in empty measures, 2 = always show rests
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Rests" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showrhythmictreelocks" get="1" set="1" type="int" size="1">
			<digest>
				Show Rhythmic Tree Locks
			</digest>
			<description>
				Toggles the display of rhythmic tree locks (over the barlines).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Rhythmic Tree Locks" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showscrollbar" get="1" set="1" type="int" size="1">
			<digest>
				Show Horizontal Scrollbar If Needed
			</digest>
			<description>
				Toggles the display of the horizontal scrollbar, if needed.
				If unneeded, the scrollbar is not shown. By default this is 1: you should set it to 0 only
				if you want to always hide the horizontal scrollbar.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Horizontal Scrollbar If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlabels" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Labels
			</digest>
			<description>
				Toggles the display of automatic labels for points in the function slots and for bars in the intlist or floatlist slots.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Labels" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotlegend" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Legend
			</digest>
			<description>
				Toggles the ability to display the slot legend at the top right angle.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Legend" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showslotnumbers" get="1" set="1" type="int" size="1">
			<digest>
				Show Slot Numbers In Slot Window
			</digest>
			<description>
				Toggles the display of slot numbers in the slot windows.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Slot Numbers In Slot Window" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showsolocolor" get="1" set="1" type="int" size="1">
			<digest>
				Show Solo Color
			</digest>
			<description>
				Chooses when the elements set as "solo" should be displayed with the color associated with the solo elements
				(see the <m>solocolor</m> attribute): <br />
				- Never: never use the <m>solocolor</m>. <br />
				- When Selecteed: use the <m>solocolor</m> only when elements are selected, instead of the <m>selectioncolor</m>. <br />
				- When Not Selected: use the <m>solocolor</m> only when elements are not selected. <br />
				- Always: always use the <m>solocolor</m>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Solo Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showstems" get="1" set="1" type="int" size="1">
			<digest>
				Show Stems
			</digest>
			<description>
				Toggles the display of the chord stems. Values are: 0 = don't show,
				1 = show main stem, 2 = show both main and auxiliary unison stems (default).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Stems" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="showstemsforbeamedrests" get="1" set="1" type="int" size="1">
			<digest>
				Show Stems For Beamed Rests
			</digest>
			<description>
				Toggles the display of the stems for rests under a beam.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Stems For Beamed Rests" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showtails" get="1" set="1" type="int" size="1">
			<digest>
				Show Note Tails
			</digest>
			<description>
				Toggles the display to display the note tails (this only works if <m>showdurations</m> is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Note Tails" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showtempi" get="1" set="1" type="int" size="1">
			<digest>
				Show Tempi
			</digest>
			<description>
				Toggles the display of tempi.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Tempi" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showties" get="1" set="1" type="int" size="1">
			<digest>
				Show Ties
			</digest>
			<description>
				Toggles the display of ties.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ties" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showvoicenames" get="1" set="1" type="int" size="1">
			<digest>
				Show Voice Names
			</digest>
			<description>
				Toggles the display of voice names.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Voice Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showvscrollbar" get="1" set="1" type="int" size="1">
			<digest>
				Show Vertical Scrollbar If Needed
			</digest>
			<description>
				Toggles the display of the vertical scrollbar, if needed.
				If unneeded, the scrollbar is not shown. By default this is 1: you should set it to 0 only
				if you want to always hide the vertical scrollbar.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Vertical Scrollbar If Needed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="simplifytuplets" get="1" set="1" type="int" size="1">
			<digest>
				Make Tuplets Simpler When Possible
			</digest>
			<description>
				Toggles the ability to parse adjacent tuplets into simple ones, having bigger units.
				For instance, if we had a rhythm whose duration tree looked like <b>(1/6 1/12 t) (1/12 1/6)</b>,
				where "t" represents a tie, the algorithm would merge the two tuplets of eighth notes into a bigger
				tuplet of quarter notes: <b>(1/6 1/6 1/6)</b>.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Make Tuplets Simpler When Possible" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="slotfunctionptradius" get="1" set="1" type="float" size="1">
			<digest>
				Function Slot Point Radius
			</digest>
			<description>
				Sets the size of the radius of breakpoints inside slots of type function
				(rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1.3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Function Slot Point Radius" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotminimumwindowwidth" get="1" set="1" type="float" size="1">
			<digest>
				Minimum Slot Window Width
			</digest>
			<description>
				Sets the minimum width of a slot window.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Minimum Slot Window Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotwinalpha" get="1" set="1" type="float" size="1">
			<digest>
				Slot Window Opacity %
			</digest>
			<description>
				Sets the percentage of transparency of the slot windows (0 being completely transparent, 100
				being completely opaque.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Slot Window Opacity %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="slotwinzoom" get="1" set="1" type="float" size="1">
			<digest>
				Zoom For Slot Window
			</digest>
			<description>
				Sets an independent zoom factor for slot windows. This factor is set as a percentage,
				100 corresponding to the default standard zoom.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Slots" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="125" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom For Slot Window" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="snappitch" get="1" set="1" type="int" size="1">
			<digest>
				Snap Pitch To Grid When Editing
			</digest>
			<description>
				Toggles the ability to precisely snap the midicents of each edited note to the current
				microtonal grid. If this is active, not only the display but also the midicent values of the edited notes can only be
				one of the elements of the chosen temperament (see the <m>tonedivision</m> to know more about microtonal grids and temperaments).
				By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Snap Pitch To Grid When Editing" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="solocolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Solo Color
			</digest>
			<description>
				Sets the color of items set as "solo" in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.61 0.61 0.21 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Solo Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="spacebarplay" get="1" set="1" type="int" size="1">
			<digest>
				Use Spacebar To Play
			</digest>
			<description>
				Toggles the ability to sequence events via the spacebar (see <m>keyboard</m> commands).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Spacebar To Play" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="stafflines" get="1" set="1" type="llll" size="1">
			<digest>
				Number Of Staff Lines
			</digest>
			<description>
				Sets the staff lines. An llll containing as many elements as the number of voices is expected,
				if less elements are input, the last one is padded.
				Each staff line element (for the given voice) can be either an integer number,
				representing the number of stafflines the voice will have (e.g. <b>3</b>, meaning: just 3 stafflines,
				located around the middle line of a standard 5-lines-staff), or an llll, containing the explicit
				indices of the lines to be displayed. In this case, 1 correspond to the bottommost staffline of
				the standard 5-lines-staff, 5 to the topmost one, and all other numbers work accordingly.
				Zero or negative indices are also allowed. For instance, <b>(0 5 6)</b> will set as stafflines the one below
				the bottommost default one, the topmost line of a default staff, and the one above.
				Use <b>0</b> or <b>nil</b> or <b>()</b> to hide all the stafflines of a staff.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number Of Staff Lines" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="subdivisiongridcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Subdivision Grid Color
			</digest>
			<description>
				Sets the color of the each grid subdivision line in RGBA format.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0. 0. 0. 0.1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Subdivision Grid Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="syncopationasymratio" get="1" set="1" type="float" size="1">
			<digest>
				Syncopation Max Asym-Ratio
			</digest>
			<description>
				Handles the display of syncopations depending on the asymmetricity of their sides.
				It is the maximum allowed ratio between the durations of the longest and the shortest side of the syncopation,
				in order for it to be a merged syncopation.
				By default this is 1., which means that only symmetric syncopation are admitted, i.e. the ones where both
				sides have the same duration. <br />
				A syncopation can be either tied or merged, depending, respectively, if it is represented by two tied chords, or by a single (larger) chord,
				placed across a given beat. Syncopations are characterized in <o>bach.score</o> by a precise position inside the measure, which is the symbolic onset
				(with respect to the measure) of the beat across which the syncopation happens. Once we have such position, one can see the two
				sides of the syncopation: a left and a right side, each characterized by their duration.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Syncopation Max Asym-Ratio" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="syncopationposdurratio" get="1" set="1" type="float" size="1">
			<digest>
				Syncopation Max Dur/Pos-Ratio
			</digest>
			<description>
				Handles the display of syncopation depending on their position and their left side duration.
				It is the maximum allowed ratio between the syncopation position, with numerator forcedly set to 1, and the
				duration of the syncopation left side, in order for a syncopation to be a merged syncopation. This might
				appear complicated: if so, just leave it to the default value of 2.5. However, the idea is that this ratio
				somehow tells "how simple" the syncopation is. <br />
				A syncopation can be either tied or merged, depending, respectively, if it is represented by two tied chords, or by a single (larger) chord,
				placed across a given beat. Syncopations are characterized in <o>bach.score</o> by a precise position inside the measure, which is the symbolic onset
				(with respect to the measure) of the beat across which the syncopation happens. Once we have such position, one can see the two
				sides of the syncopation: a left and a right side, each characterized by their duration.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="2.5" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Syncopation Max Dur/Pos-Ratio" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tempodigits" get="1" set="1" type="int" size="1">
			<digest>
				Number Of Digits For Tempo Approximation
			</digest>
			<description>
				Sets the number of digits for tempo approximation. Defaults to 2 for 64-bit mode, to 1 for 32-bit mode.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number Of Digits For Tempo Approximation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tonedivision" get="1" set="1" type="int" size="1">
			<digest>
				Microtonal Division
			</digest>
			<description>
				In the bach environment, the tone division defines the microtonal accuracy of the symbolic representation,
				by representing the number of steps in which each tone is divided.
				For the standard semitonal representation (where just sharps and flats suffice), one can stick with
				<m>tonedivision</m> being 2, meaning: the tone is divided into two semitones.
				By increasing this value, the microtonal grid gets more dense: for instance, 4 is the quartertonal grid
				(where each tone is divided in 4 quartertones); 8 is the eight-tonal grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Microtonal Division" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="treehandling" get="1" set="1" type="int" size="1">
			<digest>
				Rhythmic Trees Handling
			</digest>
			<description>
				Sets the way in which rhythmic trees are interpreted. Some options are available, from the less invasive to the most invasive: <br />
				- Take For Granted: trees are taken as they are, and essentially left unchanged (unless <m>maketreecompatiblewithts</m> is set). <br />
				- Refine Only Graphically: see "Refine", but the refined levels are only displayed graphically and never output upon <m>dump</m>. <br />
				- Refine: tree levels can be refined internally. This option tells bach.score that the tree the user inserts may not be the actual tree,
				but a precise suggestion, and score is allowed to create additional beaming or tuplet levels inside the already existing levels, without
				destroying or incorporating existing levels into new ones. <br />
				- Process (default): tree levels can be refined internally and in some occasion wrapped or merged. This option tells bach.score that the tree
				the user inserts may not be the actual tree, but rather a quite loose suggestion: the algorithm is allowed to add levels if needed
				(even if they wrap existing levels), and in some particular cases to merge levels as well. <br />
				- Ignore: all tree levels are ignored: the tree the user has inserted is completely by the algorithm, which is in charge to rebuild
				it automatically, from scratch.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Rhythmic Trees Handling" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="undobang" get="1" set="1" type="int" size="1">
			<digest>
				Send bang Upon Undo
			</digest>
			<description>
				Toggles the ability of send the bang through the rightmost outlet when an undo/redo action is performed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send bang Upon Undo" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="useloop" get="1" set="1" type="int" size="1">
			<digest>
				Activate Loop Region (When Shown)
			</digest>
			<description>
				Toggle the ability to use the loop region during the playback, if such region is shown (see the
				<m>showloop</m> attribute). If this is 1, and the loop region is shown, the playback will loop inside the region;
				otherwise, even if the loop region is shown, the playback will continue linearly, without looping. By default this is 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Play" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Activate Loop Region (When Shown)" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="velocityhandling" get="1" set="1" type="int" size="1">
			<digest>
				Show Velocity
			</digest>
			<description>
				Chooses the way in which velocities should be displayed: <br />
				- None (default): velocities are simply not displayed in any way. <br />
				- Colorscale: velocities are mapped on a color scale ranging from almost white (velocity = 1) to the ordinary <m>notecolor</m> (velocity 127). <br />
				- Colorspectrum: velocities are mapped on a spectrum of colors ranging from red (velocity = 1) to blue (velocity = 127). <br />
				- Alpha: velocities are mapped on a the transparency (alpha) channel, from 0 (velocity = 1, fully transparent) to 1 (velocity = 127, fully opaque). <br />
				- Duration Line Width: velocities are mapped on the width of the duration line, from almost 0 (velocity = 1, extremely thin) to the width defined
				via the attribute <m>durationlinewidth</m> (velocity = 127, maximum thickness). <br />
				- Notehead Size: velocities are mapped on the size of the notehead and accidentals, from the smallest size (velocity = 1) to the ordinary size (velocity = 127).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Show" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Velocity" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="verboseundo" get="1" set="1" type="int" size="1">
			<digest>
				Post Undo/Redo Steps
			</digest>
			<description>
				Toggles the ability of undo system to post the performed undo or redo steps in the Max window.
				By default this is inactive.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Edit" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Post Undo/Redo Steps" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="voicenames" get="1" set="1" type="llll" size="1">
			<digest>
				Voice Names
			</digest>
			<description>
				Sets the voice names. An llll containing as many elements as the number of voices is expected,
				if less elements are input, the last one is padded.
				Each voice name can be either a single symbol, or a wrapped llll, for multiple naming (if you want to assign
				more than one name to the same voice).
				Use the <b>()</b> or <b>nil</b> list to skip the naming for a voice.
				For instance: <b>voicenames Foo (John Ringo) () "Electric Piano"</b> sets "Foo" as name for the first voice,
				sets both "John" and "Ringo" as names for the second one, leaves the third voice without name, and sets "Electric Piano"
				(as a single symbol) as name for the fourth voice.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="voicenamesalign" get="1" set="1" type="int" size="1">
			<digest>
				Voice Names Alignment
			</digest>
			<description>
				Sets the alignment for the voice names, at the beginning of the staff, with respect to all other
				voice names. Possibilities are: "Left", "Center", "Right".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names Alignment" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="voicenamesfontsize" get="1" set="1" type="float" size="1">
			<digest>
				Voice Names Font Size
			</digest>
			<description>
				Sets the font size of voice names (rescaled according to the <m>vzoom</m>).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Font" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="11" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voice Names Font Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="writetrees" get="1" set="1" type="int" size="1">
			<digest>
				Incorporate Tree Information Upon Write or Writetxt
			</digest>
			<description>
				Toggles the saving of rhythmic tree levels inside the files created after a <m>write</m> or <m>writetxt</m>
				message. By default this is active.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Rhythm" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Incorporate Tree Information Upon Write or Writetxt" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.roll" />
		<seealso name="bach.slot" />
		<seealso name="bach.beatbox" />
		<seealso name="bach.beatunbox" />
		<seealso name="bach.quantize" />
		<seealso name="bach.score2roll" />
		<seealso name="bach.unpacknote" />
		<seealso name="bach.chordrev" />
		<seealso name="bach.chordrot" />
		<seealso name="bach.restrot" />
		<seealso name="bach.tierev" />
		<seealso name="bach.fromc&amp;r" />
		<seealso name="bach.toc&amp;r" />
		<seealso name="bach.slot2line" />
		<seealso name="bach.slot2curve" />
		<seealso name="bach.slot2filtercoeff" />
		<seealso name="bach.ezmidiplay" />
		<seealso name="bach.sliceheader" />
		<seealso name="01-Hello World" module="bach" type="tutorial" />
		<seealso name="02-Brother John" module="bach" type="tutorial" />
		<seealso name="04-Through The Looking Glass" module="bach" type="tutorial" />
		<seealso name="05-Slot Machines" module="bach" type="tutorial" />
		<seealso name="06-The Gift Of Synthesis" module="bach" type="tutorial" />
		<seealso name="08-Real Time Stories" module="bach" type="tutorial" />
		<seealso name="09-The Minimal Way" module="bach" type="tutorial" />
		<seealso name="10-The World Outside" module="bach" type="tutorial" />
		<seealso name="13-Beams Through The Trees" module="bach" type="tutorial" />
		<seealso name="14-A Mazing Grace" module="bach" type="tutorial" />
		<seealso name="20-Edit Path" module="bach" type="tutorial" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll/bang)">
			<description>
				bang or llll containing gathered syntax of the entire object.
				See the <m>bang</m> and <m>llll</m> methods for more information.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				Measureinfo in separate syntax..
				See the <m>llll</m> method for more information.
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Inlet 3 (llll)">
			<description>
				Pitches (in cents) in separate syntax..
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 4 (llll)">
			<description>
				Durations (in symbolic units, fractions of the whole note) in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 5 (llll)">
			<description>
				Velocities (1 to 127) in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 6 (llll)">
			<description>
				Ties (1 for notes starting a tie, 0 for any other note) in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
		<entry name ="Inlet 7 (llll)">
			<description>
				Extras in separate syntax.
				See the <m>llll</m> method for more information.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Whole object dump.
				The gathered syntax of the whole <o>bach.score</o> (or a part of it, depending on the <m>dump</m> message arguments)
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Measureinfo.
				The measureinfo in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Pitches (in cents).
				The pitches (in cents) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Durations.
				The durations (in symbolic units, fractions of the whole note) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 5 (llll)">
			<description>
				Velocities.
				The velocities (1 to 127) in separate syntax.
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 6 (llll)">
			<description>
				Ties.
				The ties (1 for notes starting a tie, 0 for any other note) in separate syntax
				The separate synax of a given parameter is nothing but an llll containing the value of such parameter for each notation item
				to which it can be applied. The llll should be properly structured depending on the hierarchical structure. <br />
				In <o>bach.score</o>, Measureinfo are assigned measurewise (they are a propriety of measures): an llll for each voice, containing a specification
				for each measure is expected.  <br />
				Durations are assigned chordwise (they are symbolic durations: a propriety of chords, rather than notes):
				the separate syntax for durations will be thus structured as: an llll for each voice, containing an llll for each measure,
				possibly containing an llll for each rhythmic level (see below), containing a rational value for each chord.
				For instance: <b>((1/4 1/4 ((1/8 1/16) (1/32 1/32)) -1/4) (1/12 1/12 1/12 -3/4)) ((-1) (1/4 -3/4))</b>.
				The symbol "t" is also accepted in input to tie a duration to the following one, e.g. <b>((1/4 t 1/16 -3/16 -2/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, and if the <m>outputtiesindurationtree</m> is set to 1,
				such "t" symbols are also always output in the durations separate syntax.
				Grace chords are defined either by setting a rational duration of 0 (converted into 1/8 grace chords) or by setting
				a rhythmic level starting with a "g" symbol, which will thus contain all grace elements, e.g. <b>((1/4 (g 1/8 1/16 1/16) 1/4 1/4 0 1/4))</b>.
				If the <m>outputtrees</m> algorithm is set to output trees in all outlets, grace chords are output, in the durations gathered syntax,
				with the grace levels syntax, otherwise they are output as chords with 0 duration. <br />
				Cents, velocities, ties and extras are all assigned notewise in <o>bach.score</o> (they propriety of notes, rather than chords).
				The separate syntax for any of such parameters will be thus structured as: an llll for each voice, containing an llll for each chord,
				containing a value for each note. For instance, a cents assignment can have the following form:
				<b>(((6000) (6000 6400) (6200) (6200 6500)) ((7200) (6500 7200 7500))) (((5500) (5400)))</b>. <br />
				While using separate syntax as input, for all notewise parameter, except for extras, a shortcut is tolerated: one can assign a
				single value for each chord (and not each note) meaning that such value must be applied to the whole chord. If no chord exists,
				and such value must create a chord, then a chord with a single note si created. For instance, <o>bach.scire</o> can properly understand
				<b>((6000 (6000 6400) 6200 (6200 6500)) ((7200) (6500 7200 7500))) ((5500 5400))</b>. However, when the separate syntax is retrieven as
				output, the llll will be always properly shaped, according to the musical hierarchy, without any shortcut. <br /> <br />
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 7 (llll)">
			<description>
				Extras.
				The extras in separate syntax.
				Extras are defined in the separate syntax via lllls sent through the Extras inlet, in the form
				<b>(<m>extra_name</m> <m>GLOBAL_CONTENT</m>) (<m>extra_name</m> <m>GLOBAL_CONTENT</m>)...</b>
				where each sublist is thus composed by a name (a symbol identifying the extra, one of the following: "graphics", "breakpoints", "slots",
				and also "articulations", but only for <o>bach.score</o>)
				and a global content, which is just an llll structured exactly according to the object's hierarchy.
				This llll is no different than any other separate parameter llll (say: Cents), only instead of having a single element (number)
				for each note, an llll is given, specifying the content of the extra associated to each note
				(a level of parentheses is needed for each note). For instance, the pitch breakpoints specification for a given note may have the form
				<b>((0. 0. 0.) (0.5 500 0.5) (1. 0. 0.))</b>, whereas a complete list of extras to be introduced in the Extras inlet may have the form
				<b>(breakpoints (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.)) (( 0. 0. 0. ) (0.5 -500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1)
				(1. 0. 0.)))) (((( 0. 0. 0. ) (0.5 500 0.5) (1. 0. 0.))) ((( 0. 0. 0. ) (0.5 -200 0.1) (1. 0. 0.))))) (slots ( (((3 10 20 30) (4 0.4))
				((3 10 20 30) (4 0.1))) (())) ())</b>. Notes, chords or voices which don't need a given extras are allowed to be represented as input by
				an empty <b>()</b> llll. <br />
				The content of each extra is exactly the same as the gathered syntax of such extra, provided that the starting symbol is dropped.
				For instance, instead of <b>(graphics 6200 -1/2)</b>, one should just have <b>(6200 -1/2)</b> as graphic content for a given note, and so on.
				The syntax for the gathered syntax of all extras is provided below. Remember to drop the extra router symbol to obtain the content
				to be put in the separate syntax llll. <br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 8 (llll)">
			<description>
				Playout.
				Outlet sending information about elements being played, as well as query answers and notifications.
				For <o>bach.score</o>, the playout syntax is used whenever the information about a note or chord is sent through the playout (either at playtime
				or at offline play, or selection dump).
				The playout syntax is a slight variation of the standard chord gathered syntax. Two different cases apply, according to the <m>playmode</m>
				attribute value. If the <m>playmode</m> is set to Chordwise, the information about each chord is output in the form <br />
				<b>chord <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE1</m> <m>NOTE2</m> <m>NOTE3</m> <m>chord_flag</m>) </b> <br />
				where each <b><m>NOTE</m></b> is the gathered syntax of the note.
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord. <br />
				If the <m>playmode</m> is set to Notewise, information about each note is output as if the note were the only note in the chord, i.e. in the form <br />
				<b>note <m>voice_number</m> <m>MIDI_channel</m> (<m>symbolic_duration</m> <m>duration_ms</m> <m>symbolic_onset_in_measure</m>
				<m>onset_from_score_beginning_in_ms</m> <m>NOTE</m> <m>note_flag</m>) </b> <br />
				where <m>NOTE</m> is the note gathered syntax. <br />
				If <m>playrest</m> is set to 1, and the chord is a rest, the router symbol is <b>rest</b> instead of chord, and there is no <m>NOTE</m> llll. <br />
				In case the played note or chord is just a grace chord, the <m>symbolic_duration</m> becomes an llll in the form <b>(g <m>grace_symbolic_duration</m>)</b>.
				The <m>MIDI_channels</m> is the one associated with the voice to which the note or chord belongs. The <m>onset</m> is in milliseconds,
				The <m>chord_flag</m> is a bitfield summing values of 1 (if chord is locked), 2 (if chord is muted), 4 (if chord is solo). <br />
				The playout syntax also concerns markers: they are output in the form: <b>marker <m>NAME_OR_NAMES</m> <m>ONSET</m> none</b>
				where the <m>NAME_OR_NAMES</m> is either a single atom (if the marker has a single name) or a wrapped llll containing the names.
				The last <b>none</b> symbol is the marker role, currently unsupported in <o>bach.score</o>. The <m>ONSET</m> can either be a single
				floating point value, representing the onset in milliseconds (if the marker is attached to the milliseconds position), or an llll representing
				the onset timepoint (if the marker is attached to the position inside the measure). <br />
				The playout syntax also concerns tempi: they are output in the form <b>tempo <m>voice_number</m> <m>tempo</m> <m>TEMPO_LLLL</m></b>,
				where <m>tempo</m> is the floating point tempo referred to the quarter note, and
				<m>TEMPO_LLLL</m> is in the form <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b>.
				If the tempo starts an accelerando/rallentando (i.e. interpolation is set to 1), then the <m>tempo</m> element is substituted by the llll
				<b>(<m>tempo</m> <m>next_tempo</m> <m>interp_duration_ms</m>)</b>.  <br />
				The playout syntax also concerns measures: if <m>playmeasures</m> is 1, at the beginning of each measure (for each voice), an llll is output
				in the form <b>measure <m>voice_number</m> <m>measure_number</m> <m>MEASUREINFO_LLLL</m></b>.
				If a tempo and/or a chord lie at the beginning of a measure, the order of output for the elements is: measure, tempo, chord (or notes). <br />
				For all the previously exposed cases, if the <m>playoutfullpath</m> attribute is set to 1, the <m>voice_number</m> is substituted by
				an llll determining the address of the element (see the <m>playoutfullpath</m> attribute for more information. <br /> <br />
				A timepoint represents a given instant inside <o>bach.score</o>, as a measure-attached position.
				It identifies such point according to a measure, a position inside such measure,
				and possibly a voice (in case tempi and time signatures are not synchronous for all voices).
				Differently from absolute millisecond positions,
				timepoints are represented by lllls, in one of the following syntaxes: <br />
				- <b>(<m>measure_number</m>)</b>: represents the point is at the beginning of the measure identified by the introduced measure number, in the first voice.
				For instance, <b>(4)</b> represents the point at the very beginning of measure 4, voice 1. <br />
				- <b>(<m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number (in the first voice),
				but not necessarily at the beginning, rather at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(4 1/4)</b> represents the point at measure 4, voice 1, after 1/4 from the beginning of the measure. <br />
				- <b>(<m>voice_number</m> <m>measure_number</m> <m>sym_onset_in_measure</m>)</b>: represents the point inside the measure identified by the introduced measure number,
				in the voice identified, by the introduced voice number, at the generic position in measure identified by the symbolic onset <m>sym_onset_in_measure</m>.
				For instance, <b>(2 4 1/4)</b> represents the point at measure 4, voice 2, after 1/4 from the beginning of the measure. Specifying voice numbers explicitly is especially
				important if voices don't have the same tempi or time signatures.
				<br />
				A timepoint can also  be specified via a <b>(<m>float_measure_number</m>)</b>, representing the point in a floating
				point position between two measures (referred to the first voice). For instance, <b>(4.2)</b> represents the point at the 20% of measure 4, voice 1.
				Furthermore, the <m>sym_onset_in_measure</m> can be replaced by a float between 0 and 1 to represent a point between the beginning (0) and the end
				of the measure (1); for instance <b>(1 4 0.2)</b> represents the point after 20% of measure 4, voice 1.
				<br /> <br />
				For <o>bach.score</o>, the gathered syntax for any note is, in its simplest form <b>(<m>pitch_cents</m> <m>velocity</m> <m>tie?</m> <m>note_flag</m>)</b>
				where <m>pitch_cents</m> is the pitch of the note in MIDI cents, the <m>velocity</m>
				is a value from 1 to 127 corresponding to the note dynamic, the <m>tie?</m> value is 1 only if the note starts a tie and 0 otherwise, and
				the <m>note_flag</m> is an optional bitfield summing values of 1 (if note is locked), 2 (if note is muted), 4 (if note is solo). <br />
				In its most general form, each note can have different specifications and attributes, defining one of the possible extras:
				graphics, pitch breakpoints, slots, names, articulations.
				Each of these specifications is done in the form <b>(<m>specification_name</m> <m>SPECIFICATION CONTENT</m>)</b>, and must be put after the <m>tie?</m>
				and before the <m>note_flag</m>. The order in which the specifications are listed is, on the other hand, unimportant. For instance, a note definition might have the form
				<b>(7000. 127 1 (graphic 6900 1/2) (slots (1 (0. 112.5 0.) (1. 0. 0.))) (articulation stacc) (name foo) 0)</b>.
				<br /> <br />
				The <m>graphic</m> specification informs about the enharmonicity status of a note.
				It is given by an llll in the form <b>(<m>graphic</m> <m>displayed_midicents_ignoring_accidental</m> <m>displayed_accidental</m>)</b>,
				where <m>displayed_midicents_ignoring_accidental</m> are the cents of the diatonic displayed note (ignoring any accidental that it might have),
				and <m>displayed_accidental</m> is the displayed accidental in rational form (sharp corresponding to 1/2, flat to -1/2, quarterflat to -1/4 and so on).
				For instance, a Db just above the middle C would have a graphic specification of <b>(graphics 6200 -1/2)</b>.
				<br /> <br />
				The <m>breakpoint</m> specification informs about possible pitch breakpoints that a note duration line has. This is useful to represent glissandi.
				It is given by an llll in the form <b>(<m>breakpoints</m> <m>BPT1</m> <m>BPT2</m> <m>BPT3</m>...)</b>,
				where each <m>BPT</m> is an llll in the form <b>(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m>)</b>, where
				<m>relative_x_position</m> is a double precision number from 0 to 1 representing the point where the breakpoint is, 0 corresponding to
				the notehead and 1 corresponding to the note tail; <m>delta_midicents</m> is the pitch difference (in midicents) between the breakpoint pitch and the base note pitch;
				<m>slope</m> is a value from -1 to 1 corresponding to the curvature of the segment of duration line preceding the breakpoint (this implies that the slope of the first breakpoint
				is always ignored), as for Max <o>curve</o> object (thus 0 being linear). <br />
				Two breakpoints are always present: the first breakpoint corresponds always to (0 0 0), and can never
				be different than this; the last breakpoint corresponds always to the note tail, and must always be in the form <b>(1 <m>delta_midicents</m> <m>slope</m>)</b>.
				If all breakpoints are trivial (thus if there are just two breakpoints: notehead and tail, and the notetail has <m>delta_midicents</m> = 0), the breakpoint
				specification is never given as output. For instance, a note making a glissando upwards and then downwards of 200cents, linear while ascending and exponential in the descent,
				will have the breakpoint specification of the form <b>(breakpoints (0 0 0) (0.5 200 0) (1 0 0.5))</b>. <br />
				If the <m>breakpointshavevelocity</m> attribute is set to 1, pitch breakpoints also have velocities, thus the complete <m>BPT</m> specification is in the form
				(<m>relative_x_position</m> <m>delta_midicents</m> <m>slope</m> <m>velocity</m>),
				where <m>velocity</m> is a number from 1 to 127 corresponding to the pitch breakpoint dynamic. If different breapoints have different dynamics, the behavior of
				the velocity between them is considered to be interpolatory, for instance by abstractions like <o>bach.dl2line</o> or <o>bach.dl2curve</o>.
				<br /> <br />
				The <m>slots</m> specification informs about the content of each one (or a subset) of the slots of a note.
				It is given by an llll in the form <b>(slots <m>SLOT1</m> <m>SLOT2</m>...)</b>,
				where each one of the <m>SLOT</m> is an llll containing the information about one slot, in the form
				<b>(<m>slot_number</m> <m>SLOT_CONTENT</m>)</b>. <br />
				The slot content syntax depends on the slot type. <br />
				- For slot of type <m>function</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>slope</m>)</b>, where the first two elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>int</m> or <m>float</m> the content must be in the simplest form: <b><m>number</m></b>. <br />
				- For slot of type <m>intlist</m> or <m>floatlist</m> the content must be in the form: <b><m>number1</m> <m>number2</m>...</b>. <br />
				- For slot of type <m>text</m> the content must be in the form: <b><m>text_as_an_unique_symbol</m></b>. <br />
				- For slot of type <m>llll</m> the content must be in the form: <b><m>WRAPPED_LLLL</m></b>, equivalent to <b>(<m>LLLL</m>)</b>.  <br />
				- For slot of type <m>filelist</m> the content must be in the form: <b><m>filepath1</m> <m>filepath2</m> <m>filepath3</m>... <m>active_file_index</m></b>,
				where <m>active_file_index</m> is the index of the file which will appear as clicked (active). <br />
				- For slot of type <m>spat</m> the content must be in the form: <b><m>SPATPOINT1</m> <m>SPATPOINT2</m> <m>SPATPOINT3</m>...</b> where each
				<m>SPATPOINT</m> is in turn in the form <b>(<m>t</m> <m>radius</m> <m>angle</m> <m>interpolation_type</m>)</b>,
				where the first element is the time position (by default, if the domain is temporal, this is between 0 and 1), then comes the radius
				(distance of the sound from the listener) and the angle which the sound makes with respect to a reference vertical direction.
				Last parameter is an interpolation type, which is 0 (default) for circular spatialization and 1 for linear spatialization. <br />
				- For slot of type <m>color</m> the content must be in the form: <b><m>red</m> <m>green</m> <m>blue</m> <m>alpha</m></b>, where
				the parameters are the components of the RGBA color representation (from 0. to 1.).  <br />
				- For slot of type <m>3dfunction</m> the content must be in the form: <b><m>POINT1</m> <m>POINT2</m> <m>POINT3</m>...</b> where each
				<m>POINT</m> is in turn in the form <b>(<m>x</m> <m>y</m> <m>z</m> <m>slope</m>)</b>, where the first three elements are the coordinates of the point, and the last one is
				a slope parameter, from -1 to 1, corresponding to the curvature of the segment preceding the point. <br />
				- For slot of type <m>filter</m>, when you need to input content you can use the syntax:
				<b><m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m></b>, where <m>filtertype</m> is one of the following symbols:
				<m>lowpass</m>, <m>highpass</m>, <m>bandpass</m>, <m>bandstop</m>, <m>peaknotch</m>, <m>lowshelf</m>, <m>highshelf</m>, <m>allpass</m>.
				You can equivalently use for input the syntax
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m></b>, where the parameters are the coefficients of a biquad filter, as for <o>biquad~</o>.
				Finally, when data is output, the syntax is always a combination of the two:
				<b><m>a0</m> <m>a0</m> <m>a2</m> <m>b1</m> <m>b2</m> (<m>filtertype</m> <m>cutoff_frequency_Hz</m> <m>gain_dB</m> <m>Q_or_slope</m>)</b>. <br />
				- For slot of type <m>dynfilter</m> the content must be in the form: <b>(<m>t1</m> <m>FILTER1</m>) (<m>t2</m> <m>FILTER2</m>) (<m>t3</m> <m>FILTER3</m>)...</b>, where
				each <m>FILTER</m> is in the form defined for slot of type <m>filter</m>, just above. <br />
				- For slot of type <m>togglematrix</m>, <m>intmatrix</m> or <m>floatmatrix</m> the content must be in the form: <b><m>WRAPPED_MATRIX_AS_LLLL</m></b>,
				equivalent to <b>(<m>ROW1</m> <m>ROW2</m>...)</b>, where each row is a wrapped llll.
				In the bach environment, a matrix is just a llll having depth two, whose first-level sublllls are the rows of the matrix.
				For instance the matrix <b>(1 0 0) (0 1 0) (0 0 1)</b> is the 3 by 3 identity matrix. A "good" matrix is supposed to be well formed,
				i.e. all its rows must have the same length. A matrix is square if the length of the rows (which is the number of columns) is the same
				as the number of rows.
				<br /> <br />
				The <m>name</m> specification informs us about a possible name (or possibles names) of a notation item.
				It is simply given by an llll in the form <b>(name <m>NAME_OR_LLLL_OF_NAMES</m>)</b>,
				where <m>NAME_OR_LLLL_OF_NAMES</m> is either a single of symbols or integer, or an llll corresponding to the name(s) of the notation item.
				For instance, an item named as "john george" will correspond to the llll <b>(name john george)</b>.
				An item named "(high 1) (low 2)" will correspond to the llll <b>(name (high 1) (low 2))</b>.
				If an element has no names, the <m>name</m> specification is never given as output.
				<br /> <br />
				The <m>articulation</m> specification informs us about an articulation assigned either to a chord or to a note.
				It is simply given by an llll in the form <b>(articulation <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m>)</b>,
				where <m>ARTICULATION_OR_LIST_OF_ARTICULATIONS</m> is a list of symbols idenfitying articulations to be added to the notation item.
				The symbols of the list are allowed to be the following ones: "staccato" or "stacc", "staccatissimo" or "staccmo",
				"fermata" or "ferm", "portato" or "por", "accent" or "acc", "accentstaccato" or "accstacc", "accentportato" or "accport",
				"portatostaccato" or "portstacc", "martellato" or "mart", "martellatostaccato" or "martstacc", "lefthandpizzicato" or "lhpiz",
				"trill" or "tr", "gruppetto" or "grupp", "upmordent" or "umord", "downmordent" or "dmord", "doublemordent" or "mmord",
				"upbowing" or "ubow", "downbowing" or "dbow", "tremolo" or "trem" (for the tremolo with three slashes), "tremolo2" or "trem2"
				(for the tremolo with two slashes), "tremolo1" or "trem1" (for the tremolo with a single slash), "gruppetto" or "grupp". <br />
				The default bach font has all the articulations glyphs; however, not all the other supported fonts do, especially Boulez doesn't have
				a certain number of the previous articulations among its glyphs. If you don't see an articulation as you wish
				(e.g. tremoli with Boulez), it might be because the font doesn't have the proper character, so try to use another font.
				<br /> <br />
				Measureinfo is the information about time signature and tempo, plus some other optional specifications concerning the measure itself.
				This can be a single <b><m>TIME_SIGNATURE</m> <m>TEMPO</m></b> valid for all voices and all measures, or a llll containing for each measure and each voice
				an llll in the form <b>(<m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				All elements except for the <m>TIME_SIGNATURE</m> are optional. <br /> <br />
				The <m>TIME_SIGNATURE</m> is an llll containing the measure time signature, in one of the following forms: <br />
				- <b>(<m>numerator</m> <m>denominator</m>)</b> for standard time signatures. For instance, <b>(4 4)</b> corresponds to a 4/4 time signature. <br />
				- <b>((<m>numerator1</m> <m>numerator2</m> <m>numerator3</m>...) <m>denominator</m>)</b> for time
				signatures where the numerator is a sum of numbers.For instance <b>((3 2 3) 8)</b>
				corresponds to a (3+2+3)/8 time signature. <br /> <br />
				The <m>TEMPO_OR_LIST_OF_TEMPI</m> represent in its simplest form, a single tempo, having one of the following syntaxes: <br />
				- <b>(<m>tempo_value</m>)</b> will assign a quarter tempo at the beginning of the measure. For instance <b>(60)</b> will set a 1/4 = 60 tempo. <br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m>)</b> will assign the tempo value to the specified symbolic unit (at the beginning of the measure).
				The <m>tempo_figure</m> is indeed the tempo symbolic unit: for instance <b>(3/8 40)</b> will set a tempo of a dotted quarter = 40.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m>)</b> will assign the tempo value to the specified symbolic unit and will put the
				tempo at the point inside the measure specified by the <m>tempo_sym_onset</m>. For instance <b>(3/8 40 1/4)</b> will set a tempo of a dotted quarter = 40
				but not at the beginning of the measure, rather after 1/4 from the beginning.<br />
				- <b>(<m>tempo_figure</m> <m>tempo_value</m> <m>tempo_sym_onset</m> <m>interpolation_to_next?</m>)</b> will do exactly as the previous case
				but if <m>interpolation_to_next?</m> is non-zero it will also toggle the interpolation from this tempo to the following one,
				yielding an accelerando or rallentando (depending if the next tempo is faster or slower). For instance <b>(3/8 40 1/4 1)</b>
				will set a tempo of a dotted quarter = 40, after 1/4 from the beginning, and will toggle the tempo interpolation to next tempo.<br />
				If more than one tempo need to be assigned to a given measure, one needs to use the general syntax for <m>TEMPO_OR_LIST_OF_TEMPI</m>, which is
				<b>(<m>TEMPO1</m> <m>TEMPO2</m> <m>TEMPO3</m>...)</b>, where each tempo must be in one the forms explained above. As an example, consider
				<b>((60) (1/4 70 1/16) (1/8 60 1/8 1) (1/8 80 3/8))</b>, where four tempi have been defined. The order of tempi is irrelevant,
				only their onset is accounted for. <br />
				Also, one might add an integer number at the beginning of each measure llll to indicate that the given measureinfo reference is valid for a
				certain number of measures, such as <b>(<m>how_many_measures</m> <m>TIME_SIGNATURE</m> <m>TEMPO_OR_LIST_OF_TEMPI</m> <m>SPECIFICATION1</m> <m>SPECIFICATION2</m>...)</b>.
				For instance <b>(5 (4 4) ((80) (1/4 160 1/2)))</b> creates 5 measures of 4/4, each one starting with quarter = 80, and then each one accelerating
				until 1/4 = 160 exactly at half of the measure. For instance
				<b> (((4 4) (1/8 60)) ((2 4) (1/4 50 1/4 1)) (4 (4 4)) (nil (180)))</b> means that we start a bar 1 in 4/4 and octave note = 60, then we
				pass at 2/4 and quarter = 50 after 1/4 of measure 2, and at that moment, an accelerando starts. The accelerando lasts during 4 4/4-measures,
				and then ends at the following measure on a new tempo of quarter = 180. <br /> <br />
				Each <m>SPECIFICATION</m> is an optional llll representing a given measure parameter, in the form <b>(<m>parameter_name</m> <m>parameter_value</m>)</b>.
				The <m>parameter_name</m> is a symbol identifying the parameter. The complete list of parameters symbols and their corresponding
				values is the following one: <br />
				- <b>width</b>: assigns a fixed width to a measure. It expects as value a fixed width in pixels that the measure will have (referred to the default
				vertical and horizontal zoom of 100%, and modified accordingly to those). Assigning a <m>width</m> parameter will also lock the measure barline,
				so that the width will remain the same, no matter how many chords and notes the measure does and will contain. Use the "auto" symbol
				instead of the fixed width to revert to the automatic measure width assignment (depending on the measure content). <br />
				- <b>widthfactor</b>: assigns a local factor for the spacing. It expects as value a multiplier factor, which will be applied to the whole measure
				spacing, and which will compress (for values less than 1) or expand (for values
				greater than 1) the width of the measure and the spacing of its chords accordingly. In this case, the measure barline is not locked, only the
				width factor is changed. <br />
				- <b>barline</b>: assigns a specific ending barline to a given measure. It expects a specific letter, representing the barline type. This letter
				can be one of the following ones: 'a' = automatic barline (defaul), 'n' = normal barline, 'd' = dashed barline, 'p' = dotted barline (p = "points"),
				't' = double barline (t = "two"), 's' = solid barline, 'f' = final barline, 'h' = hidden barline. <br />.
				- <b>shownumber</b>: deals with measure numbers. If an "off" symbol is given as value, it means that the measure number of the current measure will
				not be displayed. If a specific number is given, it will be assigned as a forced measure number to be displayed, for instance <b>(shownumber -4)</b> will
				show -4 as measure number (also see the attribute <m>measurenumberoffset</m>). If an "auto" symbol is given, it will show the measure's automatically
				assigned measure number (default). <br />
				- <b>boxes</b>: assign custom beaming boxes. It expects custom beaming boxes for the measure, as a plain list of rational numbers.
				Custom boxing allows you to handle beam grouping inside the measure differently than beat-wise.
				Each number of the expected list is the symbolic width of each beaming box inside the measure.
				If the given boxes don't fill the whole measure, the last one is padded. For instance, in a 4/4 measure,
				<b>(boxes 1/8)</b> will simply use eight 1/8-wide boxes to beam elements inside the measure, instead of the default 1/4 wide ones (beats).
				This is equivalent to <b>(boxes 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8)</b>.
				Analogously, <b>(boxes 1/2 1/8 1/4 1/8)</b> is a more exotic boxing for the same time signature. <br />
				As a final example, (((4 4) (60) (widthfactor 0.5) (barline h) (shownumber off))) for a given measure sets a 4/4 time signature, a quarter = 60 tempo,
				compresses the measure by a factor of two, hides its final barline and its number.
				<br /> <br />
			</description>
		</entry>
		<entry name ="Outlet 9 (bang)">
			<description>
				bang when changed.
				This outlet sends a bang whenever any element has been changed via the interface.
			</description>
		</entry>
	</misc>

</c74object>