{
  "bach.append": {
    "digest": "Append lllls together",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.args": {
    "digest": "Manage subpatcher arguments",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.arithmser": {
    "digest": "Arithmetic series",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.cartesianprod": {
    "digest": "Cartesian product",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.collect": {
    "digest": "Collect elements into lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.comb": {
    "digest": "Combinations of elements",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.constraints": {
    "digest": "Solve constraints satisfaction problems",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.contains": {
    "digest": "Contents of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.defer": {
    "digest": "Put an llll at the front of the low-priority queue",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.deferlow": {
    "digest": "Put an llll at the tail of the low-priority queue",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.delace": {
    "digest": "De-interleave an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.depth": {
    "digest": "Depth of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.diff": {
    "digest": "Difference of two sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.==": {
    "digest": "Compare two lllls for equality",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.expr": {
    "digest": "Evaluate mathematical expressions",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.factorize": {
    "digest": "Factorize a number",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.find": {
    "digest": "Find elements",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.flat": {
    "digest": "Decrease the depth of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.geomser": {
    "digest": "Geometric series",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.>=": {
    "digest": "Compare two lllls for greater than or equal condition",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.group": {
    "digest": "Group elements of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.>": {
    "digest": "Compare two lllls for greater than condition",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.insert": {
    "digest": "Insert elements in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.intersection": {
    "digest": "Intersection of two sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.is": {
    "digest": "Type of the incoming data",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.iter": {
    "digest": "Iterate through lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.keys": {
    "digest": "Route an llll according to specific keys",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.lace": {
    "digest": "Interleave lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.length": {
    "digest": "Length of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.<=": {
    "digest": "Compare two lllls for less than or equal condition",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.<": {
    "digest": "Compare two lllls for less than condition",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.mapelem": {
    "digest": "Modify llll elements",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.minmax": {
    "digest": "Minimum and maximum of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.!=": {
    "digest": "Compare two lllls for inequality",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.nth": {
    "digest": "Return specific elements of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.pack": {
    "digest": "Assemble an llll with keyed sublists",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.perm": {
    "digest": "Return permutations of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.pick": {
    "digest": "Return elements from an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.pipe": {
    "digest": "Delay lllls.",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.portal": {
    "digest": "Let lllls through",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.post": {
    "digest": "Print lllls in the Max window, element by element",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.prime": {
    "digest": "Primality test",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.primeser": {
    "digest": "Series of prime numbers",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.print": {
    "digest": "Print lllls in the Max window",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.pv": {
    "digest": "Share lllls within a patch hierarchy",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.read": {
    "digest": "Read an llll from disk",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.readsdif": {
    "digest": "Read an SDIF file",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.reg": {
    "digest": "Store an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.reshape": {
    "digest": "Impose to an llll the structure of another",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.rev": {
    "digest": "Reverse an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.rot": {
    "digest": "Rotate an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.scramble": {
    "digest": "Perform a random permutation of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.shelf": {
    "digest": "Storage system for lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.slice": {
    "digest": "Split lllls in two",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.sort": {
    "digest": "Sort an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.step": {
    "digest": "Iterate through lllls, driven by bangs",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.subs": {
    "digest": "Replace or remove elements in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.swap": {
    "digest": "Swap elements in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.symdiff": {
    "digest": "Symmetric difference of two sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.thin": {
    "digest": "Remove duplicate elements",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.trans": {
    "digest": "Matrix transposition of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll",
      "bach matrix calculus"
    ]
  },
  "bach.tree": {
    "digest": "Display and edit lllls in a tree diagram",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach llll",
        "bach interface",
        "U/I"
      ],
      "action": "bach.tree",
      "pic": "bach.tree.svg"
    }
  },
  "bach.union": {
    "digest": "Union of two sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.value": {
    "digest": "Share lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.weights": {
    "digest": "Interpolate lllls according to weights",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.wrap": {
    "digest": "Wrap an llll in parentheses",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.write": {
    "digest": "Write an llll to disk",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.writesdif": {
    "digest": "Write an SDIF file",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.+": {
    "digest": "Quick llll addition",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.-": {
    "digest": "Quick llll subtraction",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.abs": {
    "digest": "Quick absolute value of lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.autoscale": {
    "digest": "Linearly rescale an llll automatically",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.bitdecode": {
    "digest": "Decode a bit field",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.clip": {
    "digest": "Limit elements of lllls within a certain range",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach./": {
    "digest": "Quick llll division",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.dl2curve": {
    "digest": "Convert a duration line into pitch and velocity curve~ messages",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.dl2line": {
    "digest": "Convert a duration line into pitch and velocity line~ messages",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.dx2x": {
    "digest": "Build llll from element differences",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.filter": {
    "digest": "Only let specified data types through",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.filternull": {
    "digest": "Let through every non-null input",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.interp": {
    "digest": "Interpolate between lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.lookup": {
    "digest": "Return specific elements of an llll (inlets reversed)",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.mapelem": {
    "digest": "Modify llll elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.maximum": {
    "digest": "Output maximum element-wise",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.mc2r": {
    "digest": "Interval to frequency ratio conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.minimum": {
    "digest": "Output minimum element-wise",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.%": {
    "digest": "Quick llll modulo",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.pow": {
    "digest": "Quick llll exponentiation",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.prepend": {
    "digest": "Add an llll in front of input",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.prod": {
    "digest": "Multiply all numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.r2mc": {
    "digest": "Frequency ratio to interval conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.!/": {
    "digest": "Quick llll division (inlets reversed)",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.repeat": {
    "digest": "Repeat lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.replace": {
    "digest": "Quickly find and replace elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.!-": {
    "digest": "Quick llll subtraction (inlets reversed)",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.round": {
    "digest": "Round llll elements to a value",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.scale": {
    "digest": "Linearly rescale an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.sieve": {
    "digest": "Only let some elements through",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.sum": {
    "digest": "Sum all numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.*": {
    "digest": "Quick llll multiplication",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.x2dx": {
    "digest": "Take differences between element",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.adj": {
    "digest": "Compute the adjugate of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.bachtree2omtree": {
    "digest": "Convert a bach rhythmic tree into an OpenMusic rhythmic tree",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.beatbox": {
    "digest": "Box voice-wise parameters into measure-wise information",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.beatunbox": {
    "digest": "Flatten measure-wise parameters into plain voice-wise information",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.circle": {
    "digest": "Clock diagram",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach set theory",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach set theory",
        "bach interface",
        "U/I"
      ],
      "action": "bach.circle",
      "pic": "bach.circle.svg"
    }
  },
  "bach.derive": {
    "digest": "Derive functions",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.diag": {
    "digest": "Build a diagonal matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.dict2llll": {
    "digest": "Convert a dictionary into an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.eig": {
    "digest": "Find eigenvalues and eigenvectors",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.extractbasis": {
    "digest": "Find linearly independent vectors",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.fft": {
    "digest": "Fast Fourier transform for lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.float2rat": {
    "digest": "Approximate a floating point number with a rational number",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.gausselim": {
    "digest": "Perform matrix gaussian elimination",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.graph": {
    "digest": "Plot a graph",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach math",
        "bach interface",
        "U/I"
      ],
      "action": "bach.graph",
      "pic": "bach.graph.svg"
    }
  },
  "bach.hypercomment": {
    "digest": "A <o>comment</o> with hyperlink references",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach interface",
      "U/I",
      "bach miscellanea"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach interface",
        "U/I",
        "bach miscellanea"
      ],
      "action": "bach.hypercomment",
      "pic": "bach.hypercomment.svg"
    }
  },
  "bach.integrate": {
    "digest": "Integrate functions",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math"
    ]
  },
  "bach.ivec": {
    "digest": "Compute the interval vector of a pitch-class set",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach set theory"
    ]
  },
  "bach.linearsolve": {
    "digest": "Solve a linear system of equations",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.llll2dict": {
    "digest": "Convert an llll into a dictionary",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.mc2n": {
    "digest": "Midicents to note name conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.minfo": {
    "digest": "Report information about a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.mtimes": {
    "digest": "Perform matrix multiplication",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.n2mc": {
    "digest": "Note names to midicents conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.omtree2bachtree": {
    "digest": "Convert an OpenMusic rhythmic tree into a bach rhythmic tree",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.poset": {
    "digest": "Partially ordered sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll"
    ]
  },
  "bach.primeform": {
    "digest": "Compute the prime form of a pitch-class set",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach set theory"
    ]
  },
  "bach.quantize": {
    "digest": "Perform quantization tasks",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation"
    ]
  },
  "bach.ratnum": {
    "digest": "Display and output rational numbers",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach math",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach math",
        "bach interface",
        "U/I"
      ],
      "action": "bach.ratnum",
      "pic": "bach.ratnum.svg"
    }
  },
  "bach.reducefunction": {
    "digest": "Simplify breakpoint functions",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach miscellanea"
    ]
  },
  "bach.roll": {
    "digest": "Display and edit a score in proportional notation",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach notation",
        "bach interface",
        "U/I"
      ],
      "action": "bach.roll",
      "pic": "bach.roll.svg"
    }
  },
  "bach.score": {
    "digest": "Display and edit a score in classical notation",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach notation",
        "bach interface",
        "U/I"
      ],
      "action": "bach.score",
      "pic": "bach.score.svg"
    }
  },
  "bach.submatrix": {
    "digest": "Get a submatrix of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.tonnetz": {
    "digest": "Pitch space lattice",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach set theory",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach set theory",
        "bach interface",
        "U/I"
      ],
      "action": "bach.tonnetz",
      "pic": "bach.tonnetz.svg"
    }
  },
  "bach.trace": {
    "digest": "Compute the trace of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach matrix calculus"
    ]
  },
  "bach.tree": {
    "digest": "Display and edit lllls in a tree diagram",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach llll",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach llll",
        "bach interface",
        "U/I"
      ],
      "action": "bach.tree",
      "pic": "bach.tree.svg"
    }
  },
  "bach.slot": {
    "digest": "Display and edit a single slot window",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach notation",
      "bach interface",
      "U/I"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach notation",
        "bach interface",
        "U/I"
      ],
      "action": "bach.slot",
      "pic": "bach.slot.svg"
    }
  },
  "bach.wordcloud": {
    "digest": "Display a word cloud",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach interface",
      "U/I",
      "bach miscellanea"
    ],
    "palette": {
      "category": [
        "bach",
        "bach objects",
        "bach interface",
        "U/I",
        "bach miscellanea"
      ],
      "action": "bach.wordcloud",
      "pic": "bach.wordcloud.svg"
    }
  },
  "bach.zsearch": {
    "digest": "Search for Z-related pitch-class sets",
    "module": "bach",
    "category": [
      "bach",
      "bach objects",
      "bach set theory"
    ]
  },
  "bach.belong": {
    "digest": "Tell if some elements belong to a llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.bin": {
    "digest": "Compute binomial coefficient",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.cartopol": {
    "digest": "Cartesian to polar coordinate conversion for lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.change": {
    "digest": "Filter out repetitions of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.chordrev": {
    "digest": "Reverse the non-rest elements of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.chordrot": {
    "digest": "Rotate the non-rest elements of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.combinevoices": {
    "digest": "Combine voices into a new bach.roll or bach.score",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.compl": {
    "digest": "Find complement of a pitch-class set",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.convertbase": {
    "digest": "Perform base conversion for numbers",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.coprime": {
    "digest": "Test if numbers are coprime",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.coprimeser": {
    "digest": "Coprime number series",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.counter": {
    "digest": "Multi-index counter",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.cross": {
    "digest": "Compute the cross product of two lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.det": {
    "digest": "Compute the determinant of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.divisors": {
    "digest": "Find divisors of a number",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.drip": {
    "digest": "Automatically step through lllls with delays",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.dsort": {
    "digest": "Sort llll by distances",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.ezmidiplay": {
    "digest": "Quick way to play MIDI",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.f2mc": {
    "digest": "Frequency to midicents conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.fact": {
    "digest": "Compute factorial",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.fromc&r": {
    "digest": "Reassemble non-rest and rest elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.funnel": {
    "digest": "Index llll elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.gcd": {
    "digest": "Compute greatest common divisor",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.getcol": {
    "digest": "Get a column of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.getrow": {
    "digest": "Get a row of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.histo": {
    "digest": "Build histograms",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.idmatrix": {
    "digest": "Build identity matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.idvector": {
    "digest": "Build cartesian versors and combinations",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.ifunc": {
    "digest": "Compute interval function of two pitch-class sets",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.im": {
    "digest": "Find the image of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.inv": {
    "digest": "Find the inverse of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.istruct": {
    "digest": "Get the interval structure pitch-class set",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.ker": {
    "digest": "Find the kernel of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.keychain": {
    "digest": "Organize lllls by keys",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.kurtosis": {
    "digest": "Find the kurtosis of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.lcm": {
    "digest": "Compute least common multiple",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.locate": {
    "digest": "Locate elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.m2jitcellblock": {
    "digest": "Display the content of an llll matrix in a jit.cellblock",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.m2matrixctrl": {
    "digest": "Format an llll matrix to be used with matrixctrl or matrix~",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.mapchord": {
    "digest": "Individually modify chords",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.matrixctrl2m": {
    "digest": "Convert a matrixctrl object into an llll matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.mc2f": {
    "digest": "Midicents to frequency conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.mc2pc": {
    "digest": "Midicents to pitch-classes conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.mcapprox": {
    "digest": "Snap midicents to microtonal grid",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.mean": {
    "digest": "Find the mean of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.median": {
    "digest": "Find the median of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.mod+": {
    "digest": "Modular arithmetic addition",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.mod-": {
    "digest": "Modular arithmetic subtraction",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.mode": {
    "digest": "Find the mode of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.mod*": {
    "digest": "Modular arithmetic multiplication",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.mono": {
    "digest": "Make <o>bach.roll</o> monophonic",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.mpow": {
    "digest": "Compute the power of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.mrandom": {
    "digest": "Obtain a random matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.nearest": {
    "digest": "Snap numbers to nearest elements of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.norm": {
    "digest": "Find the norm of a vector",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.normalize": {
    "digest": "Normalize a vector",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.pad": {
    "digest": "Pad or trim an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.partition": {
    "digest": "Compute integer partitions",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.path2llll": {
    "digest": "Obtain full directory tree in llll form",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.pc2mc": {
    "digest": "Pitch-classes to midicents conversion",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.pcsetinfo": {
    "digest": "Report basic information about a pitch-class set",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach set theory"
    ]
  },
  "bach.period": {
    "digest": "Find the period of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.poltocar": {
    "digest": "Polar to cartesian coordinate conversion for lllls",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.quantiles": {
    "digest": "Find quantiles or filter according to them",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.random": {
    "digest": "Pick random elements from an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.randomdrip": {
    "digest": "Output random elements with delays",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.rank": {
    "digest": "Compute the rank of a matrix",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.reduce": {
    "digest": "Recursively apply binary function on elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.restrot": {
    "digest": "Rotate the negative signs of an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.score2roll": {
    "digest": "Convert a <o>bach.score</o> into a <o>bach.roll</o>",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.skewness": {
    "digest": "Find the skewness of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.sliceheader": {
    "digest": "Separate header and body of a gathered syntax",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.slot2curve": {
    "digest": "Convert a function-slot content into messages for <o>curve~</o>",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.slot2filtercoeff": {
    "digest": "Convert a dynfilter-slot content into messages to drive <o>filtercoeff~</o>",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.slot2function": {
    "digest": "Convert a function-slot content into a <o>function</o> object",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.slot2line": {
    "digest": "Convert a function-slot content into messages for <o>line~</o>",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.split": {
    "digest": "Add parentheses depending on a separator",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.stdev": {
    "digest": "Find the standard deviation of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.stream": {
    "digest": "Stream last elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.tierev": {
    "digest": "Reverse a sequence of ties",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.toc&r": {
    "digest": "Route non-rest and rest elements",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.transcribe": {
    "digest": "Fills a <o>bach.roll</o> according to incoming MIDI data",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.unpacknote": {
    "digest": "Separate note parameters from playout syntax",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach notation"
    ]
  },
  "bach.urn": {
    "digest": "Pick random elements from an llll without duplicates",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.variance": {
    "digest": "Find the variance of the numbers in an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach math"
    ]
  },
  "bach.wellshape": {
    "digest": "Force matrix to be properly rectangular",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach matrix calculus"
    ]
  },
  "bach.wrandom": {
    "digest": "Pick weighted random elements from an llll",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  },
  "bach.wurn": {
    "digest": "Pick weighted random elements from an llll without duplicates",
    "module": "bach",
    "category": [
      "bach",
      "bach abstractions",
      "bach llll"
    ]
  }
}
